%% 2022\day01\day01_1.d
import std.stdio;
import std.conv;
import std.algorithm;
import std.range;

void main(string[] args)
{
    stdin.byLineCopy.array.splitter("")
         .map!(x => x.fold!((a, b) => a.to!int + b.to!int)(0))
         .maxElement
         .writeln;
}

%% 2022\day01\day01_2.d
import std.stdio;
import std.conv;
import std.algorithm;
import std.range;

void main(string[] args)
{
    stdin.byLineCopy.array.splitter("")
         .map!(x => x.fold!((a, b) => a.to!int + b.to!int)(0))
         .array
         .sort!((a,b) => a > b)[0..3]
         .sum
         .writeln;
}

%% 2022\day01\in.txt
15931
8782
16940
14614

4829
12415
13259
11441
8199

2540
2500
6341
2235
1858
4157
5053
6611
1050
4401
6187
1078
3297

25264
23014
15952

10156
4544
4930
11786
15822

1264
6399
2031
6892
3115
5151
5093
6724
7001
4011
1458
1945

2106
2016
1528
2524
6089
4466
3154
2686
3289
5831
1520
2122
5744

33066
22616

1993
8485
1037
9730
2076
7492
10000
2971

11027
9137
4599
7461
1531
12939

17530
18837
19466
4845

1467
4870
10176
6657
5608
2096
9977
6478

18828
26577

17901
5059
13789
4993

6676
3415
2464
5937
4275
6629
7566
1943
6313
4572

9121
10713
5071
1669
7736
10522
6231

6400
1771
4568
7681
7486
6090
2223
5581
6705
5719
7519

6595
3849
6564
1622
2268
6424
5295
3627
2088
7357
6565
1878

20744
25902
15310

11785
2309
7863
15771
4541

9217
14774
10316
1035

5026
5406
2517
5628
4392
5195
5548
4046
2982
4444
4603
4139
5917
4623
5650

1304
7839
7143
1520
3668
6533
4406
7153
4585
5586
7202

10209
5965

5676
8694
8691
5790
5498
2189
5651
7073
5270
3057

2391
8708
8619
4297
4738
10270
3906

3023
4720
1548
2991
3111
7063
2012
3763
2035
1784
5001
1680

7538
7930
9906
8140
13556
4543

15678
13201
14557
2543
7345

30741
29356

8506
2596
1936
5285
11960
10241

4985
2868
10320
8332
1677
2481
2177
7646

6131
10046
10184
4015
4132
6841
4179
6723

11545
8164
17009
6257

5301
2162
4275
5983
2671
5587
1250
3145
1364
1145
5876
5648
1517
4821
5700

16437
14836
4812
3411
8245

7546
4484
3121
6861
6332
1407
4020
5444
7421
3100
3955

16399

6052
5898
4698
4965
3117
1798
4646
5183
5615
1508
1065
4239
5268
5753
3913

8019
4512
19441

11542
37427

2233
1709
1969
5307
4878
2657
6902
6803
2376
4771
4720
4788
3331

58268

15355
3160
15157
2642

5958
8776
5573
1966
6919
2661
1810
7727
3528
3520

3786
5268
7101
7405
4907
2235
4133
4449
4107
7039

1192

15060
9010
17932

3037
6302
1310
3578
3499
4572
2899
6801
7015
8003
1645

2609
8239
11678
4553
3746
7926
4316

7989
3443
5709
2736
1066
5070
5401
4781
8140
5206

6619
4757
5744
5749
4729
4403
1124
3927
1505
6378
7011
7042

10734
8546
11816
3041
8038
1514
8005

2358
4435
15419
9841
1425

1575
10261
4196

13692
3944
5136
14997

2395
2053
3511
5846
3289
2223
6256
1725
8118
1615

5239
14775
4030

10610
19176

5746
4448
6311
7034
1101
3327
2740
2102
2826
6415
2725
6958

11322
3127
9187
10407
12052
9870
10917

7802
15736
12384
12976
9523

4431
5918
7903
6003
5690
7135
6625
3042
3791
4604
4472

5938
1763
1053
1054
6116
1785
6375
3025
3233
7402
3616
4328

8730
1695
7271
12172

1549
1093
8703
4985
4782
3867
3377
5399
2160

3877
9623
16382
7247

6002
5321
2250
1800
1861
1295
5078
4417
5520
3786
3256
3833
6064
1192

5113
7824
1006
8708
2630
8752
7077

4902
3429
2356
5491
2655
3510
1323
3556
2666
5398
3297
5691
5189
6097
3642

6558
5566
6259
2433
5153
4382
2403
2022
4473
6768
6971

10026
13871
13729
5818
9155
10414

10107
1720
9245
2438
5150
2275
7178
5384

3092
4749
3262
2065
5267
5886
4299
5495
2835
3656
3673
5304
3762
1007
1018

28554
21993

2805
1096
2793
8293
3124
1876
7970
2845

6531
4430
1311
2156
7435
3390
4009
4575
4333
2742
6973
4136

2392
4116
4306
2518
4393
1104
2972
2281
5399
4100
2883
7281

2391
6469
3870
7305
4913
7618
6042
7663
5674
5749
6631

3428
12053
7299
4773
10473
8874
2151

3248
1165
2435
4215
4789
2067
4858
4051
1963
6408
2912
4624
1268

4409

13565

7738
5672
4046
7972
3639
4021
8963
2633
7339

9829
15037
13499
4234

6455
7168
5332
6783
16123

6047
4912
11390
9771

9789
5224
1315
3203
8979
5935
9119
8165

35275

4518
6479
12034
1535
11757
1587

4610
1626
2456
1352
5620
5503
6280
3946
4973
4822
5997
3462
4956
4251

2800
1862
1109
4088
1956
3073
5845
5377
5507
4893
4028
2680
1625
5827

16667
25591

6522
8676
8184
5751
9105
3063
1674
10344

5539
1142
5816
1168
5969
1389
2075
7074
3101
7431
2743
5736

2030
3296
4251
2939
1612
2397
6043
3978
2302
4059
3466
5130
4417
3434
5507

6623
1216
6469
3269
5336
3321
2133
4883
3175
5315
3771
4732
4096

7446
4631
9206
1435
8494
3378
4408
1267

1031
5587
7270
7454
1386
4005
7112
5510
6167
6258
6177
2584

9163
6488
8195
7072
2543
7303
3772
3218
6430

1846
1426
6176
2386
7884
3130
2066
1363
2676
4032
5883

6238
4357
6244
5001
6205
2031
4763
4717
3449
5988
2594
6508
6129
3292

5276
4818
3936
3716
6800
9499
6284
9610

17850
15611
1168
10641

3648
5602
3507
4240
1019
9291
4877
1210
1926

3812
9890
7661
13651
1409
10386

5305
6002
5503
1214
3192
2611
3303
3203
1917
2840
5494
1825
1135
2000
2666

1790
7427
4094
5114
4197
4891
3757
1257
1111
7603

6791
21115

6530
4247
12222
12781

8490
18751

3652
3504
3702
4855
1212
6255
1856
5854
7241
3881
7206
1378

4129
13281

8377
9763
7679
4214
4630
8473
8473

8725
6220
2198

7744
1879
11034
7657
9804
8737
11941

6000
11448
7628
1637
13733
12875

4185
14872
3858
3304
3888

3551
7065
2559
5068
1668
3129
5361
3866
3214
3785
5725
5409

2699
3046
2856
1163
4577
4562
1137
5976
4888
3274
3444
5393
1179
5842
4118

8999
9195
5866
4732
7260
8053
1744
2243

59751

2972
3341
6585
3761
5052
6547
3857
1717
6438
3061
4074
3960
2893

5365
17400
16638
2645

2858
5485
3270
1470
5477
6900
2096
4839
2745
1962
4589
5332
2532

6461
2328
4672
9236
2756
8089
5530
3597
3743

1256
18350

17958
10353
17514
8089

6730
5610
2916
2385
1329
6266
3138
1573
2726
5822
4665
4192

2509
13659
2992
3163
4710
13667

8718
8001
8395
6518
8604
5904
2956
5830
6497
6337

12989

36036
6483

17287

7230
11174
10488
9330
7884
1885

6206
6035
2633
8982
7805
9517
2961
2391
6385

42975

6497
13039
8944
10022
7280
10565

4189
5311
2161
6026
2672
1512
3381
2672
4408
2104
1844
4902
1184
5076

1915
2558
9039
5235
2360
4491
7424
8471
1421

5978
7846
9024
11363
3658
12312

6387
6701
6008
4706
12257

1756
9535
2131
9046

1929
4597
6341
6420
3274
1631
6382
5208
7825
1431
2402

5458
6924
2874
6041
2703
5111
4308
6932
5970
1813
4833
5304

7181
3390
3305
3785
4706
3308
6495
6222
7615
6231

1562
5987
5691
3910
2199
6038
4109
4856
6115
2915
1328
1627
4305
4279
1522

2469
2418
7364
6865
5711
3849
2045
3217
6821
2522
7100

7037
4718
2447
2830
5767
4812
7475
6267
7119
6095
3717
7429

11546
24555

6544
4806
7414
7130
5773
2574
7393
7058
3709
8329

5328
2752
2637
3992
4958
3984
3276
5768
5776
6417
4245
5962
6451

5131
9613
4627
8112
3703
4765
3983

5749
1308
6403
1154
2719
4229
1695
1883
4188
1930
6479
1643
4145
6469

1712
2651
6120
4479
1431
3414
1420
2645
3141
2134
3833
2917
5987
4440

14665
11731
4462

4443
4767
3167
2889
2494
1054
4301
5118
1606
3306
2464
4929
5815
5980
6051

2235
1326
1962
5198
6824
5968
6107
6362
6911
2249
5138
5072
6093

9073
18319
6656
19469

5004
7250
2725
3886
2064
2747
3683
6068
7107
2494
3164
5258

8240
5565
9900
9253
9780
8609
3622
5557

8430
8189
13988
3664
2842

9819
10269
7996
3874
1237
5402
2560
2218

5550
6123
4183
4115
1203
3360
1725
5902
2038
4024
3108
3652
3142
5830

10005
13753
15209
14921
4880

17368
1888
3327

1793
6804
4538
3085
1493
1086
1296
2894
5610
6306
4623
5761
4983

6374
3487
8405
7486
6123
2925
1779
1271

8150
3307
24346

8897
6651
10425
3195
9473
10734
4895
4251

11166
37176

29815
13284

4764
9530
19531
1524

11360
9121
4467
9222
8073
11766
4041

28221
36720

7336
5380
4774
6491
3241
3424
5956
2980
1309
6101
3746
3164

1685
7573
8509
7495
3145
7413
5480

2553
2369
4087

22541

18520
17646
2214
10201

14938
10062
21551

4553
8399
9026
10486
9448
12135
7814

3890
4593
7584
8915
3988
3565
8788
5293
3904

4965
2021
7167
10546
7628
5390
6927
10315

4100
6239
4096
4868
3045
4478
4822
4746
2953
2216
5223
2216
6248
2935

5992
7316
9399

14567
8081
9942
2254
8319

21916
35451

2934
6437
2518
6721
6958
7525
6017
4205
1579
1079
7375

6898
1432
4281
2130
4606
3784
5126
6926
3417
6179
2382
3285
1468

10483
4925
12330
2723
10685

10815
4848

1083
5124
1166
7641
8367
6187
3662
7465
8605
8117

19058
7396

5620
3362
6765
8339
5972
3422
1715
6641
4117
3269

20112
12403
17778

1652
6828
6867
5817
3292
2978
2569
2737
6586
3208
1328
2552
2938

38204

32440
13784

1367
7878
8547
5957
4673
4680
5917
1743
4883

2935
1864
2652
5241
2535
5303
2634
1511
4434
2411
4735
4892
4767
5571
5972

41656

4654
2609
5504
4437
2350
2897
2287
1052
6391
4299
4435
1061
3913
4269

13465
17336
4598

3442
2608
6953
6680
6806
2719
2738
6485
3670
6515
6211

8566
2737
12087

5540
6843
5021
7902
5829
1017
7270
4981
7634
4859
6316

3002
5108
1291
2928
7863
5200
1943
2076
2775

4434
7250
1377
5189
3158
3246
8714
9673

6330
11340
1411
14843

2745
3342
4958
2728
3845
6308
7138
6353
5265
3977
1446
4353

8334
7623
6531
10529
7419

3917
13563
8015
12802
1540
2008

1590
8424

1942
1828
5975
4489
4001
3199
2529
2109
4482
3607
5473
3249
4378
6493

3977
3184
6189
11999
13925

12065
6843
11238
16132
5347

4144
2827
5520
5141
5614
2529
4815
1054
6349
2184
3531
1591

10122
7709
6700
8312
8507
1890
4039

7177
3123
1449
8582
6580
9663
11280

8751
2358
18224

6872
4272
3138
8066
1413
5715
3053
1658
5595
5721

8921
7914
10497
3413
5289
2755
7726
7237

3304
2565
3505
4395
1937
5620
5992
5531
5294
5384
2487
3102
1839
2654
1369

13063
9483
3511
5543
13544

4367
3869
5907
4606
2922
4117
4716
4564
5228
5736
2237
5925
1736
3157

6877
1953
1103
10584
11666
2042

6997

5789
3955
1598
6997
6868
5148
8076
3007

7440
3774
4595
6827
6415
5796
8252
5947
3757

2786
1528
1920
5923
1861
4262
2462
5137
4527
3451
1820
4515
3091
4370

5231
5724
8463
5867
7776
1405
4873

5570
13574
9971
12111

38253

68706

3270
8365
4604
1469
4885
11781
4510

3705
1806
5869
3487
1970
4648
2254
1714
4678
4610
1851
4992
4037
1438
3186

7501
2667
6548
10978
1759
5718
7887

15685
17651
15879
16407

2727
7036
2483
6244
8733
6191
6852
7568
6863
1571

4016
1348
4466
4713
1777
2707
3959
3141
1027
2876
5167
1349
1531
4604
1631

1492
1616
2617
4184
2209
2463
3843
3106
3969
5790
5086
2469
5461
2426
2936

7818
2394
6102
3210
7205
2378
4621
6839
4375

4882
2275
2673
3927
1801
1181
4223
2134
1414
3513
1930
4218
1030
5153
5631

7855
8703
8604
3507
8327
2473
6072
2616
8550

7761
22778
22679

21461
18458

5893
11132
10226
13071
4987
7773

8890
9352
8432
7618
3971
9680
2787
9849

9239
10126
5646
10227
2786
8177
2412
7063

13769

2805
4241
5027
7401
3809
6649
4261
5625
5349
6866
2935
2487

15077
16612
11447
13677

1812
17170
24913

7213
5812
5693
5653
11687
7312
4465

6447
14207
18951

38602

34832

5562
1835
2126
1130
2669
3051
3105
4356
4789
3909
5162
5597
2452
4462
2074

5046
2712
2027
6702
4395
4134
7460
2079
5308
3774
5925
1420

5103
2566
5237
2763
3102
2628
3626
4125
3675
5186
5116
5401
1592
2347
3946

9256
2589
6950
8214
2216
9494
7900
4317
2246

37600

11146
9884
13530

1518
3963
4415
5577
4663
1243
7552
3866
6343
6301
1019

2667
7079
2560
6437
7190
5421
5409
1951
2801
6925
3310

13352
9266
5773
7103
13283
3512

2329
4814
4002
5247
4074
5463
5404
3785
1671
2970
3619
5702
4895
3947
1567

%% 2022\day01\test.txt
1000
2000
3000

4000

5000
6000

7000
8000
9000

10000

%% 2022\day02\day02_1.d
import std.stdio;
import std.conv;
import std.algorithm;
import std.range;

void main(string[] args)
{
    auto d = [
        "A X" : 1 + 3,
        "A Y" : 2 + 6,
        "A Z" : 3 + 0,

        "B X" : 1 + 0,
        "B Y" : 2 + 3,
        "B Z" : 3 + 6,

        "C X" : 1 + 6,
        "C Y" : 2 + 0,
        "C Z" : 3 + 3,

        ];

    stdin.byLine.map!(x => d[x]).sum.writeln;
}

%% 2022\day02\day02_2.d
import std.stdio;
import std.conv;
import std.algorithm;
import std.range;

void main(string[] args)
{
    auto d = [
        "A X" : 3 + 0,
        "A Y" : 1 + 3,
        "A Z" : 2 + 6,

        "B X" : 1 + 0,
        "B Y" : 2 + 3,
        "B Z" : 3 + 6,

        "C X" : 2 + 0,
        "C Y" : 3 + 3,
        "C Z" : 1 + 6,

        ];

    stdin.byLine.map!(x => d[x]).sum.writeln;
}

%% 2022\day02\in.txt
A Y
B X
C X
A Z
B Y
C X
C X
C X
C X
C X
A Z
B Y
C X
A Z
A Z
B Y
A Z
B X
C Z
C X
C X
B Y
C X
A X
B Y
B Z
A Z
B Y
C X
C X
C X
A Z
B Y
C X
A Z
C X
B Y
C X
C X
B Y
A Z
A Z
C X
C X
A Y
B X
C X
B X
C X
C X
A Z
C Z
C X
A Y
B Y
B Y
B X
C X
C X
C X
A Y
A Z
C X
A Z
C X
B Y
C X
C X
C X
C X
A Z
C X
A Z
C X
C X
B Y
C X
B Y
A X
A Y
C Y
A Z
C X
C X
A X
A Z
A X
C X
C X
A X
C X
B Y
A Z
A Y
A Z
B X
C X
B X
C X
C X
A Z
C X
C Z
C X
C X
C X
C X
C X
A Z
A X
C X
A Z
C X
C X
A Z
C X
A Z
A Y
C X
C X
A Z
A Z
C X
C X
A Z
A Z
C Z
C X
A Z
A Z
C X
B Y
C X
C X
A Y
A Z
A Z
A Z
A Y
B Y
A Z
C X
A Y
A Z
A Y
A Z
C X
C X
C X
B X
B Y
A Z
A Z
A Z
C X
A Z
A X
B X
C X
C X
C X
A Z
A Z
A Z
C X
C X
A X
A Z
C Y
A Z
C X
C X
C Z
C X
A Z
A X
C Y
A X
C X
C X
C X
A X
A X
C X
A Z
A Z
A Z
A Z
A Z
A Y
C X
A Z
A Z
A Z
B Y
C X
C X
A X
B X
A Z
C X
A Z
C X
A Z
C X
A Z
A Y
C X
C X
C X
A Y
C X
C Y
C Z
C X
C X
B Y
C X
A Z
C Z
A Z
C X
A Y
B Y
C X
C X
C X
B X
A Z
C X
C X
C X
B X
A Z
A Z
C X
C X
C X
A Z
A X
B Y
C Y
C X
A Z
A Z
A Z
B Y
B X
C X
A Z
A Y
B Z
C X
C X
A Z
A X
C X
A Z
B Y
A Z
C Z
B X
A Z
C X
C X
C X
A Y
C X
C X
A Z
A X
C Z
A Y
C X
C X
A Y
A X
B Y
C X
C X
C X
A Z
A X
C X
A X
A X
C X
C X
A Z
C X
A Z
A X
A Z
C X
B Y
A Z
C X
A Z
A X
B X
C X
B Y
A Y
A Y
C Z
B Z
C X
C X
C X
A Z
C Z
A Y
C X
A Y
C Z
A Y
B Y
C X
C X
A Z
B Y
C X
A Z
C X
C X
A Z
B Y
C X
B Y
C X
B Y
A Y
C X
A X
A X
B X
C X
A Z
C X
B Y
A Y
C X
B Y
B X
C X
C X
A Z
B X
A X
C X
C X
B Y
C Z
B X
C X
A Z
A Z
A X
C X
A Z
C X
A Z
C X
A Z
C X
A Z
A Y
A Y
C Z
C X
A X
C X
A Z
C X
B X
A Z
A Y
A Z
C X
A Z
C X
B Y
A X
C X
A Y
C X
C X
C X
A Z
A Y
C X
A X
C X
A Z
C X
C X
A Y
C X
C X
C X
A Z
A Z
C X
A Z
B X
A Z
C X
B Y
B X
C X
B Y
A Z
A X
C X
A Y
A X
A Z
B Y
A X
C X
C X
C X
C X
A Z
C X
C X
A X
A Z
A Z
B Y
A Z
A X
A Z
C X
B X
A Y
A X
A Y
C X
A Z
C X
A Z
B X
A Y
C X
C X
A Z
A Z
C X
C Y
A Z
A Z
A Z
A Y
C X
C X
A Z
A Z
A Z
B Y
C X
A Z
C X
A Y
A Z
A Z
A Z
C X
A X
A Z
A Z
B Y
B X
A Z
A X
C X
C X
A Z
A Z
C X
A X
A Z
C X
A X
C X
A Z
A Y
C X
B Y
B Y
C X
C X
C X
C X
C X
A X
A X
A Y
A Z
A X
C X
A X
A Z
B Y
A X
A X
C X
A Z
C X
C X
C X
A Z
A X
A X
C X
C X
C X
C X
C X
C X
A Z
C X
C X
C Z
C X
A Z
A Z
C X
C X
A Z
A Z
C X
A Z
A Z
A Z
A Z
C X
A X
C X
B Y
C X
A X
A X
A Y
C X
A Y
A Z
C X
C X
C Z
C X
C X
C X
B X
C X
C X
C X
A Y
C X
C X
A Z
C X
A Y
C X
C Z
C X
C X
B X
A Z
C X
C X
C X
C X
C X
B X
A Z
C X
A Z
B X
B Y
B Y
C X
C X
C Y
A Z
C X
C X
A X
A X
A X
A X
C X
C X
C X
C X
A Z
C X
A Z
A X
C X
C X
B Y
B Y
A Z
C X
A X
A Z
A Z
B Y
C X
C X
A Z
C X
A Z
C X
B X
C X
A Y
C X
C X
A X
B Y
B Y
C Z
C X
C X
B Y
A X
C X
C X
A X
A Z
C X
C X
A Z
B Y
A Z
C X
C X
A X
A X
C X
C Z
C X
A Z
B X
C X
B Y
A Y
B X
A Z
A Z
A X
A Z
A Y
A Z
A X
A Z
C X
C X
A Z
B Y
A Z
B X
B Y
A Z
C X
C Y
A Z
C X
C X
A X
A Z
A X
C X
C X
A Z
C X
C X
C X
C X
A X
B X
A Z
A Z
C X
A X
A X
C X
C X
A Z
A Z
C X
C X
A X
A Z
C X
A X
A Z
A Z
C X
A Z
A Z
C X
C X
A Z
C X
C X
A Z
C X
C X
A Z
A X
C X
C X
A Z
A Z
C X
C X
C X
A Y
C X
C X
B Y
C X
C X
C X
C X
A Z
A Z
A X
C X
A X
C X
A Z
B X
A Z
C X
C X
A Z
A Y
C X
C X
A Z
C X
B X
B X
B Y
A Y
A Y
A Z
A Z
A Z
C X
C X
A Z
C X
B Y
C X
B Z
A Z
C X
A Z
C X
C X
C X
C X
A Z
B X
A Y
C X
A X
A Z
B Y
A X
C X
C X
C X
C X
C X
A Z
A X
A Z
A X
A Z
A Z
C X
A X
C X
B X
C Z
A X
B X
A Y
C X
A Z
A Z
B X
B Y
B Y
C X
A Z
A X
C X
C X
B Z
B X
B Y
A Z
B Y
A Z
C X
A Z
A X
A Z
C X
C X
C X
A X
C X
A Z
C X
C X
C Y
B X
C X
A X
C X
A X
A Z
C Z
A Z
C X
A Y
C X
C X
B Y
C X
C X
A Z
C X
C X
C X
A Z
C Y
C X
A X
A Z
A X
C X
A Z
A Z
B Y
B X
A Z
C X
A Z
C X
A X
C X
C Y
A Z
A Y
C Z
C X
C Z
A Z
A Z
C X
C X
A Y
A X
B Y
C X
A Y
C X
A Y
C X
A Z
B X
A Y
C X
B X
A Z
C X
A Z
A Z
A Y
A Z
A X
B Y
C X
C X
C X
A Z
A X
C X
A Y
A Y
C X
A Z
C X
C Y
C X
C X
A X
A Z
A X
A X
C X
A X
A Z
C X
A Y
A Y
C X
B Y
A Y
C X
A Z
A Z
A X
C X
A Y
C X
C X
C X
C X
A Y
A Z
B Y
A X
A Y
C X
C X
C X
B X
A Z
C X
C X
B X
A Z
A X
C X
A X
C X
B Y
A Z
C X
C X
B X
A Z
A Z
A Z
C X
C X
C X
C Y
C X
C X
A Z
C X
A Z
C X
C X
B X
A X
A Z
C X
B Z
C X
C X
A X
A Y
C X
A Z
A Z
C X
C X
C X
C X
C X
C X
B Y
A Z
C X
A X
A Z
A Z
C X
C X
C X
A Z
C X
B Y
A Z
A Z
C X
C X
C X
C X
A Z
C X
A Z
A Y
A X
C X
A Z
C X
C X
A Z
A Z
A X
A Z
C X
A Z
A X
A Z
C X
C X
C Z
A X
C X
C X
A X
A X
C X
A Z
A Z
A Z
C X
C X
A Z
B Z
A Z
A Z
C X
A Z
C X
A Z
B X
C X
A Z
B Y
B Y
C X
A X
A Z
C X
C X
A Z
C Y
B Y
A Z
C X
C X
A Z
A Z
C Z
A Z
C X
C X
A Y
C X
A Y
B X
C Z
C X
A Y
C X
B Y
C X
C X
C Z
A Z
A Z
C X
C X
A Z
B Z
C X
A Z
C X
A Z
C X
C X
C Y
C X
B Y
A X
A Z
C X
B Y
A Z
B Y
C X
C Y
C Z
A X
A Z
A X
C X
C X
A Z
A Z
C X
C X
C X
C X
B Y
B Y
A Y
C X
C X
C X
A X
C X
B Y
A Z
B Y
C X
C X
B Y
C X
B Y
C X
C X
C X
A Z
A Z
C X
C X
B Z
A X
C X
C X
A Z
C X
C X
C X
C X
A Z
C X
A Y
A Z
C X
A Z
A Y
C X
A X
C Y
A Y
A Y
C X
C X
A X
A Y
C X
B Y
A Z
B Y
C X
B X
C X
C X
C X
B Z
A Y
C X
B Y
C X
A X
C X
C X
B X
A Z
C X
A Z
C X
C X
C X
C X
C X
C X
A X
A Z
A Z
C X
C X
C Z
B X
C Z
C X
B X
C X
A Z
B Y
A Z
C Z
C X
B X
A X
A Z
C X
C X
A Z
A Z
A Z
A X
C X
C X
A Y
A Z
C X
A Z
B Y
C X
C Z
A Z
C X
C X
C X
A X
A Z
A Z
C X
A Y
A Y
C X
C X
C X
C X
C X
A Z
C X
B X
C X
B X
B Y
A Z
C X
B Y
A Y
C Z
A Z
A X
C X
A Z
C X
A Z
C Z
C X
C X
A Z
C X
C X
C X
B Y
A Z
B X
A Z
A Z
B X
A X
A Z
C X
C X
A Y
C X
A Z
B Y
C Y
A Z
C Y
C X
A Z
C X
C X
A X
C X
A X
A Z
B Y
B Y
C X
B Y
C Z
C X
C X
B Y
A Z
C X
C X
C X
C X
C X
A X
A Z
B Y
A Y
C X
C X
C Z
C X
A X
C X
A Z
B Y
A Z
B X
C X
C X
A Z
C X
A Y
A Y
C X
B X
C X
B X
A Y
A Z
A Z
C X
A Z
A X
A Z
C X
C X
C X
A Z
B X
B X
A Z
C X
B Y
C X
C X
A Z
A X
C X
B Y
C X
C X
C X
A X
A X
B Y
A Y
A X
C X
A Z
B X
A Z
B Y
C X
B Y
A Y
C X
C X
C X
A Y
A Z
A Z
A X
A Z
A X
C X
A Z
A Y
A Z
A Z
A Z
A X
A Z
A Z
C X
C X
C X
A Z
C X
C X
B Y
C X
C X
C X
C Y
A Z
A Z
A Z
C X
A Z
B X
A X
A Z
A Y
C X
A Z
C X
A Z
A Y
B Y
C X
A X
A Z
A Z
C Y
A X
B Y
B Y
C X
A Z
A Z
A Z
A Z
A Z
A Z
A Z
C X
C X
B Y
C X
C X
A Y
C X
A Z
C X
A X
C X
A X
C X
C X
B X
C X
B X
C X
C X
A Y
A X
A Z
C X
A X
A Y
A Z
C X
C X
C X
B Y
A Z
A Y
A Z
C X
A Y
B X
C X
A X
A Y
A Y
A Z
A Z
A Z
C X
A Z
A X
A Z
C X
B X
A Z
C X
C X
A X
A Z
A Z
B Y
A Z
A X
A Z
A Z
A Z
A X
B Y
A X
A Z
C X
B X
A Z
A Z
A Y
B Y
A Y
B Y
C X
C X
A Z
B Y
A Z
A X
A Z
A Z
C X
C X
A Z
A X
C X
B Y
C X
C X
C X
C Z
A Y
C X
A Y
A Y
A Y
A Z
A X
A Z
A X
A Z
B Y
C X
A Z
A Y
C X
B Y
A Z
B Y
C X
B X
B Y
C X
A Z
B X
C X
B Y
B Y
C X
C X
A Z
B X
A X
A Z
C X
A Z
C X
C X
A Z
B X
A Z
C Y
C X
A Z
A X
B Y
B Y
C Y
B Y
A Y
C X
A X
C X
C X
C X
A Y
A Z
B Y
A Z
A Y
C X
A Y
A Y
A Y
C X
B X
B X
C X
B X
C X
C X
A X
A X
A X
C X
C X
C Y
A Y
A Z
C X
B Y
C X
A X
C X
A Z
C X
C X
C X
B X
C X
C Z
A Z
C Y
B Y
A Y
A Z
A Z
A X
A Y
C X
C Y
C X
C X
A X
A Y
A Z
C X
B X
B Y
B Y
C X
C X
C X
C X
A Z
C X
C X
B Y
C X
C X
A Z
A Z
A Z
A X
A Y
A Z
C Z
A Z
C X
C X
B Y
A X
C X
A Z
C X
A X
C X
A Z
C X
C X
A Z
A X
C X
C X
C X
A Y
C X
C X
A Z
C X
A Z
C X
A Z
C X
C X
C X
C X
A Z
C X
A Z
C X
A Z
A Z
B Z
A Z
A Y
C X
B X
C X
C X
C Z
C X
C X
C X
A X
A Z
A Z
A Z
C X
C X
C X
A Z
B Y
C X
C X
C X
A Z
C X
A Y
C X
B Y
A Z
C X
B X
C X
A X
C X
C X
C X
A Z
A Z
A Z
B Z
C X
A Z
A X
C X
B X
A X
A Y
B Y
B Y
A Z
C X
C X
C X
C X
A Z
A Z
C X
A X
B Y
B Y
A Z
A Z
C X
C X
A Z
A Y
C X
A Y
A Z
A Y
C X
A Z
C X
A Z
B Y
A X
A Z
C X
A X
C X
A Z
C X
C X
A Z
B X
B X
A Z
C X
A Y
A Z
C X
A X
A X
A Z
A Y
C X
A Z
B Z
C X
A Z
C X
A Z
A Z
C X
A Z
B X
A Z
C X
A Z
A Z
C X
C X
A X
A Z
A Z
C X
A Z
C X
A Z
C X
A X
A Z
A Z
C Z
C X
C X
B Y
B Y
C X
C X
C X
B X
A X
C X
A X
B Y
C X
B Y
A Z
A Z
A Y
A Z
B X
A X
C X
B Y
C X
A Z
C X
C X
A Z
A X
C X
C X
A Z
B Y
C X
A Z
B Y
A Z
A Z
A X
C X
A Z
C X
B Y
C X
C X
C X
A X
B Y
C X
A X
C X
A Z
C X
C X
B X
B X
C X
C X
A Z
B X
C X
A X
C X
B Y
A Y
C Z
C X
A Z
C Z
B Y
B Y
A Z
C Z
C X
C X
C X
A X
C X
A Z
B X
A Z
B Y
A Z
B X
A X
A Z
A Z
C X
B X
C X
A Z
B Y
A Z
C X
A Z
A Z
A X
A Z
A X
A X
C X
B X
C X
C X
B Y
C X
C X
A X
C X
C X
C X
C X
C X
A Z
C X
C X
A Z
A Z
B Y
C X
C Z
C X
B Y
C X
C X
C X
A Z
A Y
A X
C X
C X
B Y
C Z
C X
A Y
B Y
C X
C X
A Z
A Z
C X
C X
C X
B X
C X
C X
C X
C X
B Y
A X
C X
C X
A Z
C X
C X
C X
A Z
C X
C X
B Y
C X
A Y
C X
A Z
A Z
B Y
C X
C Y
A Y
C X
B Y
A Z
B X
C X
C X
A X
C X
C X
C X
C X
A X
A X
A Z
C X
B Z
C X
A Y
A Z
A Z
C X
C X
C X
A Z
A Z
A X
A Z
A Z
A Z
A Y
A X
A Z
C X
B Y
C X
A Z
C X
C Z
B X
C X
C X
A Z
A X
B X
C X
A Z
A Z
A Z
C Z
C X
B Y
C X
C X
C X
A Z
B Y
C X
C X
C X
C X
C X
C X
A X
C Z
B Y
A X
A X
B X
C X
C X
C X
A Z
A Z
B X
C X
C X
A Z
C X
A Z
C X
C X
C X
C X
A Z
C Y
C X
C X
A Z
A Z
A Z
A Y
A X
A X
C X
A Z
B X
A Z
C X
B X
C X
A Y
A X
C X
C X
C X
B X
B X
C X
A Z
A Z
C X
C X
A Z
B X
A Z
A Y
A X
A Y
C X
A Z
B Y
C X
A Z
C X
C X
A Z
A Z
A Y
B X
A Z
C X
A X
A Z
A Z
A Z
A X
C X
A Z
A Z
B X
A Y
C X
C X
C X
C X
B X
B Y
C X
A Z
C X
B Y
B Y
C X
B X
A Z
C X
C X
A Z
B Y
C X
A Z
C X
C X
A Z
C X
A Z
A X
C X
C X
A X
A Z
C X
A X
C X
C X
A X
C X
A X
A Y
A Z
A Y
A Z
C X
A Z
A Z
B Z
A Y
A Z
C X
A Z
C X
A X
C X
C Y
C X
C X
C X
A Z
B X
C X
C X
A Z
A Z
C Z
C X
A X
A Y
B Y
A Z
A X
B X
C X
C X
C X
A Y
C X
A Z
C X
C X
A Z
A X
C X
C Z
C X
C X
C X
A Z
A Y
C X
C X
A Z
C X
C Y
C X
C X
A Z
A X
C X
B X
A Z
A Z
C X
A Z
A Z
C X
A Y
C Y
A Z
A Z
B X
C X
A Z
A Z
C X
C X
C X
B Y
A Z
B Y
C X
B X
A X
C X
A Z
A Y
C X
A Z
C Z
A X
C X
A Z
C X
C X
A Z
C X
A Y
C X
C X
A Y
C X
B X
C X
C X
B Y
A X
C X
A Y
B Y
C X
A X
A Z
C Z
A X
C X
C X
B X
A Z
B Z
A Z
A X
A Y
C X
A X
B X
C X
C X
C X
C X
A Z
C X
A Z
A Z
C X
B X
C X
A Y
A Z
A X
A X
C X
A Y
C X
C X
A Y
C X
B X
A Z
C X
A Z
B X
A Z
B Y
C X
C X
C X
A Z
C X
C X
A X
C X
A Z
C X
C X
A Z
C X
A X
B Y
A Y
C X
C X
C X
A X
C X
A Z
C X
A X
C X
C X
A Y
C X
C X
C X
C X
A Z
C X
C X
A Y
A Z
C X
C X
C X
A Z
A Z
C Z
A Y
C X
C X
B Z
B Y
B Y
B Y
C Z
B Y
A Z
B X
C X
A Z
A Y
C X
B Y
C X
A X
B X
A Z
A Z
C X
C Y
A Z
B Y
A Z
A Z
C X
C X
B Y
C X
A Z
C Z
A X
C X
C X
C X
A Z
C X
B X
B Y
C X
A Z
A Z
C X
A Z
C Z
C X
B X
A X
B Z
A Z
C X
A X
C X
C X
C X
C X
A Z
C X
C X
C X
C X
A Z
A Z
C X
C X
A X
A Z
C X
A X
C X
C Y
C X
A Z
B X
A Y
A Z
C Y
A Z
C X
A Y
C X
A X
C X
A X
C X
A Z
C X
A X
A Z
A X
A Y
C Z
C X
A X
A Z
A Z
A Z
A Z
C X
C X
C Z
A X
A Z
B Y
A Z
A Z
B X
B Y
A X
A Y
A Z
C X
A Z
C X
A Z
B X
B X
C X
C X
C X
A X
C X
A Z
B X
A Y
B X
C X
A X
C X
A X
A Z
A Z
A Z
C X
B Y
C X
B Y
C X
A Z
A Z
A Z
C X
C X
B Y
A Y
C Y
A Z
C X
C X
A Z
C X
A Z
C Z
B X
C X
C X
A Z
B Y
A Y
C X
A X

%% 2022\day02\test.txt
A Y
B X
C Z

%% 2022\day03\day03_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;

void main(string[] args)
{
    stdin.byLine.map!(x => setIntersection(x[0..$/2].representation.sort,
                                           x[$/2..$].representation.sort).front)
         .map!(x => x <= 'Z' ? x - 'A' + 27 : x - 'a' + 1)
         .sum
         .writeln;
}

%% 2022\day03\day03_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;

void main(string[] args)
{
    stdin.byLineCopy
         .chunks(3)
         .map!(x => x.array)
         .map!(x => setIntersection(x[0].dup.representation.sort, x[1].dup.representation.sort, x[2].dup.representation.sort).front)
         .map!(x => x <= 'Z' ? x - 'A' + 27 : x - 'a' + 1)
         .sum
         .writeln;
}

%% 2022\day03\in.txt
gvNbShZZgQfWdQhdPQmggLTFLwmwjFqjVVgM
CsJnHllcsnnnnJrGRnRwPPLVmFLHLBjFFVHmPT
JlnCtctJnJDcJlDCRpPrSSQWfphzWZfbZSvfNfbS
WjvRSdSQjvpjWzNlnZlNZqCCMzZZ
nJtJsbctPBPwLNcDZNNGLClC
tsFJHBgJwgJbnvSHHWVWHhVhpQ
zRzPhCCSHVZzfGHZ
qBsWBpqBwBcvqqWgdfZrprdggPHHVZ
WWmvwvBbnWmnwvWcbmWWnqNCRSDRRSSjjSDbPJbRjClLhC
rQrznfHHhrHzllzlzTGcJgtJ
jhhjjSZVPWVZvSFtTttLTglgFtvm
dqSCqVWdbDSSVqbVVSqhNdrnpnCnfsnnwfnsRpMpBMrf
rTnvrSSHvHtnDQVDtfmW
ZjCglhcCJschpZbZgbtGmRtbGmwtQtbmtN
FFZCghFJhlslFpjcdFTPLHHmrqTMTdzBLHLH
WzDfrDwwDCCDMnfDHHJjTHTtNdngdHtQ
FmScGPPPPmpspchbGHtRsjdJJJWJWNttgH
bvhFlVhPchPvqWLwqLWqvq
RcchVlCCvmhDRjNJJJjbjllZlJ
wPwFGFMPfpdtqbpwFFfGPQZTWTZjtzQWTBBQJzZjZZ
fbwPqqMPwdgvmDVDhmRCgR
SSQggtQVQQgQGmGVthVnWDGjCBLLzdDNCCjDGWCW
RcHcHbFqbPMZRFTvHFFFlcZZBNBtNjjLLjDdjLjDqWCpNLpj
sPPclZcsZtMPfVsnnwwVJhmQ
jlrwpVPjMwfzZfhfwddH
DbQBGgBJPPBBHfPZ
ggGSQTnTgQGbSRQRPrNlsjVjMrpmMLnrrW
MzNNbMSrZNSSvGWWznwGQlTG
ZCFCJHqJFjqTTqngPwPG
LCJLJCCFtfjsJCMbZSMSbbcDdBfd
LCdjljfJJBfLDCCdJqGqsGGtmBsWtbGmSS
gpgchRcPgRRQNZcpNhgNPzzmGrmrGwtSSswqrSGbbTzt
QgQvNppRPQcggZNccchvNZgCjlnsDLDflDdfjLfMDVsMLv
jfSfTWfwTJffQQNwTCHnGGGgHbgqGFvF
LmspctdsLDlBLPmFFgqbqFFbqlnSRS
PSZZsctsDDtdBmzBLBSmpJjMzWwjVfwJVMrNfwrfzf
zFZqbRNRHNHhqHFqzNnzzqDQVFMggMgDpmJMTgpVTQFJ
SwLVsSWBfStDGMfDTDGGGT
vlCBVsSvCRrHRjCqrn
ndGVddlVdrcGlGcljdVGjCgfffPCCLfCMvqWvPnqgn
FNtRZBDDSNSNStDhFRNQtLgCMTCBqvLMMTfJqBLPLP
bwQwZhSDFhZbFSNccwzwHmHHjHMwsd
BrSDgqrgWzWDwJBzMDWBLjpmVLFfFPLVJjVVPLFV
cNnRlvNRvQTcnZwmfQGPmfVFPP
dsCNllvTdnntTlTsHcdCRtNRBDWBDWDrWBhDBqMBDqbzWwCr
stLcchcTwRcsVTtftVVthchqmmCCFvWmmgSgQFCwGvWSFCrr
PljDbZbzjllHdQNWHMFGrMMHMFrmmM
njjjzbPdqRcRQQns
BTBLwzmqWNbpzqNzLppLBnhZJcJSHThhnnJZHHSQnr
RfQgDjgsjVfRFDdvddtvhhhJCnrSnMZCcMSCSJ
QRtjtRQQlzlqqzzzBW
FnzllplJMntnzptLFzsjTVSQcSjSjQFFmdQQ
wgwrBrwGHPGBqHrDcpmjddSQTmTGVmmG
DBhhNBrCrMvNvzptpN
LgSbLLRJQSzLCgJRJhWCCzRBdZdcMfcHsMdFFjfPjsCHBc
nrVTnmrrrlnGGmrlVwVZPFHmdsZHBmjMcdjfcZ
wrnTlNpvVVrqFrtnwGqwwrTpSgSQQLbQRzQSQRJbQpDbQz
pgvmcpVcpwJppwgwvMWfHbRGRHDBJbWGfGGb
hQqFqQNhqdCPNhTQCCFbbjmBHBbBRjGHBDBGFj
TtdCCNlPCmssnqgvzzvvtVrgzzrc
JltddTSgtLLvgvdldgvWPZPPSjWMjCfWNjNWPG
FrwpbwhbmfjGRpGPNM
cmBrBcBnmFBQqcFbscBhQfttznJgzlLLDlnglzLLlg
mDhRsDzWZzGhhhWpZwzwGdfbFsfFTQTLcNFfFrNvvcbT
ngMHjjgVgqHnPlnqtnClMHbfCJFbcLFFJFLbrQNbFQcQ
SlqHqVVqPnBHSHHljlMndBdZQphRhdGpzWmWWwBh
hVNhcfbSSNMfjjMlqRCqpdzpRJdnhl
sBHPPwQwttBBssLCHzDBlDDmRmpJdqJJJd
sHHwtsHTWwtZPHtZbbVSgMbGCNjNvN
SgMtSMVChFBHBFdCwhdqPcPsbRVQqsblDbRmlc
jlrLWfvWvzWWzmcQcqcNbmNDjR
JpLznrnfGrrfnWWzTpfvzvdHHCgSBwdlTMhCTMFhBBwg
fptnFPLsttddDdRhQShQzC
BqGHGlqmmGmlJmNmqlbbCzSCQHDzSjHhfSShjfVh
fbrrMqGGBlNMGNqrqglmrLZwFcwgFwsPcscctpWLgn
TCMMTtWBqCMMMWWMSWhNFhlNBNlNHwNDsvhw
frfdrbZJrVLdZLbnJcrmvhlhHshlgsZsHwwghZ
fLRVvcvRVpfbcfVVJTqpWCCSqCCTTtjjPj
vRCGzdTtvdBCTzCdmVsQjnVttngthgnQHs
rLNZlrwrjrFLMsggsQpsQngqMq
NfjZWcbffDrLZfNLbDczvmcTvvGCmCBBmSdP
DSqdzrHgJtSHMgvmnNGdcmCnvssN
ZwQLlVlRVVWZFZhbJZVjRJscvBGcpssLpBcnGpBsmpBs
TwwjjQJTjlhwMfTDgMrfgtqg
HhvVhgddvdvqTqVqHQgjgmCPWGrcWsGWPcvlsWrWmC
lbJBBFbMlJFRCmsRmRPtCtwm
FMLLpDLnFpFJbDfLnZZSzhqHVdVQjgSdlQTZ
mvBrszzsrrrGsBDvBvszDRQDhjCwWdLhJdCjjWZdqqdZdW
gMlfFVccTGMGPMSCdcLLdqhjLJWWdZ
VfggggPVltVSlSlHfgFtTpfRGmRrrrvQpQsrGmnvnQbzmz
HjtMgWbHBtbtcggVcHwMwcdzpZFGzGZFpvFFZZWnnpFG
RNNrfmSrSSzdGBzFfJFq
mNsSrrTPPRshmsBClRClPmSccVgQVHjHwtHwTMbTVwMHgg
pZmmLpQLDJBCPCssJTsCTc
SwlLwWvSwNSSSMSMfWLvvVdPFzjfTscdjcCsjzCPddFc
vbVMqGbLSVMhDQnRRQnBqH
lNmNwlmlbhhfFNgpJLnHfTHfTdnTML
BGvCwVGVPSDWDMMJTHZMpndH
rVcBrPSPCwWqPwGCBCSrqlNNQFhsQhtlhhhgNQtb
HqZCQRQgWjpmZHRHqQjttGGJQNQtwQGGGbGrJz
SlddfFVMLncbJJMzMzzMwD
ndSznsdVHsqgpZvH
sNStMtNtDztrvrRGPRRRRrNzqcchgJJLqnBScBcJThJggJBT
QCWWZbCbCVjVbFVFbVwbnhqLqhghBLwwTqJJcpgTBL
ZlHjfHHFWFjCdbHlQFnfdnZFMzPzrrlMrtrrGRMsDPrGvGPz
NnDHhNNldhNTdHllpptCRtftzmGBGmVRVGRH
wgZgZJLBwqgLSWrBvZVVzmffWzRmGsGmmssm
bgqPBBLbPbrrZBjjlpjccjDdDchFTNlc
WRWNNRWNfLZtsmtSWrtLmWgTcMcPrpMTcVMMPPBBqjcg
QJJDFbpnpJdlcwcgBTqlgPwc
GJFHJGhHnpWWShpsRS
DHDZvDQWdHJMHlJf
RhhnGLnBtGrnLjwwJTTMTdQccllSMQ
rmFrrBGQLQFLjbFnBhQLhrRGCPVDWzgmpsWvWWDzppWpzCvC
bsrJrWgWJvQRqbbRDNGGZDlwNfNfwS
ttCHThhhcBVpTBcdhdpfNGDSQLwDLfDGfQllCG
jFjzcFhzQTTjHFvJsrPPnnFgPb
SZggDgNLGCQzSgRsljscPvPPbHsBNc
TtFfTpMthzhFFTpdMMJPfjPPWjBbHbjPlPPBjj
dpdttMMTJttzMFhqFwGLgGRSrrQGSZrwRrDQ
JsJntWmghjgJTpfgFCczlztzrDZDtDzC
QddBBdBSPPPHBSVHVHvNdPVRClvlcclCDLCLFRFrrDLcZc
NVwBVSNlSBNHngnngsJWhwWh
hQVWJGWJlJQDGJHQWHpVWJVHmfPGPcjfdLdLSrcCmfjPjCPm
wgwnRwMvNvBvFZMngNvFZCjdSSfcbPLjCbcdCbSf
wgnRvMMvjMsTwngTgnnDVDWJDplHWhlhQWlWDT
WGswWFGsBFwHvjnbnnJjbG
gLDrSrPpLfmmDqqbbJZsjvmvRv
DTldTpTsDLgSsLpfPTslVdVVdNWVzcNwtWdWhzVt
sttWrhWZsLVtJVZrWhgbCPQQbDNVCHglnnlN
vvRRRMqpmTjwFqmfjFjmBMwNbCwQNgHgDnbNnHQHQCDg
THpvmBGfzWGzSzzS
nmZwwfPmNggwgPgNmdvPPhTRHTHBJTsvSP
WDccMzVQzGWcrllLdsGTvTsJJBLTdL
pWtzQrzDlrCpcQztlzCCCpCVFFFwtgmfbjmbqwZjZfmFwfdw
bmMNNMVSRWBWCSmVRdMRmMnvZZscvvszGcnZClpcGsvZ
gfLfDDtDgjgDtWTjFQjHsvvpZqqplfvvcllcnnvG
TFPjDtWPNPwBBBNB
QcTCHcTwdpQgcWzWwvMPRzSGwW
sDNjfhVmnlVffmLNfLbMPPDbqGtMSRWtDMtP
fZjJJshhhLNnrCJScHSccTQQ
qfhBhLLjvMqWWBWjsQGrdrGzpszpGrqd
JTSDHFtlTDbHTcFcDbTHzmrNRdRRbNzrmRRnRpnQ
PHcltTgJDlplgptScCfCgWMVfvfZvhMMBV
rttDPglHZZDDDPHgZtgWBswdsTfpfdplLqfsFfFdfd
cRVvpcmpmRSCGGCcMQmQFqNNqdVdqTbLwNbdFfFs
zhGjRhSvcMtnrpZjHZBg
STNrrzVdTJwsBggwFgBN
WbtMWJJpwpDsLBfP
cbvncCCmWtCGMcZHVVSlJVQrzvzVqQ
MtPVBHVbBBTwbvWgRgvF
LhZjZpnnMRwWfhSh
LQcQCLCCCcnmnqZpcrpnrjQlsBMHddtMGGzrJHPPsHsNPPJz
NbZtmZDmNNDBHBhDNtNGcvpmgLmmFrvprgrFGv
djMjffMdqnVVTdMfTPnQSFScFFVSLLFrvccvcllL
PPdPwMQwTMWDwBDZLHZN
DqpJFdhtmdSwpqSncljHsnfjqlbzlc
rQVZLGMWPCNrCGMwNVMcbzsVgfHHgfncfscssH
NBCrPLwMTrrMBLQLwCFhpFBDFdFFtdvDFvpD
QRwGBdGwqRTBMWRMMzBqQHHhngspPFFbHbzgbhZLLP
rCNmDjvrCFpvLZsgPb
lDrmpcfCtVDtCjlfNfQQqVdJBQWRVVRMMMJQ
zcgjlRcJCFtlnTvppn
BLSHDMVPVPHVHwFwMhTvgnFZMh
DsLSDdmPVNVdGgrzCCdbjc
tjjRbNQtvJVVsvqsvdTsGqBp
wlFLPZPzzzrzwZPmZfZPlrmpLDCpWDWCSTCpppDDBssdWG
rwwcFFghFmgTcNRJNnnNJtHV
RLhbzMhccqLzdjghdFddNWPN
DmsTZfvrfJLPPWwrdFgw
LsmDtQDfLLGbGQbSzcpM
qwhmmHlHmlwChcCWlpPCBzjPVdBzLsdLBVsT
DnJDMqRDsPsjRVQR
tSGSnNNSbrJJGfDSSfbchpvptFwmpcvlHqZlcF
rdQdBRPrQBBnfdBbzLLgLgmbzSLCPW
TcRTcFDTcjvswMWzzgLSzwwSLJbL
MNTRMNGTsFMMqqqcMDTTnfpBhQhNpHZBZHBfrptQ
ZZFwcQGwRGLTGLTl
rJtMrqBVvhBCnlCn
WWWMttbqqzfPWqWJVzmDQwFQlwZwjQfjgFcZ
RhgmdBbLLmRvhGZwhZZJDwGq
ldPpTtTPtVPpfTGzJQFGFqJsFG
MPpCnrlCVfPtrPVtntllnbdHSbnBvvgdgHgnWvSv
nbnfjQbQZBqBvjQdVFGHhsQhsFsFzGpD
RSJSTTcCVTTMlSNcSTRRwTccpwDFDDzFhHhtwppssFGGpsDp
clcTNJlLMgrcgRvBjfWVfWfBrrZn
LHQdpQLQDRcDBQccVQpnNRhllzMtRqzRztTNnt
mrvZPZvZvZbPSFJrSrggFvrJzbhlzttTlNtqtsMtTntntdqq
GPfJPJwfZFrmFvrPmgHHQLQWdHQBwWWCHVVC
TvTTLfflhZmwZLvtJmhdFhMpnWrpnbJcWMnpHzMrzbcn
VqRRNGCBjRmqPGqDzbHMcMccWnzngHnP
jNqNBjsDsDRCNVsmBRNQNRSSSddhZvLhddZhvhwvLTZwhSfT
vjpJvpgpNwjDWvvJLhFLLhNRTmPTRPRF
HHbHVrMHMmqzHlGmtGqMtdLCLQthQQPCSPTSFLLPRT
bZZzbHszMrqzGmrHMBzbHbqJjffcDgwWjDJpnjjcscwgnw
fBHDMNhhHMrBDBrfQqfwwvvLvfjLZZ
lmppmGJgPPpddJVdnwsQjLttqtjZTpcsvT
RndRmlGWJgdRnWQJQgWdQPlFFbhhbFbHbHMhhBbRDRFrrS
tVhwlMdMWlhlZMZMlzWrtRpBNpLPpmnmCPQBLppPPPBz
GvGTsgjcTLRQHmTQ
gGRGbfbgbcSbbcRggvfcwlZVhVMfltddVtrlZdhW
PwjPHwWssqrHqCqprpCPjwrrQnnDbdnQnGQHnbZbGQZbBQdD
WvNtLhfLndnBNbJJ
fvhvvWfTmtzTmjpsVVqsPzMjjq
GjHMMTMfZbnqHnJNCN
rlpQpthdlQbnlJqRzqVL
spphwcpBvcvdvFTqPDFfwwPZTG
mQfqmtpfBHJCHdlMDB
cbbPPsZqjqcSvVsCrDllsrdzrzzD
TSbVTvShqnVjPTPbggSPbNFQWGtfNLtFfWgGmGgGWR
HJtwgJJwJrcjRRjRnwhVdrVbmGhPmNNrGhdV
fWFvTDssTDMCBCWsvszWWMCQhZhLLNvNNbhVGGZdRZRdmhmd
zCTBzWzDDCDCfFCRqCJHcJJctjJSgHpqHqJg
dgnwgbcwVGbgDWnQbjdgDnBRBBNNqRLBNMLFRMRlqNsc
fTZHmTmzJMmSSCZChZvZTHRlBNBFqtqftlqssqNqftts
JTHJvhzCHpmPCSSTzPpPzJHgQVdQQjQdQwjgdpgdDMGgQM
qPGmWLJWBRRdvqvvNq
TnZHsTZsZsZZbDtbrNrdnDft
SShhQQZCHQCSTVlllVVQCjQWNJGFWpWgFpmmVmNgLgFpGw
TsSmttWMVstNfbMfBcpnFchFwFwZNrrwFp
DWWCGlHWdhddwpcrjh
gQvPqglRCHCHCPCPCJbbtSVVWtTVVJvTbs
ddHSZQHDStZStLtsdDpbCbBPcjGGCqCMBGdNPb
hWhvmglVznzglgzvzfznwfnfscswPjbMBMjNGBMPGMcjcPwP
sJWsJfVflWsnhrltrZLFDDRRFTSSLT
qqCqLNjnPPLZPjqnDjLNgnNrcGwtgddGrhprBJhhJtBGJG
lTMDsDHmlRRbQQbVfMHFmMBJhwcTddrcpBBGdGGJcJdB
lHFfQFssFFFMQRVWQVlssLnDSLLPvZZPqWCLWSqjvS
pJPZRpQtpPQpGPqWbqlWTdLVLJbT
nnnjCwgrgcCFBfnggBCsMTVbVsWVWdCTTdbb
cfhcnwnrcggrncrwcjBDcGHmNPRRGRZZQRRdDZzmzH
NqTrrzLpTNdLLJBBcBGGZGpFHB
sWbgfHSfSgVgZcmGtStZwBFG
VjQjjPjhbbfsCbbDQCgsDrRhzMdlNzHTRdRhqdNTrq
GlqfPdvdBqPgfqDgFMsMVDppbsNJNpMs
WnmmWCTCjZnmzRjTZRRnFBMNpbZZpFJMSFSNFSbS
TRRrnLBmzjttRRCmTRjjwLlvdhQvdrhqqlGdPqGggPlQ
McjMPgPgGPHJWjhPNgPqQbpQSfqffnWVnnnpnZ
BwwDmBTLRBBLzBTBTvtVqlfpqfbQqpqZbnQFlt
rDsDBsmvRTBRzCTZsTmCsCrLPgNcPHNhPccNHHrjMNrgdNdP
GqmLFDrcglvQGZwwzj
nlHbSNBhhslJfsBfvdZHdCvRzdCzppzR
JWShMfWMMthSJBBthJsgtcTTcFqcTrmTLrrTlr
CsBsShBWsBWhvFJWCSsJpbTZdTbdBRgHffRlHHHBgH
tqmnwwwDmVwfzZblzTRqzQ
DGtDjGMcntMGnnGhhjJJJsCpFRRSJJ
GQVVcGgFGcSFvfcFfJVnQmdbTwMLwTTnbnQMws
ZqZrDWDtNPPHRNPzGCdndLLMLwMWhwbmLddn
DRqRHCHlCtDrqtNqDplfpvGFjVjvBSFFcj
zfSfdGPdMVHHdcMThhpwqqrwrqJhcF
vlDNTWDDWWnngNQZtgwLrJZqLFZLFJpFJjJJ
NCtWmnvBmDnWQVTmTGSRmmRTPz
LLvppVLDsppGMGCLCCwNmJMNrNHrNmNNmHFjrh
lZZfvfgRPZQWNNmlWlFNHl
nnRtndRbcPttvTpswLTs
trtzWfszNPlhPlgrWglhZjSLDBvTfSDTmSvmLvfS
QMdVVGBQMTJDvSjdHJ
nBppGVVnQQgzgPsPzzhp
fVQzVrQVtVzHwjtMTjcTCjFgcDCGCd
JslDPWLbLbZlJBMgBTBPdcFTFd
JNJmZsDLnLDWmsVqSrHqnHqQwQSq
mLMZRMRmZLmHLLjNshrrJjRsNNsj
PnqnBVBPcpWrWfWzDhDsHW
qpBQgcQncqpBcVgtclHqcSMTLZZQvLLZdLdwCmLMSd
PZgMwZMjPgBCWgZFgmBGSTtwcccztTzbnGDcNT
vJLlvvlfdsVVslVHrrpLfRlDcSScmbSnnRGDnbDTSbSSDt
fvVHdLfLQljmmqqMQPhQ
DZRstNGrDWGRMlzLHLMpNSpp
bPgCrCvgnrCPgwplbMSjfHzHfj
CgnFnBVrFFVmdVggmPPVTTcZBGhRqGtcZqqJhGRGssWs
WrrCGrDlWhBBZtHB
ggdcnQpcPRSpzfvJBTfPJvtP
gSNnSBFnSMBNjpMssDmCrrGmCLqq
szZGZGGwNdVtpwvbzptzVBQQLFclTJQFlHJNcFBRRJ
CTrqSfWThWDjJCcLQRRRFLlQ
rggqfMqPWnDqnVbZvTtPZpssVw
GJHqPPcJnhthNHnL
rzzlVDVTQDzSSdsSlzpBspssLhmZNjhZWjjffWBLZhgBmnjt
TSTQTsnTbDsMvCGwcFvbJR
PPjtzdnCnSjSthPjWJgJWjgMNBsNrT
bZHfLLhvhpbfvLhHfQbqpNJTWWNsqNTrTNrgWN
ZFbZZFvlRvZwhQwLDSdGnmCGmnlmdznD
RFRRhzzsRsszRlhbrhgBcbTfHgBT
pJtNmSgwZNtSJLgSqHcbBDDTHPfrSqTc
ZNWdpNCJtLZpQJLLpmLtZNFGjVgFnsngRGllVsjjCnvs
sJVRJmmmwwlmzcszMzjRjJVzspCZBsZTTFpTTZvSZTFBFbtZ
GhNDgNWnGGqDvFSCZvbtFpvg
fWrCNNffGnhWdrPhWjwjzRlJmcjRcPzlmV
FdncmqmgcZztLWFvFFvjWLlT
RsMMJVpfhJVsDVMfJpvlTWTvhjQSQvCbLCSC
jDBjRrsVfNJgzdZrZwtmZt
THDDQLZTGQQLQDSSTBCZSZHfFrvvlVRRlPVFfVrvqnvnnH
VbWWcgbNpjgPrRvrNfqnzv
swggwpJWwsWscJsDSLTJTmSVZJTBDZ
wGsznPGGBHdzHhtHDD
WMVSWqVmrSBMpvWVMFtdClhDtqDDHhdtQt
RgWVRcmgnPPnjJBg
BmfPBHBFswLLjQQnLCnzzW
SRdvvRSGrdlRSvTgRrMVCjVWCZzMnVZhWzTj
vlSRJrRJvbGGrSSJgWvlScptFmwbmfHHBfsNFmBbfsFm

%% 2022\day03\test.txt
vJrwpWtwJgWrhcsFMMfFFhFp
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
PmmdzqPrVvPwwTWBwg
wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
ttgJtRGJQctTZtZT
CrZsJsPPZsGzwwsLwLmpwMDw

%% 2022\day04\day04_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{
    stdin.byLine.map!((x){
        int[4] a;
        x.formattedRead("%d-%d,%d-%d", a[0], a[1], a[2], a[3]);
        return a;
    }).count!(a => (a[0] >= a[2] && a[1] <= a[3]) || (a[2] >= a[0] && a[3] <= a[1]))
      .writeln;
}

%% 2022\day04\day04_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{
    stdin.byLine.map!((x){
        int[4] a;
        x.formattedRead("%d-%d,%d-%d", a[0], a[1], a[2], a[3]);
        return a;
    }).count!(a => (a[2] <= a[0] && a[3] >= a[0]) || (a[2] > a[0] && a[2] <= a[1]))
      .writeln;
}

%% 2022\day04\in.txt
18-20,19-21
9-86,9-87
7-8,8-18
82-98,98-99
17-17,17-77
13-21,20-79
46-52,45-46
34-54,37-53
4-91,3-5
9-80,5-83
66-83,67-83
1-5,1-1
24-27,23-23
3-91,5-90
20-81,19-20
93-99,15-94
1-86,1-87
95-99,16-96
5-94,93-94
93-95,61-94
2-87,2-86
11-97,11-96
2-49,50-78
54-59,2-55
7-96,8-97
28-29,29-93
8-86,8-55
38-54,38-64
97-97,44-96
20-88,21-89
57-80,58-80
34-39,32-35
7-73,8-73
40-62,39-62
50-52,51-51
25-79,24-26
13-84,12-85
47-83,47-84
49-77,76-77
11-53,30-52
85-86,86-86
61-78,46-79
19-52,20-92
10-66,65-66
90-92,13-91
49-88,87-88
44-79,45-80
34-57,34-58
68-70,52-69
2-5,6-85
19-74,18-75
12-99,12-96
95-95,45-96
27-74,23-26
86-90,88-88
39-96,40-97
42-49,43-55
23-42,5-75
3-86,1-93
3-24,25-36
76-80,8-76
26-38,25-97
27-39,16-38
33-77,34-77
64-81,13-63
3-4,4-98
52-80,42-51
90-91,16-96
16-56,45-47
30-99,1-31
51-96,10-51
44-82,44-81
3-53,2-64
51-71,19-67
5-80,80-96
59-61,60-98
84-84,77-85
23-78,22-78
43-84,14-82
67-92,66-68
10-98,23-96
33-57,33-41
20-72,19-71
33-98,21-34
32-55,55-97
7-88,5-96
28-76,3-28
13-39,12-38
19-26,30-71
24-99,83-83
90-96,66-76
5-10,11-96
10-92,15-90
25-89,39-90
13-97,12-97
3-97,98-99
4-6,5-97
15-33,32-33
4-42,10-71
22-93,92-94
22-84,7-16
29-34,26-35
11-66,11-85
6-38,1-7
47-93,5-92
2-97,97-99
6-55,54-86
24-90,89-90
10-79,10-57
58-59,59-60
44-55,45-56
4-88,4-87
99-99,2-96
4-40,41-66
86-92,15-85
50-82,81-92
4-77,5-78
2-98,97-98
4-34,35-35
12-52,22-36
46-47,46-47
17-89,14-97
52-66,65-66
43-51,51-88
26-68,27-68
67-99,3-66
38-92,93-95
94-94,6-70
7-93,29-95
3-88,1-4
82-83,68-83
45-74,31-74
2-95,37-94
26-93,69-88
81-82,74-82
1-35,36-64
3-70,4-70
84-90,83-89
48-65,23-48
32-76,31-76
30-86,31-85
3-6,1-3
49-80,49-79
47-88,48-88
2-13,3-14
41-73,40-74
67-92,67-88
10-85,9-85
14-87,13-87
15-23,15-24
35-56,57-73
48-78,47-85
13-99,6-13
7-9,7-12
3-85,13-51
17-42,18-43
24-68,23-47
18-71,17-71
5-33,4-4
21-22,22-96
16-83,82-97
1-15,14-16
2-2,2-2
4-50,3-4
73-97,73-98
4-95,4-59
18-62,18-99
74-80,73-80
2-62,3-43
3-75,1-18
72-74,21-73
6-98,6-99
3-98,1-3
7-73,6-74
7-77,6-77
10-69,10-34
21-92,20-93
54-60,99-99
9-83,1-3
16-17,17-59
5-81,3-96
39-81,40-81
57-87,3-86
42-95,94-95
53-60,51-61
25-25,23-24
12-66,11-67
27-54,27-88
14-30,30-92
41-48,40-48
27-58,42-59
2-12,13-46
53-54,18-53
59-61,60-60
21-80,2-84
2-37,36-87
14-85,13-86
9-38,8-8
83-97,99-99
3-90,94-98
17-97,16-16
15-18,16-19
13-90,13-89
60-91,60-91
47-85,86-91
65-72,4-66
4-44,45-82
97-98,9-98
18-97,18-47
24-49,14-64
38-85,37-97
40-90,35-56
23-91,6-99
19-97,29-97
9-90,8-89
96-98,44-81
48-59,37-59
60-75,26-59
30-99,30-79
13-45,12-12
9-24,25-94
30-61,16-51
56-97,56-80
1-55,4-93
3-99,12-94
32-74,32-32
31-35,20-34
61-90,61-88
20-57,56-91
1-93,5-92
1-94,1-95
8-93,3-7
10-12,13-55
15-30,31-85
81-84,82-85
59-75,58-75
6-78,77-79
17-26,17-35
34-67,66-67
47-53,54-54
22-98,23-98
74-89,51-80
47-59,45-47
95-96,11-96
1-47,1-37
86-87,87-87
32-32,32-33
77-84,55-98
85-85,12-85
39-79,39-78
61-88,11-61
58-59,59-91
82-90,5-90
2-99,1-99
17-96,64-96
31-89,88-90
81-83,6-82
52-80,27-51
59-68,60-67
67-69,68-91
17-87,18-87
22-99,11-92
3-98,4-98
76-94,95-96
63-99,64-72
14-19,19-22
67-68,67-69
29-97,29-98
2-51,1-3
3-83,1-86
3-64,4-39
6-53,52-98
67-69,22-69
84-88,5-87
23-28,28-82
21-96,12-98
24-91,90-95
19-94,2-98
29-91,30-86
15-98,14-99
12-47,20-66
11-86,12-87
66-90,39-66
77-94,65-94
63-81,64-81
5-67,6-82
47-49,44-48
52-93,94-94
53-86,25-87
27-27,17-72
26-94,40-77
27-27,12-26
17-90,18-91
33-78,77-79
79-97,96-99
67-68,52-68
5-63,1-6
20-34,10-35
54-81,82-82
28-99,29-98
9-89,91-94
6-94,5-94
37-40,19-41
52-77,14-77
35-45,48-99
21-66,53-65
30-33,29-29
12-72,3-84
62-84,19-58
34-54,81-83
20-98,21-93
7-72,19-93
88-90,12-89
2-48,2-23
4-94,3-93
38-58,14-39
85-86,53-86
10-78,1-11
30-30,31-60
38-91,32-82
83-85,82-84
40-82,82-83
24-29,19-74
24-70,25-69
56-69,56-71
32-84,26-85
3-98,97-99
11-90,10-89
48-75,49-75
17-95,18-45
31-79,72-74
4-4,5-89
76-91,57-77
9-80,88-89
61-91,60-91
35-86,35-85
56-66,57-67
58-69,55-58
65-90,43-66
47-72,46-48
7-14,5-6
92-97,36-90
11-49,11-64
32-44,43-45
18-74,19-75
68-82,31-56
62-90,59-91
21-93,93-98
13-18,17-61
7-94,7-8
7-10,10-71
1-92,2-92
9-12,15-70
31-56,14-49
14-93,15-90
56-79,6-57
7-96,6-28
13-96,8-45
24-44,43-44
13-77,68-77
28-96,28-97
15-96,92-94
7-43,7-42
23-40,23-26
58-96,59-96
76-76,75-96
30-56,29-31
80-97,79-96
21-49,21-48
3-75,23-75
4-6,7-96
56-91,7-55
2-14,15-70
35-62,27-34
64-93,63-63
10-10,11-18
1-69,1-70
97-98,1-98
50-92,31-91
12-12,13-59
89-92,14-90
14-15,14-15
81-85,4-99
20-84,13-89
19-32,32-72
35-39,37-40
32-64,33-64
39-67,68-75
47-55,46-48
36-67,35-67
4-20,3-19
33-70,52-69
1-98,3-96
17-74,16-74
83-98,84-97
12-36,12-29
68-84,1-17
15-63,14-63
55-56,13-63
9-62,61-63
11-36,5-12
23-81,4-85
18-78,77-78
4-95,3-97
42-75,42-64
7-97,5-7
17-90,16-16
6-85,2-88
13-14,14-96
52-61,53-62
38-42,34-43
30-31,23-32
7-95,6-94
94-95,49-65
18-97,17-96
7-87,8-88
33-33,34-54
56-68,55-78
11-46,10-46
3-96,2-95
69-69,63-70
67-83,84-84
45-74,37-75
1-3,4-41
7-98,8-99
9-31,10-32
64-65,65-79
28-30,12-29
2-70,69-71
2-94,4-29
84-89,16-83
4-33,5-48
52-91,52-95
43-48,17-47
56-58,57-60
12-92,8-13
68-97,39-69
31-33,36-78
1-95,96-96
47-55,48-55
98-98,2-99
8-76,75-77
9-43,5-25
15-73,57-73
28-42,28-40
16-19,13-20
15-28,29-29
12-74,65-73
55-93,3-93
51-76,56-61
37-77,61-76
9-94,9-24
24-49,49-76
29-33,28-66
43-53,33-54
47-95,35-95
60-73,61-74
48-85,47-47
48-68,18-48
18-81,18-92
4-97,3-5
15-16,15-29
5-9,8-91
77-87,16-76
23-99,22-98
3-64,63-99
5-86,91-93
5-80,1-85
6-54,6-46
42-90,47-80
43-45,44-79
9-66,10-67
88-89,6-89
44-71,45-72
21-86,85-86
59-59,60-91
17-95,18-99
49-93,45-49
36-86,37-81
30-73,73-81
42-46,38-56
16-96,15-95
3-30,4-35
18-93,18-94
14-23,13-45
25-68,7-24
36-55,28-90
17-17,18-98
3-91,3-91
36-66,35-66
1-77,2-77
54-70,21-93
26-73,26-64
15-26,27-96
31-48,48-82
22-64,21-64
74-99,54-73
24-26,25-67
24-24,25-88
25-25,26-63
24-81,80-87
17-19,11-18
19-88,87-88
4-7,6-93
54-71,72-72
61-89,64-76
96-98,36-97
50-64,64-69
66-93,97-99
8-83,9-84
5-96,6-96
3-62,4-69
74-94,52-95
23-57,5-28
9-93,10-93
18-29,17-29
67-85,16-31
13-89,4-13
36-75,15-36
70-96,2-97
20-29,28-93
25-79,24-79
25-92,17-93
21-23,22-70
33-74,34-75
90-90,69-91
39-95,38-95
5-11,4-11
35-36,36-94
11-78,10-90
56-85,57-86
26-39,38-41
2-99,3-99
66-68,11-67
39-85,81-81
2-3,2-60
20-32,20-31
30-78,5-79
14-74,7-82
38-40,39-78
53-55,54-67
9-38,8-38
3-99,2-99
6-12,11-73
96-96,91-95
30-32,25-32
80-81,4-81
6-48,7-48
11-54,2-12
35-71,56-86
41-65,40-66
58-90,58-91
53-87,25-87
2-57,27-56
5-65,4-66
8-51,7-51
84-98,18-28
47-99,47-47
64-71,70-78
93-99,57-93
70-72,1-71
67-68,96-97
31-61,51-52
27-79,27-79
50-77,51-78
3-36,35-89
90-91,18-91
59-96,35-93
14-58,13-13
4-4,5-83
10-33,10-21
34-97,34-52
13-99,98-99
15-78,72-79
7-51,4-35
31-46,31-47
41-59,41-60
1-27,15-17
50-83,63-97
16-48,47-48
8-70,69-99
61-85,61-78
3-87,2-3
9-88,9-88
19-21,8-29
15-94,20-88
1-83,1-84
31-32,32-49
2-5,4-27
20-72,68-71
63-64,50-63
4-97,13-93
3-68,88-96
4-98,3-97
20-20,21-34
12-95,43-83
32-33,33-71
17-83,82-83
31-36,25-32
72-78,12-73
70-81,69-69
41-44,43-65
82-82,18-81
6-90,1-6
6-11,6-11
45-45,17-44
10-87,9-9
48-60,47-60
28-73,28-73
2-9,9-95
41-98,97-99
2-89,88-90
1-93,2-93
76-92,66-75
1-70,26-70
5-5,6-98
24-82,49-61
10-25,13-26
13-22,17-21
98-99,48-96
1-83,3-99
18-37,35-39
4-99,15-99
72-73,5-73
7-99,8-99
1-1,2-32
39-89,39-88
33-34,7-34
76-79,74-79
4-48,4-47
6-96,16-93
1-90,90-91
2-99,54-86
37-84,38-83
5-5,6-99
39-92,91-92
71-73,19-72
33-99,33-93
10-16,15-88
9-22,9-48
11-38,18-37
7-85,82-82
7-33,6-33
13-43,14-44
16-43,15-15
11-69,22-43
10-94,10-93
1-33,27-99
25-44,32-42
78-94,50-96
23-85,27-87
31-90,91-91
50-52,51-52
2-54,20-52
64-82,65-82
8-90,8-89
34-88,35-89
34-73,14-78
22-25,26-76
74-77,66-76
85-89,25-85
9-47,8-47
29-93,28-92
15-17,11-16
82-85,2-81
66-77,10-74
3-46,6-25
17-48,17-49
93-98,94-99
86-86,39-85
15-97,33-98
22-63,21-22
36-81,37-82
53-66,51-54
87-94,10-88
32-79,31-79
15-67,66-67
10-85,7-86
25-37,25-93
4-89,2-3
35-76,35-86
3-95,1-3
6-99,5-57
46-50,49-70
19-56,19-89
38-75,52-76
13-48,12-47
18-96,4-18
2-95,1-96
2-95,94-99
32-41,31-42
48-58,20-78
57-86,16-70
15-15,16-61
98-99,6-97
35-93,34-92
57-57,58-87
2-61,2-97
7-96,59-96
27-84,27-91
30-98,29-97
90-92,90-91
3-70,3-71
37-69,36-38
35-51,45-52
22-66,1-22
4-90,2-3
67-77,68-90
11-70,7-11
70-78,55-69
96-97,4-97
11-97,12-98
48-55,47-54
20-82,20-51
44-45,45-57
27-88,27-68
98-99,13-99
40-84,40-91
3-69,1-73
51-69,49-50
4-53,2-2
4-11,11-23
2-99,4-97
50-50,49-49
64-94,53-95
2-90,5-16
14-96,53-97
8-76,6-46
35-84,12-36
5-97,96-96
58-65,3-89
11-91,32-86
27-89,26-26
3-85,84-84
37-52,51-91
45-56,44-56
21-22,22-84
3-31,31-55
52-89,88-90
67-84,85-85
31-75,76-76
69-78,77-78
22-84,71-95
32-36,32-36
4-92,91-93
4-99,2-4
87-88,59-88
42-88,41-41
43-54,20-54
48-49,22-49
30-63,29-44
11-93,10-10
61-87,14-61
92-94,4-93
94-98,32-94
41-69,40-63
77-78,32-78
7-25,7-24
94-95,2-93
18-79,34-65
47-88,89-94
29-73,96-96
22-58,58-98
9-95,94-98
43-66,66-89
11-70,11-70
9-79,10-80
22-33,12-58
42-73,42-74
1-87,2-87
2-20,3-75
14-61,15-62
17-18,9-18
8-95,9-96
94-95,7-95
9-79,89-91
2-98,48-55
1-3,3-43
25-73,25-90
1-77,1-77
13-97,12-96
97-98,33-83
55-80,24-80
84-93,59-89
8-56,7-55
17-94,93-95
54-90,54-89
62-63,24-61
66-67,66-67
37-41,42-62
13-94,12-94
8-73,8-82
14-53,39-53
49-60,24-46
24-91,13-23
84-97,2-96
19-85,20-86
27-79,11-45
17-48,18-49
23-86,16-87
61-61,40-60
2-86,1-86
24-73,38-72
14-93,79-89
81-99,62-82
23-56,57-74
42-89,54-90
60-62,7-61
4-80,8-79
3-71,4-70
3-3,4-72
6-44,6-81
26-97,97-98
8-41,41-42
1-99,1-98
26-93,76-93
90-91,16-90
60-78,59-93
57-59,87-97
18-25,25-40
19-97,21-82
79-87,20-88
41-89,40-89
25-80,28-55
4-81,3-92
15-88,15-59
46-79,51-83
52-71,70-95
6-97,6-98
15-91,92-92
22-96,96-97
61-86,85-86
75-94,74-97
67-73,72-86
5-88,6-89
2-70,12-66
13-15,14-30
2-92,1-1
75-97,75-97
55-63,50-63
39-81,76-78
62-86,30-96
44-99,61-86
7-66,7-59
31-47,13-30
40-88,87-89
6-95,96-96
4-89,4-91
8-99,7-99
11-93,10-55
56-58,57-73
1-85,86-86
52-60,52-87
2-98,3-98
1-92,3-26
3-5,4-23
1-99,2-99
15-67,42-96
65-65,62-67
21-21,9-20
54-64,28-53
24-84,51-85
32-95,3-96
4-84,2-97
1-87,1-87
6-88,5-88
48-79,47-62
5-97,4-4
22-46,21-23
4-67,11-47
28-29,29-68
3-68,1-3
6-94,4-4
26-43,26-88
3-46,4-53
88-90,39-89
77-96,50-78
19-83,98-98
4-26,1-82
10-83,82-83
1-2,3-82
22-22,8-21
35-51,34-85
1-99,98-98
20-45,14-21
2-74,1-75
1-5,5-21
14-98,14-99
7-91,9-92
16-51,6-55
27-63,13-63
86-86,54-87
31-96,16-96
25-98,98-99
4-92,4-93
51-81,50-82
18-86,40-85
37-59,25-66
80-97,59-81
2-99,85-98
54-86,55-85
11-39,11-37
11-13,12-62
65-91,98-98
22-38,37-45
8-32,9-32
61-84,83-85
27-72,11-72
90-94,12-90
9-97,9-68
3-95,4-95
73-73,58-74
13-16,12-14
71-89,45-72
44-72,44-73
56-58,57-71
47-53,43-52
50-60,10-49
6-19,20-67
49-88,69-87
48-60,21-70
98-98,85-97
18-18,19-30
50-82,81-82
7-63,8-63
79-96,78-95
4-96,1-1
79-80,1-80
20-78,19-81
26-85,26-27
15-24,15-24
2-80,3-81
5-74,4-4
2-2,3-92
1-87,7-84
84-85,34-85
18-96,18-19
50-52,51-89
82-82,48-82
17-54,18-58
82-96,3-97
20-66,67-94
7-83,8-83
2-2,3-67
2-97,96-99
57-69,70-71
70-83,69-83
37-96,39-42
51-99,50-99
18-90,19-90
76-99,75-88
15-52,6-14
3-94,62-95
60-81,59-59
11-26,11-51
8-92,7-92
31-80,79-81
92-93,3-93
14-35,2-13
31-85,84-85
32-91,32-90
31-61,30-61
18-20,19-48
19-60,20-20
73-97,26-85
31-84,85-85
13-80,12-80
2-83,83-98
13-58,14-57
53-86,22-86
8-76,7-9
28-61,29-62
5-99,4-5
96-98,2-97
4-95,94-94
1-58,6-93
33-62,4-63
18-48,8-14
11-85,86-99
36-58,36-59
48-75,49-96
11-92,91-93
67-77,66-67
13-83,73-82
43-61,60-77
68-90,67-68
89-90,90-90
27-95,26-26
31-31,11-36
9-97,11-95
75-86,76-86
19-19,20-64
99-99,7-97
69-69,69-70
9-99,8-99
83-91,10-92
22-22,21-21
41-67,40-42
2-8,7-61
47-63,46-68

%% 2022\day04\test.txt
2-4,6-8
2-3,4-5
5-7,7-9
2-8,3-7
6-6,4-6
2-6,4-8

%% 2022\day05\day05_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{
    auto input = stdin.byLineCopy.array.splitter("");
    auto stacks = input.front.array;
    input.popFront;
    auto instructions = input.front;
    int N = (stacks.front.length + 1) / 4;
    stacks.popBack;

    auto state = new char[][N];
    foreach (s; stacks.retro)
    {
        foreach (i, b; s[1..$].stride(4).enumerate)
        {
            if (b != ' ')
                state[i] ~= b;
        }
    }

    foreach (i; instructions)
    {
        int n, f, t;
        i.formattedRead("move %d from %d to %d", n, f, t);
        f--;
        t--;

        state[f][$ - n..$].reverse;
        state[t] ~= state[f][$ - n..$];
        state[f].length -= n;
    }

    state.map!(x => x[$-1]).writeln;
}

%% 2022\day05\day05_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{
    auto input = stdin.byLineCopy.array.splitter("");
    auto stacks = input.front.array;
    input.popFront;
    auto instructions = input.front;
    int N = (stacks.front.length + 1) / 4;
    stacks.popBack;

    auto state = new char[][N];
    foreach (s; stacks.retro)
    {
        foreach (i, b; s[1..$].stride(4).enumerate)
        {
            if (b != ' ')
                state[i] ~= b;
        }
    }

    foreach (i; instructions)
    {
        int n, f, t;
        i.formattedRead("move %d from %d to %d", n, f, t);
        f--;
        t--;

        state[t] ~= state[f][$ - n..$];
        state[f].length -= n;
    }

    state.map!(x => x[$-1]).writeln;
}

%% 2022\day05\in.txt
[Q]         [N]             [N]
[H]     [B] [D]             [S] [M]
[C]     [Q] [J]         [V] [Q] [D]
[T]     [S] [Z] [F]     [J] [J] [W]
[N] [G] [T] [S] [V]     [B] [C] [C]
[S] [B] [R] [W] [D] [J] [Q] [R] [Q]
[V] [D] [W] [G] [P] [W] [N] [T] [S]
[B] [W] [F] [L] [M] [F] [L] [G] [J]
 1   2   3   4   5   6   7   8   9

move 3 from 6 to 2
move 2 from 8 to 7
move 3 from 3 to 8
move 2 from 5 to 3
move 5 from 9 to 7
move 5 from 3 to 5
move 1 from 4 to 2
move 3 from 2 to 1
move 2 from 9 to 6
move 4 from 1 to 4
move 6 from 5 to 8
move 1 from 6 to 3
move 8 from 8 to 9
move 5 from 9 to 2
move 1 from 3 to 4
move 11 from 7 to 2
move 1 from 4 to 1
move 1 from 5 to 9
move 1 from 3 to 9
move 1 from 9 to 5
move 21 from 2 to 6
move 2 from 8 to 4
move 5 from 8 to 6
move 4 from 9 to 7
move 2 from 5 to 6
move 5 from 4 to 2
move 4 from 7 to 2
move 20 from 6 to 9
move 7 from 2 to 7
move 1 from 2 to 6
move 7 from 9 to 6
move 3 from 7 to 9
move 7 from 1 to 9
move 3 from 7 to 4
move 1 from 2 to 5
move 1 from 5 to 2
move 1 from 1 to 9
move 23 from 9 to 1
move 1 from 2 to 4
move 1 from 9 to 6
move 1 from 1 to 5
move 20 from 1 to 7
move 1 from 5 to 9
move 12 from 4 to 2
move 2 from 1 to 3
move 1 from 3 to 5
move 4 from 2 to 9
move 2 from 6 to 4
move 9 from 7 to 4
move 11 from 6 to 7
move 7 from 2 to 8
move 1 from 5 to 7
move 2 from 9 to 7
move 1 from 6 to 4
move 6 from 8 to 2
move 3 from 7 to 1
move 6 from 2 to 4
move 1 from 3 to 2
move 7 from 4 to 3
move 1 from 8 to 5
move 3 from 6 to 7
move 1 from 2 to 9
move 1 from 6 to 7
move 4 from 4 to 1
move 1 from 3 to 1
move 22 from 7 to 6
move 3 from 7 to 6
move 4 from 7 to 6
move 5 from 4 to 5
move 26 from 6 to 2
move 8 from 1 to 9
move 2 from 6 to 5
move 9 from 9 to 5
move 2 from 9 to 4
move 1 from 5 to 3
move 1 from 9 to 5
move 1 from 5 to 6
move 1 from 4 to 3
move 3 from 5 to 8
move 1 from 6 to 2
move 1 from 6 to 1
move 1 from 1 to 8
move 4 from 5 to 2
move 7 from 2 to 4
move 8 from 5 to 3
move 1 from 5 to 7
move 12 from 2 to 8
move 6 from 3 to 8
move 1 from 7 to 6
move 10 from 3 to 4
move 11 from 8 to 7
move 6 from 8 to 3
move 11 from 7 to 4
move 1 from 6 to 3
move 6 from 3 to 1
move 6 from 1 to 5
move 15 from 4 to 7
move 1 from 3 to 5
move 7 from 2 to 3
move 5 from 5 to 9
move 2 from 3 to 8
move 1 from 9 to 4
move 1 from 9 to 7
move 1 from 4 to 5
move 5 from 7 to 8
move 13 from 4 to 1
move 8 from 8 to 2
move 2 from 2 to 7
move 7 from 7 to 4
move 1 from 5 to 1
move 1 from 5 to 9
move 3 from 8 to 9
move 7 from 9 to 8
move 1 from 5 to 2
move 6 from 8 to 2
move 6 from 7 to 6
move 2 from 2 to 7
move 2 from 8 to 3
move 3 from 4 to 5
move 1 from 7 to 1
move 3 from 3 to 5
move 4 from 4 to 6
move 3 from 6 to 3
move 11 from 2 to 9
move 5 from 3 to 4
move 1 from 1 to 4
move 7 from 9 to 4
move 1 from 6 to 4
move 5 from 5 to 4
move 9 from 1 to 3
move 4 from 6 to 3
move 2 from 1 to 7
move 3 from 9 to 8
move 1 from 9 to 5
move 5 from 3 to 4
move 3 from 4 to 6
move 3 from 7 to 5
move 4 from 2 to 4
move 10 from 3 to 1
move 2 from 8 to 9
move 1 from 8 to 4
move 2 from 2 to 9
move 5 from 5 to 8
move 2 from 6 to 3
move 4 from 9 to 4
move 2 from 3 to 7
move 2 from 6 to 3
move 1 from 6 to 1
move 1 from 8 to 5
move 1 from 5 to 8
move 1 from 4 to 8
move 17 from 4 to 2
move 11 from 4 to 2
move 1 from 8 to 6
move 28 from 2 to 3
move 10 from 3 to 1
move 3 from 8 to 1
move 1 from 7 to 8
move 1 from 7 to 1
move 1 from 6 to 5
move 10 from 1 to 5
move 20 from 3 to 5
move 3 from 1 to 6
move 3 from 8 to 1
move 18 from 5 to 1
move 4 from 4 to 6
move 4 from 5 to 1
move 1 from 6 to 8
move 7 from 5 to 8
move 2 from 5 to 3
move 34 from 1 to 8
move 4 from 1 to 7
move 36 from 8 to 6
move 6 from 8 to 4
move 3 from 6 to 4
move 1 from 1 to 2
move 1 from 3 to 2
move 1 from 3 to 5
move 1 from 1 to 8
move 1 from 7 to 2
move 3 from 2 to 8
move 3 from 8 to 1
move 2 from 7 to 5
move 5 from 6 to 4
move 31 from 6 to 4
move 1 from 7 to 3
move 13 from 4 to 7
move 2 from 5 to 9
move 1 from 1 to 9
move 1 from 3 to 1
move 11 from 4 to 9
move 12 from 4 to 3
move 4 from 9 to 1
move 1 from 9 to 8
move 1 from 5 to 9
move 3 from 6 to 5
move 3 from 5 to 1
move 11 from 7 to 8
move 6 from 4 to 8
move 3 from 3 to 8
move 5 from 1 to 6
move 1 from 7 to 3
move 5 from 8 to 3
move 2 from 4 to 7
move 8 from 8 to 4
move 5 from 8 to 2
move 2 from 2 to 1
move 7 from 9 to 2
move 5 from 6 to 7
move 6 from 2 to 4
move 3 from 9 to 1
move 3 from 1 to 4
move 2 from 2 to 1
move 5 from 1 to 2
move 6 from 2 to 9
move 4 from 7 to 6
move 2 from 9 to 6
move 1 from 2 to 5
move 1 from 6 to 5
move 5 from 3 to 1
move 1 from 5 to 3
move 2 from 6 to 1
move 1 from 9 to 7
move 3 from 7 to 3
move 4 from 8 to 4
move 1 from 5 to 6
move 9 from 1 to 4
move 4 from 6 to 8
move 2 from 7 to 4
move 2 from 1 to 9
move 10 from 3 to 1
move 7 from 1 to 3
move 1 from 1 to 2
move 1 from 2 to 4
move 2 from 3 to 8
move 6 from 8 to 9
move 2 from 1 to 2
move 30 from 4 to 3
move 29 from 3 to 7
move 2 from 2 to 4
move 7 from 9 to 5
move 6 from 4 to 8
move 5 from 8 to 9
move 5 from 5 to 7
move 1 from 5 to 4
move 17 from 7 to 9
move 6 from 3 to 9
move 4 from 3 to 7
move 1 from 8 to 6
move 17 from 9 to 8
move 8 from 9 to 3
move 1 from 5 to 6
move 9 from 8 to 7
move 3 from 9 to 5
move 1 from 4 to 5
move 2 from 6 to 1
move 3 from 3 to 8
move 2 from 3 to 5
move 1 from 3 to 8
move 10 from 8 to 4
move 2 from 1 to 9
move 1 from 8 to 1
move 1 from 1 to 5
move 1 from 8 to 6
move 4 from 4 to 5
move 1 from 3 to 9
move 3 from 9 to 6
move 1 from 9 to 8
move 2 from 9 to 1
move 2 from 1 to 7
move 1 from 9 to 1
move 3 from 4 to 6
move 2 from 4 to 9
move 1 from 1 to 8
move 2 from 8 to 1
move 5 from 6 to 2
move 2 from 1 to 4
move 2 from 9 to 1
move 2 from 6 to 3
move 2 from 3 to 1
move 2 from 4 to 7
move 4 from 1 to 5
move 15 from 5 to 4
move 4 from 2 to 5
move 7 from 4 to 2
move 4 from 4 to 5
move 1 from 3 to 9
move 3 from 5 to 2
move 9 from 2 to 1
move 3 from 5 to 4
move 1 from 5 to 3
move 1 from 9 to 7
move 1 from 5 to 8
move 4 from 1 to 6
move 1 from 3 to 2
move 2 from 1 to 2
move 3 from 2 to 8
move 14 from 7 to 2
move 2 from 6 to 4
move 19 from 7 to 8
move 1 from 7 to 1
move 23 from 8 to 2
move 33 from 2 to 1
move 1 from 7 to 1
move 7 from 4 to 3
move 1 from 6 to 2
move 15 from 1 to 7
move 6 from 2 to 8
move 1 from 8 to 2
move 1 from 2 to 8
move 2 from 3 to 8
move 3 from 8 to 5
move 1 from 6 to 1
move 2 from 4 to 7
move 1 from 5 to 9
move 3 from 8 to 3
move 1 from 2 to 6
move 18 from 1 to 4
move 1 from 6 to 3
move 2 from 5 to 1
move 2 from 8 to 2
move 5 from 1 to 9
move 15 from 4 to 9
move 5 from 9 to 5
move 1 from 1 to 5
move 1 from 1 to 3
move 1 from 1 to 2
move 3 from 2 to 8
move 9 from 9 to 8
move 11 from 8 to 4
move 1 from 8 to 3
move 4 from 7 to 8
move 3 from 3 to 1
move 3 from 3 to 7
move 3 from 5 to 8
move 3 from 5 to 3
move 5 from 9 to 7
move 9 from 4 to 3
move 1 from 8 to 9
move 9 from 3 to 7
move 2 from 3 to 2
move 1 from 4 to 1
move 1 from 8 to 6
move 10 from 7 to 1
move 2 from 2 to 6
move 2 from 6 to 8
move 2 from 9 to 4
move 14 from 1 to 9
move 3 from 4 to 7
move 1 from 6 to 3
move 2 from 8 to 4
move 8 from 7 to 5
move 6 from 7 to 5
move 12 from 9 to 3
move 3 from 9 to 8
move 8 from 8 to 2
move 7 from 2 to 1
move 1 from 7 to 2
move 6 from 7 to 2
move 7 from 3 to 6
move 1 from 6 to 3
move 7 from 2 to 1
move 5 from 4 to 8
move 2 from 7 to 9
move 1 from 2 to 7
move 4 from 6 to 1
move 2 from 8 to 1
move 1 from 7 to 6
move 2 from 6 to 1
move 3 from 3 to 7
move 1 from 4 to 6
move 7 from 3 to 8
move 6 from 8 to 1
move 1 from 9 to 7
move 22 from 1 to 9
move 2 from 7 to 2
move 3 from 3 to 2
move 5 from 1 to 3
move 2 from 2 to 7
move 2 from 6 to 9
move 3 from 9 to 4
move 2 from 4 to 5
move 1 from 4 to 7
move 1 from 1 to 9
move 13 from 9 to 7
move 3 from 9 to 5
move 14 from 5 to 3
move 5 from 9 to 5
move 2 from 9 to 7
move 9 from 5 to 3
move 15 from 3 to 2
move 12 from 7 to 3
move 3 from 2 to 7
move 8 from 7 to 5
move 4 from 8 to 9
move 1 from 9 to 6
move 1 from 7 to 5
move 14 from 2 to 7
move 2 from 9 to 4
move 1 from 6 to 5
move 18 from 3 to 2
move 5 from 3 to 9
move 2 from 3 to 6
move 2 from 4 to 8
move 15 from 7 to 6
move 1 from 9 to 1
move 2 from 8 to 3
move 1 from 7 to 9
move 6 from 9 to 6
move 2 from 3 to 7
move 3 from 5 to 8
move 8 from 5 to 3
move 2 from 7 to 9
move 22 from 6 to 9
move 12 from 2 to 3
move 1 from 1 to 9
move 1 from 2 to 6
move 1 from 6 to 5
move 6 from 2 to 6
move 7 from 6 to 3
move 20 from 9 to 4
move 5 from 9 to 3
move 7 from 3 to 5
move 14 from 4 to 6
move 2 from 4 to 1
move 2 from 8 to 3
move 2 from 1 to 5
move 9 from 6 to 1
move 20 from 3 to 4
move 5 from 6 to 8
move 1 from 5 to 9
move 1 from 9 to 6
move 9 from 5 to 7
move 1 from 6 to 5
move 2 from 3 to 4
move 4 from 8 to 2
move 2 from 8 to 4
move 3 from 3 to 7
move 5 from 1 to 7
move 4 from 2 to 7
move 1 from 1 to 3
move 3 from 3 to 6
move 4 from 7 to 3
move 1 from 1 to 4
move 3 from 3 to 5
move 1 from 1 to 7
move 28 from 4 to 3
move 20 from 3 to 5
move 16 from 5 to 6
move 3 from 3 to 2
move 2 from 3 to 6
move 6 from 7 to 5
move 1 from 3 to 6
move 1 from 2 to 1
move 10 from 6 to 8
move 2 from 1 to 5
move 1 from 4 to 8
move 1 from 6 to 9
move 2 from 2 to 5
move 10 from 7 to 4
move 2 from 3 to 4
move 1 from 3 to 8
move 1 from 9 to 4
move 6 from 4 to 1
move 10 from 8 to 6
move 1 from 1 to 4
move 8 from 4 to 9
move 3 from 1 to 5
move 14 from 5 to 8
move 2 from 7 to 5
move 3 from 9 to 7
move 5 from 9 to 5
move 2 from 7 to 3
move 16 from 6 to 9
move 3 from 6 to 3
move 1 from 1 to 5
move 1 from 1 to 4
move 1 from 7 to 3
move 2 from 6 to 1
move 2 from 5 to 7
move 2 from 7 to 1
move 3 from 3 to 8
move 12 from 5 to 4
move 1 from 5 to 8
move 1 from 1 to 4
move 9 from 4 to 1
move 11 from 1 to 7
move 10 from 7 to 4
move 3 from 3 to 7
move 1 from 1 to 7
move 5 from 4 to 5
move 8 from 4 to 1
move 1 from 4 to 1
move 5 from 5 to 4
move 2 from 7 to 5
move 2 from 7 to 3
move 9 from 1 to 7
move 16 from 8 to 5
move 3 from 8 to 7
move 6 from 4 to 3
move 17 from 5 to 1
move 14 from 1 to 2
move 7 from 2 to 4
move 5 from 2 to 6

%% 2022\day05\test.txt
    [D]
[N] [C]
[Z] [M] [P]
 1   2   3

move 1 from 2 to 1
move 3 from 1 to 3
move 2 from 2 to 1
move 1 from 1 to 2

%% 2022\day06\day06_1.d
import std.stdio;
import std.conv;
import std.algorithm;
import std.range;
import std.string;

void main(string[] args)
{
    auto input = stdin.byLine.front;

    auto f = input.slide(4)
                  .enumerate
                  .find!(x => x[1].array.sort.uniq.walkLength == 4);

    writeln(f.front[0] + 4);
}

%% 2022\day06\day06_2.d
import std.stdio;
import std.conv;
import std.algorithm;
import std.range;
import std.string;

void main(string[] args)
{
    auto input = stdin.byLine.front;

    auto f = input.slide(14)
                  .enumerate
                  .find!(x => x[1].array.sort.uniq.walkLength == 14);

    writeln(f.front[0] + 14);
}

%% 2022\day06\gpt.d
import std.stdio;
import std.conv;
import std.algorithm;
import std.array;
import std.container;


int findMarker(string inputStr)
{
    ubyte[] lastFour;
    lastFour.length = 4;

    foreach (i, c; inputStr)
    {
        // shift the array by one element
        lastFour[0 .. 3] = lastFour[1 .. $];
        lastFour[3] = c.to!ubyte;

        // sort and eliminate adjacent duplicate characters
        auto sorted = sort(lastFour);
        auto uniqueChars = uniq(sorted);

        // check if the last four characters are all unique
        if (uniqueChars.array.length == 4)
            return i + 1;
    }

    return -1;
}

void main()
{
    string inputStr = "mjqjpqmgbljsphdztnvjfqwrcgsmlb";
    writeln(findMarker(inputStr));  // should print 7

    inputStr = "bvwbjplbgvbhsrlpgdmjqwftvncz";
    writeln(findMarker(inputStr));  // should print 5

    inputStr = "nppdvjthqldpwncqszvftbrmjlhg";
    writeln(findMarker(inputStr));  // should print 6

    inputStr = "nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg";
    writeln(findMarker(inputStr));  // should print 10

    inputStr = "zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw";
    writeln(findMarker(inputStr));  // should print 11
}

%% 2022\day06\in.txt
llqnqffqsqttfffbcfcbcbdcczccfssvwswrwddzlddpdhdwwlvlffjllnjjwjqwjjttwbwcwfccdmmnddgvvpwvvgsshnshsgglljfjzjpjfpfjpplddjcchdhvhlhvllvflfbllsdllgppwjjprjpjrrdwrdrggjvjppgbgttdppwhhcshsvvgpvggsllstsggdjdmjjrvjjszjsjbbsffjwjnwwzjjjvqvfftbffbpffndfdzfdfvdfdggmpmbbwgbgnnbtnnnhggdmdffrqrlrhrzzrmzzmbzzcdcwwzffsrrnfnvfnnvppwjjndjnndtdppgcppsmppljlpjjmlldlsltlglwgwcwnwvwddzrrllwjjnvjvwvppjssncnfcnfcfcczfccpjphjphjjjsgszzhthghjhrjrbrtrjrhrsrfftfzftfmmwmpmgghbggjrrsdswddtjjvnnrwrzrpzzlglwggrnrgrfftnffwwgllrqqzbqbbtltbbgdgpgphggspggplggmcmscsffzcfzzbggdrgrqgrrnlrnrbnnzsnnzcctvvnvwvnwnhhwpwtptllpflfcfttwtjjhwjhhbwhbbtppwhwvhvghvhphpwwcgwwhbbfvbffzpzlllrzlrrbnnrngrnrpnnsszbbqffpsffhfshfhzzqhhcgcgfggzmmdllthhrhnrrwggdqdsstccqllflmflfddjwjzjffvjjfgjgdgbdgdngnpgpnpffsnsjnnbbjdbjbtbmmbrrlbbqmqpqrprjjrbbvnbbzvvcwwlfwfggmhhdhsdhsdhshhqfhfrhhqlqttffpmmjzjqjggqzzdfzflfsllshhvjvfvbfvbbjljhhzrzqqszqzsqqswswbsbzszgzdgzzhjzhhvffhthvtthltthghzhvvjttczttlssvvgjjmsjstjjrfjjhbjbnjbjddqrddnbdnbnwbnbqbmqqgtgqtttcmmqbqrrgrrsrszssvpsvvjqjttjpjwwmwfwttczttgccwhcwwrzwzbwwqbqmqnmqqnfnmmmzdmzmpmssdpsslbbmgmbmlmnlldlccvzzlrzzqbqfqlflwlvlhhtrtcttgnnqhnqqtjjphjhwjhwhpwwvdvfddmndncnppcffhllfvfdfllhgslvtsqhtlfdflcjfmqbnctnfnwqrlqbzrcbvldrffcptsgslqcszqcfdvtpggvdqblwcgmdjqrpjdhtrmvrfrzznspqlfhnjsppbpjdggcwjwprpnlnntgfgmflctqphdmzfvpzzmbzmvrqdgchzmdvjdzmfsslpqvhpgznmpspjpdmlfwwjbbwqbfthghclldpmnsbcwlzswrsnfzbdzpcnrrpspdpfqhvmtfjlppqtphvzzqrwhzccnrgrtgfbfgtwvlwsmcvzmqmhsvztmmvpjzfwzgfwntbrsfthdgrcmgtdsvzcllmcshrlqldrvrnmdgbwttmhczvscrdvfgdvrhfvlghhsfbmrptbwmpnvtsrjlpjlbmmjzwwzbdtjlqqdczqgpzfjslccrcrblhplndblghchczbjjfzlsvvrqhvgdsncgpjhjlprhfhswwbmrnszqzhhlrbqpphvgtfsgmdpjwgcmqnvfdhrqmbspjpdrtdbqnbmbpgqwgmltqwrjprvsfjsmpldcqqbvmfhgzltzfvhlnfdqrphzzjrbdvnnjspvnlnnsdzvgqsqztndjpmnbqtwnpzmmfhsswwnnwwlbnpgbrhzchbnsrwwpprhntngsjzvssttqwfvjrdddtfpgtqqzcwljzmdjtgzdqjjvbqgdttdgvqvlfdsgcjhsmdmwrwdcqdflpfjbfzsvjrzrhhcnvcjblwcdvtbgfhfgcwrcjsrzcdrfwtvdqrghdtrjgdmhrfcsnwwwdpvjtpzdqfgrlmrqscjbfgdbgvflhvdjmnmslvsbcbgwplgqljmlzpgrfjwmvqfwmwrhnmdjhdwgjrngvccrbzmhcqthvvtdtmfqvfczhqbfgzgrmdtprznfzjtrcwqgztchtdmzmnwbfbnbttbvzsflcpsjshgphfdlvhdrcpsqnhjjggbnsqrfpwsdznzcwjbcswwndzbpdnfcbdrfgrmqzvtjttltbntznmqfsmqlgqvlqnrvgrnggslqhbplmgpzwlfzbvwdvrchsnhrnvgmzjdprvvspltcdzmdnlgtmrwnwpdndpdqjltcnmsggrvbprslqhfgmzqtppdpsjcmmbvfgmbpdnwdcgnssfgjhzhrjljdwhrzznscndgbscdmbbtbrnzbqzvcjgjgljbjlrrvdhjdllsnjzhwlmjslghrqplwjwssbzzpdzdfhhsqctlcddnfnnvbcwpdvzdcsgcqpctsjtdtnzpggpzsrrhfjtthqcqhtvwzltbdvdnbgwlppblwzjsqqbcpcrthhrhdnzhdnflqlvbzmcjfcrbmgdgqptfqfbmlfbblqdfmnwgvbdhmcmtmvtggqstjpwhvzjhbgpblmdrnggvrvphbglqgfcphmrgfmrwcdchtwfllqwsnbqttwdcvrwgzjfztmcffppqtmnwpgcrgwtjbdtjlmnpmvlzndljglzblwdrggqvbbfvqcbcbpqttrmqlcqnqvrfqsnlpmwlcgfwfcqpgmszfccbqtcqfwlwqrjjhrdbjqvdmfzjgncjqgqbthpgjgbfdvltbhpnbjqqwrsczrthfhmlzjjjgsjtsvgmwfsjngzfqdqzfhvwjrswvnqvsvvsjdbwlwdcsszdngmmhnnqsgvsrvpnndghrwgzztqczvhcrzdpqtrmrnfsfrlpdnbbtshfhplzqvdvzdvwhwsbpnbzlvcbgptdszjlcgfdzchjcsvhzdljvgpwstzwnssvhztcptnhslggnrschvfnmhcnjvldthtfpqzdvltfgnmtgvlrljhwqdzqfmfblstvfnpfcdsqslrqbztrbfzmsfjtjwhlzfnhrvpfqfqvtdllrvchmqphgljwcspgpwsdwqfdhsqhsflpbcbjjmjrfjrqrqfqcqzqsqcnqhfgsclfnfzblfdhphrvqdpvcqmllrcdnrlwqbrgqsbfqqllcvmglntjwcsjljgntmmldscndfdjcqpwbqpbmfjsgwfwcqbqbbhhgprlbzmvdfjcsmsqvhfhmgrhnwpslztmwbhdgrfzfcmwjswpbpzwstfbfmgwtprmptzjwtrqthrqwgslnmtlfgnvgpwvsfwthtrgwfbnnnwmdcfrpqqztplscvfnfpfwwdnfnzjccnhswwlcrrdqfhvsrnvcdrwmjswzggscplggbwgndsbntqvtrjbmbzrnbbmdjvwrmmtrmfjjhnvrcjcbqlhlthbvtjjczddblbbttmmzgdqmtdqswjdwbjhsrjbvdtqzqdbhhgbttgmgwfgfpczpqpfsddgslltwsvngwbwfbfcdzlqghwdbfzzldjpwpmpjmslwnwbrjjvwcsjgdzjwrrwnvgvrqlgjhwvrgnczspfplhfbtdpbpfqmhbvmcqdgrrjfslzgsqfpwrrrmjdtgbslddwvddrbmrdsdhhnlwsncrmnglrrpvtbrfvjbdmcpgphcdfwnfcglvmlbslttpmjnspqhnmbcqgmncfjjpdfjqhggnswbgppjhllscrvtmtmmbwbpgddtzblscntrmccdpzdnllqpvfdpfpwwvnnbjlzphvqwffwsjmbtllctrjmllwscmldcdrpfrzrqlpwbjwfgmnshzqzgdjqhcwtsqlsjffvzcpnrzmvtlzlgwvrrjtdbcnddbhjgqqzrvhplrbsrwgscjnfmhbcnpdcjqrltgdzzzzbqtsspbcdssbjrzfqdgvhmgdzsjdsqcfwbgrnhrlzgpjmhctqdccmvqzddmcptsjgtfshprqmslvtmtrprfsngrnnpnrccrvnrvcwzrbbnbghlwvcncgzglnqthchhsnzlfrcggdptvwlrbnfwgjpflgrcfzhhgffwcbhwlsdmvmsvvzvdcrlvlnstgz

%% 2022\day06\test.d
import std.stdio;
import std.conv;
import std.algorithm;
import std.range;
import std.string;

void main(string[] args)
{
    auto input = stdin.byLine.front;

    char[] arr;
    arr.length = 4;

    auto f = input.slide(4)
                  .map!(x => x.copy(arr));

    writeln(f);
}

%% 2022\day06\test1.txt
mjqjpqmgbljsphdztnvjfqwrcgsmlb

%% 2022\day06\test2.txt
bvwbjplbgvbhsrlpgdmjqwftvncz

%% 2022\day06\test3.txt
nppdvjthqldpwncqszvftbrmjlhg

%% 2022\day06\test4.txt
nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg

%% 2022\day06\test5.txt
zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw

%% 2022\day07\day07_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{
    int[string] dirs;
    string[] current_dir = ["/"];

    foreach (line; stdin.byLineCopy)
    {
        // handle cd
        if (line[0..4] == "$ cd")
        {
            auto target = line[5..$];
            if (target == "/")
                current_dir = ["/"];
            else if (target == "..")
                current_dir.popBack;
            else
                current_dir ~= target;
        }
        else if (line[0..4] == "$ ls" || line[0..3] == "dir")
        {
            continue;
        }
        else
        {
            auto size = line[0..line.countUntil(' ')].to!int;
            auto cd = current_dir.dup;

            while (cd.length > 0)
            {
                dirs.update(cd.join("/"),
                () => size,
                (ref int v) => v += size
                    );
                cd.popBack;
            }
        }
    }
    writeln(dirs.values.filter!(x => x <= 100_000).sum);
}

%% 2022\day07\day07_1.gpt.py
import re

class FileSystemNode:
  def __init__(self, name, size):
    self.name = name
    self.size = size
    self.children = []
    self.parent = None

  def __repr__(self):
    return f'{self.name} ({self.size}): {self.children}'

def create_file_system_tree(input):
  # Use a regular expression to match the commands and directory listings
  command_regex = re.compile(r'\$ (cd|ls) (.*)')
  listing_regex = re.compile(r'(\d+|dir) (.*)')

  # The tree will start with a single root node representing the outermost directory
  root = FileSystemNode('/', 0)

  # Keep track of the current directory while parsing the input
  current_dir = root

  for line in input:
    print (current_dir, line)
    # Try to match the line against the command regular expression
    match = command_regex.match(line)
    if match:
      # If the line is a command, update the current directory as appropriate
      command, arg = match.groups()
      if command == 'cd':
        if arg == '/':
          # If the argument is '/', change the current directory to the root node
          current_dir = root
        elif arg == '..':
          # If the argument is '..', move to the parent directory
          current_dir = current_dir.parent
        else:
          # If the argument is a directory name, change the current directory to
          # the first child node with that name
          for child in current_dir.children:
            if child.name == arg:
              current_dir = child
              break
    else:
      # If the line is not a command, try to match it against the listing regular
      # expression
      match = listing_regex.match(line)
      if match:
        # If the line is a listing, create a new node for each file or directory
        # in the listing
        size, name = match.groups()
        size = int(size) if size.isdigit() else 0
        node = FileSystemNode(name, size)
        node.parent = current_dir
        current_dir.children.append(node)

  # Return the root node of the tree
  return root

def get_directory_size(node):
  # Initialize the total size to the size of the current node
  total_size = node.size

  # Recursively call this function on each child node and add the result to the
  # total size
  for child in node.children:
    total_size += get_directory_size(child)

  # Return the total size
  return total_size

def solve(input):
  # Create a tree representing the file system
  root = create_file_system_tree(input)

  # Initialize the sum of the sizes of the directories with a total size of at
  # most 100000 to 0
  sum_of_sizes = 0

  # Recursively traverse the tree and calculate the size of each directory
  for child in root.children:
    size = get_directory_size(child)
    if size <= 100000:
      # If the size of the directory is at most 100000, add it to the sum of
      # sizes
      sum_of_sizes += size

  # Return the sum of the sizes of the directories with a total size of at most
  # 100000
  return sum_of_sizes

input = [  '$ cd /',  '$ ls',  '14848514 b.txt',  '8504156 c.dat',  'dir d',  '$ cd a',  '$ ls',  '29116 f',  '2557 g',  '62596 h.lst',  '$ cd e',  '$ ls',  '584 i',  '$ cd ..',  '$ cd ..',  '$ cd d',  '$ ls',  '4060174 j',  '8033020 d.log',  '5626152 d.ext',  '7214296 k']

result = solve(input)
print(result)  # Expected output: 95437

%% 2022\day07\day07_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{
    int[string] dirs;
    string[] current_dir = ["/"];

    foreach (line; stdin.byLineCopy)
    {
        // handle cd
        if (line[0..4] == "$ cd")
        {
            auto target = line[5..$];
            if (target == "/")
                current_dir = ["/"];
            else if (target == "..")
                current_dir.popBack;
            else
                current_dir ~= target;
        }
        else if (line[0..4] == "$ ls" || line[0..3] == "dir")
        {
            continue;
        }
        else
        {
            auto size = line[0..line.countUntil(' ')].to!int;
            auto cd = current_dir.dup;

            while (cd.length > 0)
            {
                dirs.update(cd.join("/"),
                () => size,
                (ref int v) => v += size
                    );
                cd.popBack;
            }
        }
    }
    auto limit = 70_000_000 - dirs["/"];
    limit = 30_000_000 - limit;

    writeln(dirs.values.filter!(x => x >= limit).minElement);
}

%% 2022\day07\in.txt
$ cd /
$ ls
dir bjrbjh
dir dppgvlh
dir fcfqp
dir mtbt
95962 mzvb
dir qtfmf
dir sfjrs
dir trtl
$ cd bjrbjh
$ ls
80731 ctprm.bpc
$ cd ..
$ cd dppgvlh
$ ls
180122 bbjw
210923 ctprm.bpc
304465 hhg
dir rtdnhb
$ cd rtdnhb
$ ls
295880 ctprm.bpc
$ cd ..
$ cd ..
$ cd fcfqp
$ ls
dir cts
dir gjzdf
61601 hqvhrpnv
27922 hqvhrpnv.sgf
dir hvsnr
191405 mzvb
263646 nbjp.fdm
dir qmsllmtw
dir rpvstz
dir vbhh
dir zwllwsq
$ cd cts
$ ls
47983 nhzpb
$ cd ..
$ cd gjzdf
$ ls
dir fcfqp
161310 vtrhs.mlh
$ cd fcfqp
$ ls
145412 vcbnl
$ cd ..
$ cd ..
$ cd hvsnr
$ ls
dir sftjlqbm
$ cd sftjlqbm
$ ls
96517 qlgp
$ cd ..
$ cd ..
$ cd qmsllmtw
$ ls
172998 hhg
$ cd ..
$ cd rpvstz
$ ls
dir nccm
dir tsstr
$ cd nccm
$ ls
181998 fcfqp
$ cd ..
$ cd tsstr
$ ls
258571 tsstr
$ cd ..
$ cd ..
$ cd vbhh
$ ls
317169 ctprm.bpc
dir rpvstz
dir scsclh
307868 vcbnl
118337 zbltwtj
$ cd rpvstz
$ ls
dir fcfqp
dir nzg
dir pmhprnbb
dir szshbn
$ cd fcfqp
$ ls
dir hrhftz
$ cd hrhftz
$ ls
163301 vlrjptvv.fsr
$ cd ..
$ cd ..
$ cd nzg
$ ls
230765 hhg
235220 ptg.dbs
dir qsbpc
220737 vtttmhf.dcl
$ cd qsbpc
$ ls
74559 hqvhrpnv.phh
322306 tqb.wnl
$ cd ..
$ cd ..
$ cd pmhprnbb
$ ls
293892 hhg
$ cd ..
$ cd szshbn
$ ls
303519 tsstr.pml
$ cd ..
$ cd ..
$ cd scsclh
$ ls
dir rdznzm
$ cd rdznzm
$ ls
dir hthgb
dir vgfhz
270085 zjlcp
$ cd hthgb
$ ls
2762 gjgczrpm.hlw
$ cd ..
$ cd vgfhz
$ ls
160621 svplfhqh.rfr
27592 vcbnl
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd zwllwsq
$ ls
dir bmgpnmbt
dir fbphbmbb
217873 hhg
dir hqvhrpnv
$ cd bmgpnmbt
$ ls
dir fcfqp
67327 hhg
175579 qrgrtg.gtn
185356 rdrtvn
$ cd fcfqp
$ ls
16285 wqtnzw.cvj
$ cd ..
$ cd ..
$ cd fbphbmbb
$ ls
dir fpnwjb
dir hqvhrpnv
dir jbm
dir jsfscjd
dir qmpbb
dir sjhrg
dir tsstr
79487 tsstr.czd
226172 tvdpb.vss
$ cd fpnwjb
$ ls
78102 pgv.snz
32886 wqtnzw.szw
$ cd ..
$ cd hqvhrpnv
$ ls
247435 ctprm.bpc
dir drpffn
dir fvqzjjhp
312573 hqvhrpnv
103964 swbvbwd
dir szdbbtw
129434 trjpn.htm
33772 vgjnhmbc.hcr
dir vvrhmrbs
$ cd drpffn
$ ls
204660 wdhl.dgs
$ cd ..
$ cd fvqzjjhp
$ ls
dir qtc
$ cd qtc
$ ls
74576 wgfffz
$ cd ..
$ cd ..
$ cd szdbbtw
$ ls
dir fcfqp
$ cd fcfqp
$ ls
56006 bthq.wlm
$ cd ..
$ cd ..
$ cd vvrhmrbs
$ ls
dir sqwfj
21051 vcbnl
$ cd sqwfj
$ ls
dir chjpwmb
170226 fcfqp.wrn
$ cd chjpwmb
$ ls
305407 ctprm.bpc
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd jbm
$ ls
138219 fcfqp
dir jwbrhmzj
67905 mbvpfmgs.lbq
125465 mzvb
dir tsstr
211711 vrqpss.qtr
$ cd jwbrhmzj
$ ls
22219 zqmldh.jwc
$ cd ..
$ cd tsstr
$ ls
141377 ctprm.bpc
28965 jhwr.tvf
dir rmbpb
$ cd rmbpb
$ ls
185176 mzvb
204877 vcbnl
$ cd ..
$ cd ..
$ cd ..
$ cd jsfscjd
$ ls
210670 jqwcrvg
263796 qcv.crz
23224 slcgw.hmz
dir tws
$ cd tws
$ ls
244925 dnrswnh
307737 vcbnl
$ cd ..
$ cd ..
$ cd qmpbb
$ ls
175766 fcfqp.pgc
155950 nnrgl.qtd
215226 rjjw
218856 rpvstz.cls
$ cd ..
$ cd sjhrg
$ ls
dir dbdc
dir jprmnvv
dir wbqrzrcd
$ cd dbdc
$ ls
159323 cqfmgtr.fpp
$ cd ..
$ cd jprmnvv
$ ls
314162 ctprm.bpc
$ cd ..
$ cd wbqrzrcd
$ ls
177804 mzvb
11757 wfmhd.srn
$ cd ..
$ cd ..
$ cd tsstr
$ ls
303871 hhg
311124 mzvb
$ cd ..
$ cd ..
$ cd hqvhrpnv
$ ls
75235 mzvb
$ cd ..
$ cd ..
$ cd ..
$ cd mtbt
$ ls
277478 bqvdgj.tdt
dir gtgdhl
100015 hnmvhb.dqb
dir hqvhrpnv
dir pdhn
dir ptmpqgj
dir qfdmhqhm
dir tsstr
178843 tsstr.crd
dir ttjltb
45660 vbqjdj.znj
204359 vch.zrz
$ cd gtgdhl
$ ls
305753 hsjc
$ cd ..
$ cd hqvhrpnv
$ ls
131065 cvt.pwb
dir dzrlrdc
dir fcfqp
175755 hqvhrpnv.gjg
313719 jjpnjhqz.wtf
3622 nhr.vtv
dir spz
$ cd dzrlrdc
$ ls
65797 wqtnzw.tpr
$ cd ..
$ cd fcfqp
$ ls
141146 hhg
$ cd ..
$ cd spz
$ ls
292906 gjgczrpm.hlw
202319 gjn.ptw
311120 vcbnl
93748 wqtnzw
$ cd ..
$ cd ..
$ cd pdhn
$ ls
dir rjgsq
$ cd rjgsq
$ ls
424 ctprm.bpc
$ cd ..
$ cd ..
$ cd ptmpqgj
$ ls
10127 mdnllcs
178992 npbr
dir rpvstz
dir wqtnzw
$ cd rpvstz
$ ls
248549 gjnpwldn.jsh
31443 nstp.jpj
$ cd ..
$ cd wqtnzw
$ ls
47276 mzvb
$ cd ..
$ cd ..
$ cd qfdmhqhm
$ ls
254322 wqtnzw.qrn
$ cd ..
$ cd tsstr
$ ls
265555 cqbs.thq
273707 ggnr
$ cd ..
$ cd ttjltb
$ ls
82810 cmln.qlj
23429 mzvb
$ cd ..
$ cd ..
$ cd qtfmf
$ ls
108080 hqvhrpnv
dir hrl
dir mnb
85284 qrfjg
dir rfghjdj
dir tsstr
dir wqtnzw
$ cd hrl
$ ls
dir dwgnv
dir lgn
dir qhcjcc
dir rpvstz
dir zrqf
$ cd dwgnv
$ ls
dir mrhvqqc
$ cd mrhvqqc
$ ls
113150 qbhmdfwg.wrt
$ cd ..
$ cd ..
$ cd lgn
$ ls
293311 gzzdwd.wnn
$ cd ..
$ cd qhcjcc
$ ls
298893 fcfqp
253573 lvb.brw
301515 ndbrjbw.ssq
236001 vmdgmm.gmh
124715 wqtnzw.cqd
$ cd ..
$ cd rpvstz
$ ls
dir hqvhrpnv
dir rpvstz
dir tbdnjbmr
$ cd hqvhrpnv
$ ls
271956 vrtgr.vdt
$ cd ..
$ cd rpvstz
$ ls
185836 cjcf.rwc
289321 vcbnl
$ cd ..
$ cd tbdnjbmr
$ ls
124297 ctprm.bpc
323010 hhg
$ cd ..
$ cd ..
$ cd zrqf
$ ls
dir fcfqp
dir vrp
$ cd fcfqp
$ ls
1896 cdfldlv.ptw
$ cd ..
$ cd vrp
$ ls
5610 fmmvbft.rjq
$ cd ..
$ cd ..
$ cd ..
$ cd mnb
$ ls
64404 ctprm.bpc
dir tsstr
$ cd tsstr
$ ls
172859 gjgczrpm.hlw
$ cd ..
$ cd ..
$ cd rfghjdj
$ ls
78613 cpfclgj.wqh
$ cd ..
$ cd tsstr
$ ls
dir cjdbwvn
135418 gjgczrpm.hlw
dir lsv
$ cd cjdbwvn
$ ls
dir hqvhrpnv
264636 wqtnzw.gcq
124125 zvpwlrbr.nnz
$ cd hqvhrpnv
$ ls
43899 tdzsmzw
$ cd ..
$ cd ..
$ cd lsv
$ ls
202987 hhg
251479 vcbnl
dir vdltrlzg
$ cd vdltrlzg
$ ls
dir nlchndbr
$ cd nlchndbr
$ ls
134010 vcbnl
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd wqtnzw
$ ls
dir hqvhrpnv
$ cd hqvhrpnv
$ ls
50703 ctprm.bpc
$ cd ..
$ cd ..
$ cd ..
$ cd sfjrs
$ ls
dir cgl
dir cjjls
184472 hhg
241700 pdswzfq.scs
dir rfwnnr
dir rpvstz
dir tsstr
$ cd cgl
$ ls
dir tdwn
$ cd tdwn
$ ls
119119 lzqfb.tgc
$ cd ..
$ cd ..
$ cd cjjls
$ ls
dir hgppstcv
$ cd hgppstcv
$ ls
223932 bvt
85898 hhg
195499 ppbrb.vtq
$ cd ..
$ cd ..
$ cd rfwnnr
$ ls
96712 gmzchms.wst
271527 mzvb
$ cd ..
$ cd rpvstz
$ ls
78920 cbj.mlh
$ cd ..
$ cd tsstr
$ ls
17373 bdlrvwv
50170 vcbnl
$ cd ..
$ cd ..
$ cd trtl
$ ls
dir dflwctzs
dir gsl
168166 hhg
dir jlfrcp
97874 mzvb
dir pfnlc
dir pjj
186837 qzlwgts
132833 tnb.mpv
dir vmjljc
$ cd dflwctzs
$ ls
6196 fcfqp.qcg
181057 mrjvtvl.hmm
$ cd ..
$ cd gsl
$ ls
dir gmlp
dir mjrs
dir rpvstz
91777 wqtnzw.hpl
$ cd gmlp
$ ls
167819 qmtmtppc
254187 sbn.chs
119156 tbhhgmz.vqs
31966 tptqzrqr.zgh
$ cd ..
$ cd mjrs
$ ls
167756 fcfqp.jgz
221559 tzj.rfb
$ cd ..
$ cd rpvstz
$ ls
93065 hhg
$ cd ..
$ cd ..
$ cd jlfrcp
$ ls
dir fcfqp
dir hmlmvqc
256413 mrtwp
141186 mzvb
106340 nvwfhv.rvt
dir pqmfswh
dir qghq
274275 qmmgnjh
dir trhs
dir tsstr
55881 wbtf
$ cd fcfqp
$ ls
265006 fcfqp.dtr
dir tdflqz
dir thjdsqmw
136055 vshqb
$ cd tdflqz
$ ls
dir dtvnrl
$ cd dtvnrl
$ ls
277524 mzvb
$ cd ..
$ cd ..
$ cd thjdsqmw
$ ls
dir chhf
dir hsnrrc
218719 qgt.sdb
dir tsstr
134210 twvn
dir wqtnzw
$ cd chhf
$ ls
6278 ctprm.bpc
$ cd ..
$ cd hsnrrc
$ ls
dir bphrpw
dir dmjvnrhz
dir rpvstz
dir wqtnzw
$ cd bphrpw
$ ls
dir brj
dir hqvhrpnv
dir rpvstz
$ cd brj
$ ls
13067 rpvstz.bqh
$ cd ..
$ cd hqvhrpnv
$ ls
148840 ctprm.bpc
dir fsvgbd
94116 hghq.gqm
$ cd fsvgbd
$ ls
222743 ctprm.bpc
80460 vwp.nnq
$ cd ..
$ cd ..
$ cd rpvstz
$ ls
287030 ctprm.bpc
145932 rhpt
$ cd ..
$ cd ..
$ cd dmjvnrhz
$ ls
dir mlh
$ cd mlh
$ ls
238301 tsstr.vfl
$ cd ..
$ cd ..
$ cd rpvstz
$ ls
59172 mcv
$ cd ..
$ cd wqtnzw
$ ls
50806 tlwnzqgb.dqq
$ cd ..
$ cd ..
$ cd tsstr
$ ls
dir rpvstz
$ cd rpvstz
$ ls
109284 mzvb
$ cd ..
$ cd ..
$ cd wqtnzw
$ ls
dir hwpdsfg
dir mrn
183742 rpvstz.pdq
$ cd hwpdsfg
$ ls
295333 vbbrvhqm.mvj
$ cd ..
$ cd mrn
$ ls
46589 mzvb
235773 pppwz
69304 rsrbq.qdl
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd hmlmvqc
$ ls
77344 ctprm.bpc
291828 hhg
226384 rpvstz.qfl
10758 tpmdrpg.hcj
$ cd ..
$ cd pqmfswh
$ ls
127361 bczcpjln.ffs
208033 ctprm.bpc
144048 hqvhrpnv.bzm
88561 pgf.ltz
149879 twj.drs
$ cd ..
$ cd qghq
$ ls
165758 hqvhrpnv.mqb
$ cd ..
$ cd trhs
$ ls
dir bnrqbrv
177929 rlnln.gcv
60631 rpvstz
dir snd
$ cd bnrqbrv
$ ls
150034 ltjjfp
$ cd ..
$ cd snd
$ ls
21614 hqvhrpnv
95241 wvtc
$ cd ..
$ cd ..
$ cd tsstr
$ ls
dir cdvgvc
dir mbmn
dir mprbjtnd
dir rvwqgn
8263 tsstr
dir tvtddch
$ cd cdvgvc
$ ls
dir gvssnh
121417 hqvhrpnv
180690 hqvhrpnv.dnl
dir nhrvzn
266104 psj.fdv
dir rpvstz
278434 rww.nbt
dir wqtnzw
$ cd gvssnh
$ ls
20979 fpqgb.nbl
$ cd ..
$ cd nhrvzn
$ ls
dir hqvhrpnv
dir nlv
$ cd hqvhrpnv
$ ls
202973 hhg
$ cd ..
$ cd nlv
$ ls
235158 hqvhrpnv
246378 hqvhrpnv.vmg
278166 rfzjcbpv.crc
$ cd ..
$ cd ..
$ cd rpvstz
$ ls
181642 tsstr.wjh
$ cd ..
$ cd wqtnzw
$ ls
dir pgnzftwn
$ cd pgnzftwn
$ ls
dir njtgddhw
217983 sqwmjb
149152 wqtnzw.pzv
$ cd njtgddhw
$ ls
75203 fvbr
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd mbmn
$ ls
82237 hhg
36010 hqvhrpnv.hcf
$ cd ..
$ cd mprbjtnd
$ ls
23927 gbrvbz.rgc
20857 hqvhrpnv
203364 zpbhr.svj
$ cd ..
$ cd rvwqgn
$ ls
291142 fcfqp.mdf
124256 gjgczrpm.hlw
235579 mzvb
$ cd ..
$ cd tvtddch
$ ls
317689 dshzl.plf
44518 vphnqd
$ cd ..
$ cd ..
$ cd ..
$ cd pfnlc
$ ls
dir vdsjh
dir wfvgc
$ cd vdsjh
$ ls
202584 pzs
$ cd ..
$ cd wfvgc
$ ls
315910 ctmrb.qsq
$ cd ..
$ cd ..
$ cd pjj
$ ls
242824 qhngjlvt.pcb
dir wzv
$ cd wzv
$ ls
221150 clrchzw.vbj
$ cd ..
$ cd ..
$ cd vmjljc
$ ls
dir blm
31640 dbtnn
dir fcfqp
dir frjdzh
dir scjhzc
dir tmz
dir vpvh
dir zcwpb
$ cd blm
$ ls
249527 hjsjqbw.rst
dir hqvhrpnv
dir pvnrmvb
dir pvt
dir rjpcb
161576 slp.gbn
dir srrzgt
97355 wtps.brr
$ cd hqvhrpnv
$ ls
dir tsstr
dir wqtnzw
dir zphvcch
$ cd tsstr
$ ls
dir fzrpgcn
$ cd fzrpgcn
$ ls
10603 hhg
$ cd ..
$ cd ..
$ cd wqtnzw
$ ls
56612 ctprm.bpc
22521 fljtffmz.rcl
$ cd ..
$ cd zphvcch
$ ls
dir fcfqp
$ cd fcfqp
$ ls
171787 ctprm.bpc
134010 mzvb
$ cd ..
$ cd ..
$ cd ..
$ cd pvnrmvb
$ ls
100624 fcfqp.nzt
120945 mzvb
$ cd ..
$ cd pvt
$ ls
dir lslcvfv
8511 mzvb
81176 srnqlrn.lvg
315976 ttzwwnn.fmz
dir wvhrf
$ cd lslcvfv
$ ls
dir gmj
13666 tcbf
$ cd gmj
$ ls
174220 drpztfvs.shg
$ cd ..
$ cd ..
$ cd wvhrf
$ ls
19033 gqggsrc
270841 hhg
dir nvvpbmgm
$ cd nvvpbmgm
$ ls
241543 pzht
72906 rmhrd
dir tllpvrdv
$ cd tllpvrdv
$ ls
309970 lmqcbbz
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd rjpcb
$ ls
215654 fcfqp.gjw
241891 gjgczrpm.hlw
dir gqql
101620 sqjtc
$ cd gqql
$ ls
214991 wctr.qnb
$ cd ..
$ cd ..
$ cd srrzgt
$ ls
dir bwfnrbs
147738 hhg
dir qdctrw
dir svpm
dir tsstr
$ cd bwfnrbs
$ ls
133922 gpsmlzbp.ghd
$ cd ..
$ cd qdctrw
$ ls
56213 ppp
$ cd ..
$ cd svpm
$ ls
205352 hhg
$ cd ..
$ cd tsstr
$ ls
248839 fcfqp.hlg
299835 lfdlfrhs.vjz
$ cd ..
$ cd ..
$ cd ..
$ cd fcfqp
$ ls
dir ctbbgw
dir rpvstz
265076 wqtnzw.cts
$ cd ctbbgw
$ ls
306172 vcbnl
$ cd ..
$ cd rpvstz
$ ls
40277 hhg
225110 mllhtfm.jwd
$ cd ..
$ cd ..
$ cd frjdzh
$ ls
69285 jlscvz.lsw
$ cd ..
$ cd scjhzc
$ ls
221073 gjgczrpm.hlw
$ cd ..
$ cd tmz
$ ls
35287 fcfqp
146224 mnz.zwd
189997 mzvb
dir tsn
31655 ttwjfbl.jbb
dir wjszmnp
170705 wqtnzw.slq
$ cd tsn
$ ls
196121 mzvb
$ cd ..
$ cd wjszmnp
$ ls
dir pbtmjghf
dir smbbnl
$ cd pbtmjghf
$ ls
151036 vcbnl
$ cd ..
$ cd smbbnl
$ ls
299800 mbt
dir wqtnzw
$ cd wqtnzw
$ ls
203547 hhg
220352 wqtnzw.dgs
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd vpvh
$ ls
69506 vbgrhzjs.tdb
$ cd ..
$ cd zcwpb
$ ls
73403 fcfqp.hpq

%% 2022\day07\test.txt
$ cd /
$ ls
dir a
14848514 b.txt
8504156 c.dat
dir d
$ cd a
$ ls
dir e
29116 f
2557 g
62596 h.lst
$ cd e
$ ls
584 i
$ cd ..
$ cd ..
$ cd d
$ ls
4060174 j
8033020 d.log
5626152 d.ext
7214296 k

%% 2022\day08\benchmark.bat
hyperfine-v1.15.0-x86_64-pc-windows-gnu/hyperfine.exe 'day08_1.exe <in.txt' 'day08_1a.exe <in.txt'

%% 2022\day08\day08_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{
    auto input = stdin.byLine;
    int N = input.front.length;
    int[][] field;
    foreach (ref i; input)
    {
        auto row = new int[N];
        i.map!(x => x.to!int - '0').copy(row);
        field ~= row;
    }
    int M = field.length;
    auto visible = new int[][M];
    foreach (i; 0..M)
        visible[i] = new int[N];

    foreach (j; 0..N)
    {
        int m = -1;
        foreach (i; 0..M)
        {
            if (field[i][j] > m)
            {
                m = field[i][j];
                visible[i][j] = 1;
            }
        }
    }

    foreach (j; 0..N)
    {
        int m = -1;

        foreach (i; iota(M-1, -1, -1))
        {
            if (field[i][j] > m)
            {
                m = field[i][j];
                visible[i][j] = 1;
            }
        }
    }

    foreach (i; 0..M)
    {
        int m = -1;
        foreach (j; iota(N-1, -1, -1))
        {
            if (field[i][j] > m)
            {
                m = field[i][j];
                visible[i][j] = 1;
            }
        }
    }

    foreach (i; 0..M)
    {
        int m = -1;
        foreach (j; 0..N)
        {
            if (field[i][j] > m)
            {
                m = field[i][j];
                visible[i][j] = 1;
            }
        }
    }

    writeln(visible.join.sum);
    //foreach (r; visible) r.writeln;

}

%% 2022\day08\day08_1a.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;

void main(string[] args)
{
    auto input = stdin.byLine;
    int N = input.front.length, M = 0;
    int[] field;

    foreach (ref i; input)
    {
        field.length += N;
        i.map!(x => x.to!int - '0').copy(field[$-N..$]);
        M++;
    }

    cartesianProduct(iota(M), iota(N)).map!(pos =>
        [[1, 0], [-1, 0], [0, 1], [0, -1]]
        .map!(off =>
            recurrence!((a, n) => [a[n-1][0] + off[0], a[n-1][1] + off[1]])([pos[0], pos[1]])
            .until!(a => a[0] < 0 || a[0] >= M || a[1] < 0 || a[1] >= N)
            .map!(idx => field[idx[0] * N + idx[1]])
        )
        .map!(ray =>
            ray.front > ray.drop(1).chain(only(-1)).maxElement)
        .any)
    .count(true)
    .writeln;

    //x + off[0] * N + x % N + off[1];

    // //cartesianProduct(iota(M), iota(N))
    // only([0, 0])
    // .map!(pos =>
    //     [[1, 0], [-1, 0], [0, 1], [0, -1]]
    //     .map!(off =>
    //         recurrence!((a, n) => a[n-1] + off[0] * N + a[n-1] % N + off[1])(pos[0] * N + pos[1])
    //     .tee!(x => x.writeln)
    //         .until!(a => a / N < 0 || a / N >= M || a % N < 0 || a % N >= N)
    //         .map!(idx => field[idx])
    //         )
    //     .map!(ray =>
    //         ray.front > ray.drop(1).chain(only(-1)).maxElement)
    //     .any
    //     )
    // .count(true)
    // //.writeln
    // ;
}

%% 2022\day08\day08_1_gpt.d
import std.stdio;

// Determines the number of trees that are visible from outside the grid.
int visibleTrees(string[] grid)
{
    // The number of visible trees.
    int count = 0;

    // Iterate over each tree in the grid.
    for (int row = 0; row < grid.length; ++row)
    {
        for (int col = 0; col < grid[0].length; ++col)
        {
            // If the current tree is on the edge of the grid, increment the
            // counter and continue to the next tree.
            if (row == 0 || row == grid.length - 1 || col == 0 || col == grid[0].length - 1)
            {
                ++count;
                continue;
            }

            // The height of the current tree.
            int height = grid[row][col] - '0';

            // Check if the current tree is the tallest in its row.
            bool tallestInRow = true;
            for (int i = 0; i < grid[0].length; ++i)
            {
                if (i == col) continue;
                if (grid[row][i] - '0' >= height)
                {
                    tallestInRow = false;
                    break;
                }
            }

            // Check if the current tree is the tallest in its column.
            bool tallestInCol = true;
            for (int i = 0; i < grid.length; ++i)
            {
                if (i == row) continue;
                if (grid[i][col] - '0' >= height)
                {
                    tallestInCol = false;
                    break;
                }
            }

            // If the current tree is the tallest in its row or column, increment
            // the counter.
            if (tallestInRow || tallestInCol)
            {
                ++count;
            }
        }
    }

    return count;
}

void main()
{
    // Read the grid from standard input.
    string[] grid;
    while (!stdin.eof)
    {
        string line = stdin.readln();
        if (line.length == 0) continue;
        grid ~= line;
    }

    // Print the number of visible trees.
    writeln(visibleTrees(grid));
}

%% 2022\day08\day08_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{
    auto input = stdin.byLine;
    int N = input.front.length;
    int[][] field;
    foreach (ref i; input)
    {
        auto row = new int[N];
        i.map!(x => x.to!int - '0').copy(row);
        field ~= row;
    }
    int M = field.length;
    auto visible = new int[][M];
    foreach (i; 0..M)
    {
        visible[i] = new int[N];
        if (i == 0 || i == M-1)
            visible[i][] = 0;
        else
        {
            visible[i][] = 1;
            visible[i][0] = visible[i][N-1] = 0;
        }

    }

    foreach (j; 1..N-1)
    {
        foreach (i; 1..M-1)
        {
            int m = field[i][j];
            for (int x = i+1; x < M; x++)
            {
                if (field[x][j] >= m || x == M-1)
                {
                    visible[i][j] *= x - i;
                    break;
                }
            }

            for (int x = i-1; x >= 0; x--)
            {
                if (field[x][j] >= m || x == 0)
                {
                    visible[i][j] *= i - x;
                    break;
                }
            }


            for (int x = j+1; x < N; x++)
            {
                if (field[i][x] >= m || x == N-1)
                {
                    visible[i][j] *= x - j;
                    break;
                }
            }

            for (int x = j-1; x >= 0; x--)
            {
                if (field[i][x] >= m || x == 0)
                {
                    visible[i][j] *= j - x;
                    break;
                }
            }
        }
    }

    writeln(visible.join.maxElement);
    //writeln(i, " ", j);
    //foreach (r; visible) r.writeln;
}

%% 2022\day08\in.txt
333430420313204425152200622665264212245045167252605104200413164212660350624632202413410021112040303
134032100422510245106510040264663362503422541041505357621476703420114122465165643524253354025030130
210440124144200401002041231025015610061612057522105774716346600327132553305630102152112533024041242
013233025442442502513652024201322435500523165612141337672674773011016503513304233064521152335042120
011305252432552501064411033666722407647207507507162465046733615606446206134542053636654320003411012
243023202214501634062402146610001573103776454700372701707211030076547400104323412251550200540512404
012253133143312645661144666762653037430267574705006276313562402352550711050455115603136051241513541
233542100202100442245031231337073750307372173356368622812112644626652722416200145424010111505415531
113050445521502306510155606560425124341767678204475464563457405544476324177711546422100335421551051
130312341330642365123453250761202155236155527441423565417554884760031702032102426223145121613433104
530143503231520461205002652051677511261563711762374740277300428262470663721100666052106105145213354
151015303344663420237540025132125454561370180385741740506056160664715223770111664734064302411202001
514034244406063254635323474251671315666526663746817240033573000108656045541344434601625022610052020
243154262363253554536541354003054186654045878102055585888161073638066213274671743325026010363535544
154120103402345375743506401360683734777656123267113230466240585461121530607117743057503356131114533
505455224133247240206564160431257714250053833782497581816130354025606255867122005077143403662520504
433241563055247633235066320883447875386276657781137827895139991200185503683760166777605024035426130
303666031235074150733051862308708620362115983146857284227577913250668362434852742536154264141044024
511222166044117055516803386663311572614519912678966147915185424343732707633260441221576201346435364
134360166233105100536433310812063681167658735195196145453391339382888328188314274546107317546511612
523620025403415442506243437017113976271955932743366455248318611782168343828238367826356710005034553
014143654212533674034560645259292873615816185144293735857682321366761974620115762457417172700305122
333105652265122475614582321536546127468959745749345269543234433166487289336786316820563170617120623
121601237502476667431600852195954252478198756563435696885982284312387934896760152481177324330131535
513446344670703428776508215695735445332247985475848233554657523817331875769331074017245476757301446
012251345264710602027058214811913234262454325876757887757444777969332385321984700241201345057245460
332461240272352410086272428238633529256552789239244723226288876562681521623121465728463663000253564
050241632437771176667281335711828626835432482452477575257825295624648638453256338282617312743052665
320460534364211482024332384631858292847294377732562824355842225275426886973273352617364252451510462
266231012324356276581324273442396899956952282898875358753279379896748925691919481576682154760400425
251566121704323168579128997588889283799488966757983883789954475486796857383783125527355207013547362
245170254224671131425381468779784773763587376849883899445985425964397253171121657364305543424605521
343241363651032654076929887424957669374497498475354869687897566288757258268124776805646407142505401
245235561074546607814525522575333844748378895964779738636436493832747556344467633450422573200613626
621467001761357111428393119677926772938443995376393853338365997532477292336453235160086048160217366
023775641054213273228832376568693489696566663398748497398659859837842294529619661172107248203627734
113467643020563674853798174949656774647946468556996446468936764346927347556233294257603825510225301
051772112150067612784116555244795748964966494976764476446478663548637694355969461949802873774665326
331233366625881187249285952947585544548997559569878848947886766655686939429493965123777681254223431
531573100137313597119916274627286959837544585968649788887976885577683473432893398693858562631240775
054773273536345576254932477965348359857659449696548949674766533585646392228226613594760535225257520
634743657825387116635366754892478485999446656868585575764798688597369672379597529612611500237237137
651102700443476274786872839522556949489444557965565689748499865784355354284683261999963545702441533
410422511344877258216478752346893586694958864569678896795749775497587467528943274138345032337425341
673074304265406323296329836734538597845554475567958596678746854759768739593368885149598108068333526
164263147103304418178278924224955484489949675979877868596747956467863649963887857128138635543007456
532045787035117465515664676376447636548656879595576977999774677855856735289939791867587713667806712
140404452768874515592229468574985653794588555889757998699874747589835947525564614257120186050531145
626535737062375329774963856647668644846998677768989895657468468657744348329253697139398584012102340
542125001671358961555599377429643566889856477767859887987675655559949868728345434499546123323161001
762120151054669481822452228565333874958454877687779859759785868573886766599894442765981274505151104
562471434368683846173563223634735557586587876899579875869878986493584743886292333767594628622775172
734222626506039543828356435245676596966499685666977779895844487493883497384439766576599302272713402
267177441831802248969359922326967573465467679688596788687556889843594594235859261867187578441714647
102117327257157522217556335628537334684966957875575975895695664957459754746968515546793540724822122
505233476882555673336484437283696496447664879799897577664966999965538753757237631528664630007177613
172066031365473733492776338746459955449887594496989558546775496577455654236726314131630007341654314
314412002266354633365762544569746844798457477779477686985845846857578447499935436861745481600772033
055237658717854148961524344444377964774585475448796459485964778855656967368965165942952602115364653
101635324187220117445419465884645869853647668548567797785599767597638684836376214415920463048311165
617323525735135461172377579929749788439689969985978844695495846787466498442754416512973663308107726
530710323015385832525292779264243858439684558659447696949696563673466249277668864281263486712173314
002226007723488635329843652368236983569879555555499475484483447567969679832981393855106427002552444
235757010870250337834974492853239769846747448878894988996873977468347779876273667633884411064437311
221537334662832777621573374939367297734988578388657548445987535345422574756283382295070667547270175
521462413004381720189539712492796774975667453383769536485344786668527448878163526268353212024115651
064167050511487528145433135444328348559358573773345433397876388385483662364771941163658800310756444
436636405027304747391412742798583342975676858784346378455554898673579853526351275216574538060506774
566540130441706782811763156886277636247669397646566433399777965674843633877716691920750361127241155
053372117542772170611448311472432495277284498837535486344595366632773998492323674853732413030542046
534364447320670867339153474824374957359843939965384798895376292698497378559437674083011730747713713
216264161444177358545356854382958565667999985377695889365464464565434283664444674351070427062510112
364206763745554337574296145539342755237347237689765249424576387533835284249337951552318166532717320
301321356401273810374524947234817483255967848336723823829824987424831571693585243183871374121705463
013142075522165017716733784396332487689825356344265736822666843742955823165716761855438154413641115
630515150411425607542463652174216633554978982572463873259338392247874837335324720668014545652155202
455031465466436525813303414966445845648576498854883558298456269113968383196025720070233635412326555
513541260473273275035537870749767166583572678469583476276998677949239286734633062745335042001531221
601365053241646675287550254721413885162954529985825668299219771922524729302706116406630414253264405
400344346330307036562615004227693316398374195415562381655134627581299617653477441607644245074524600
210313442047552663082465608147628816371648823764493322559365352994178913344658255573614412766560553
111352631055464137145152202878508984883298488591213254293969862555144081556414044421631665225522264
010164431247751037435264713238223247871448917563495625643168725587551433114342107055334272403301466
525253154605640500025274247121151664615511794958191647464479638471563708865215767367622432614243221
414144456652451577051364610780083460325111586672621671575123547806751385176766676676633016126156340
403125420124660622446312308556131072702464323774759977763680287787058873788251453020274036222556015
010450420461552234703024366261462024624268728424661115870447017746132551326225623245140220643235304
331053044132010120214026102738858112181065532060281161763064277514475458526554547622102204600502333
530232021520613242257763671271000321860552177274506581315403280378427012530121320262015343211500552
513451503556626221314452431160424362623172424403733615107832160275406543265725327322555342222542502
202051420236066361423130725131562714626884368317212022283380747212427753155731701600356565400542402
435145215102611325100662266006561366705875616488262665660460450412270343501022642555052262142035502
334403454455503501622450035064441374653775177026475804121642120210207061757610262641220243402302545
321311214442661462245102175522241130532337170266155071611254164127776674570166055246211562130500431
443124503252503622414632304026653173070670661231063766052605435514223357361561150225254553205315111
232120055124304462512532500502156531032207726437333213051406414333207241265312052356525310410451511
202002311103141164630106023656017441203731706174163257322311073432575771525344436600220200050051342
041004212342412120333645230362446732233342662123535575315702023322757200126221443432142400145220443
420334452105533313552263566256611333163022717266264743363602103371464132116230560501113054442342042

%% 2022\day08\test.txt
30373
25512
65332
33549
35390

%% 2022\day08\test2.txt
303730
255120
653320
335490
353900

%% 2022\day09\day09_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{
    immutable hoff = [
        'R'.to!int : [ 1,  0],
        'U'.to!int : [ 0,  1],
        'L'.to!int : [-1,  0],
        'D'.to!int : [ 0, -1],
        ];

    immutable toff = [

        [ 0, 0] : [0, 0],

        [ 1,  0] : [0, 0],
        [ 1,  1] : [0, 0],
        [ 0,  1] : [0, 0],
        [-1,  1] : [0, 0],
        [-1,  0] : [0, 0],
        [-1, -1] : [0, 0],
        [ 0, -1] : [0, 0],
        [ 1, -1] : [0, 0],

        [ 2,  0] : [ 1,  0],
        [ 2,  1] : [ 1,  1],
        [ 2,  2] : [ 1,  1],
        [ 1,  2] : [ 1,  1],
        [ 0,  2] : [ 0,  1],
        [-1,  2] : [-1,  1],
        [-2,  2] : [-1,  1],
        [-2,  1] : [-1,  1],
        [-2,  0] : [-1,  0],
        [-2, -1] : [-1, -1],
        [-2, -2] : [-1, -1],
        [-1, -2] : [-1, -1],
        [ 0, -2] : [ 0, -1],
        [ 1, -2] : [ 1, -1],
        [ 2, -2] : [ 1, -1],
        [ 2, -1] : [ 1, -1],
        ];


    auto t = [0, 0];
    auto h = [0, 0];
    auto off = [0, 0];
    auto visited = [
        t : true
        ];

    foreach (ref inst; stdin.byLine
                            .map!(x => [x.front, x[2..$].to!int]))
    {
        foreach (i; inst[1].iota)
        {
            h[] += hoff[inst[0]][];
            off[] = h[] - t[];
            off[] = toff[off];
            t[] += off[];
            visited[t.idup] = true;
        }
    }

    writeln(visited.length);
}

%% 2022\day09\day09_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{
    immutable hoff = [
        'R'.to!int : [ 1,  0],
        'U'.to!int : [ 0,  1],
        'L'.to!int : [-1,  0],
        'D'.to!int : [ 0, -1],
        ];

    immutable toff = [

        [ 0, 0] : [0, 0],

        [ 1,  0] : [0, 0],
        [ 1,  1] : [0, 0],
        [ 0,  1] : [0, 0],
        [-1,  1] : [0, 0],
        [-1,  0] : [0, 0],
        [-1, -1] : [0, 0],
        [ 0, -1] : [0, 0],
        [ 1, -1] : [0, 0],

        [ 2,  0] : [ 1,  0],
        [ 2,  1] : [ 1,  1],
        [ 2,  2] : [ 1,  1],
        [ 1,  2] : [ 1,  1],
        [ 0,  2] : [ 0,  1],
        [-1,  2] : [-1,  1],
        [-2,  2] : [-1,  1],
        [-2,  1] : [-1,  1],
        [-2,  0] : [-1,  0],
        [-2, -1] : [-1, -1],
        [-2, -2] : [-1, -1],
        [-1, -2] : [-1, -1],
        [ 0, -2] : [ 0, -1],
        [ 1, -2] : [ 1, -1],
        [ 2, -2] : [ 1, -1],
        [ 2, -1] : [ 1, -1],
        ];


    int[][] rope;
    rope.length = 10;
    rope.map!(x => [0, 0]).copy(rope);

    auto off = [0, 0];
    auto visited = [
        rope[0].idup : true
        ];

    foreach (ref inst; stdin.byLine
                            .map!(x => [x.front, x[2..$].to!int]))
    {
        //writeln(visited, " qq ", rope[$-1]);
        foreach (i; inst[1].iota)
        {
            rope[0][] += hoff[inst[0]][];
            foreach (k; 1..rope.length)
            {
                off[] = rope[k-1][] - rope[k][];
                off[] = toff[off];
                rope[k][] += off[];
            }
            visited[rope[$-1].idup] = true;
        }
    }

    writeln(visited.length);
}

%% 2022\day09\in.txt
U 2
D 2
R 2
U 2
D 1
L 2
R 2
D 1
R 2
D 1
R 2
L 1
U 1
L 2
R 2
L 2
U 2
R 2
L 1
U 1
R 2
U 1
D 2
L 1
U 2
D 1
L 1
R 1
L 1
D 1
R 1
D 2
L 1
U 2
L 1
U 1
D 2
U 1
R 2
U 1
R 2
D 1
U 1
D 2
L 2
U 2
L 2
R 1
L 1
U 2
D 2
U 1
R 2
L 2
U 1
R 1
L 2
D 1
L 1
U 2
D 1
R 1
U 2
R 2
U 2
R 2
D 1
L 2
R 2
U 2
D 2
U 2
L 1
U 1
L 2
U 1
D 1
L 1
D 1
L 1
R 1
L 1
R 2
D 1
L 1
D 2
R 2
L 1
U 2
L 1
U 2
L 1
U 1
D 2
U 1
L 1
R 1
D 1
L 2
U 1
L 1
R 2
D 1
L 2
U 1
L 2
D 2
R 2
D 2
U 1
D 2
R 3
U 2
L 2
R 3
L 2
U 3
L 3
D 1
R 2
L 1
R 2
U 3
R 3
L 1
D 2
R 3
L 2
D 3
L 3
U 1
R 1
D 2
R 2
D 3
L 3
U 3
R 3
D 2
U 1
D 3
L 2
R 1
D 3
L 3
D 3
L 2
D 3
L 1
D 2
R 2
L 3
U 2
R 2
L 1
U 1
D 3
R 3
U 2
R 3
D 1
R 1
U 3
D 2
L 2
D 2
L 3
U 2
R 3
D 1
L 3
U 1
R 3
U 1
D 1
U 2
D 1
R 2
L 2
D 1
R 1
D 2
L 1
U 1
D 1
R 2
D 1
L 2
R 1
D 3
U 1
D 3
U 2
L 1
U 3
D 2
L 3
U 2
D 3
R 3
D 3
U 3
R 1
U 2
L 3
D 1
R 3
D 2
U 2
D 2
L 3
U 3
D 3
R 3
L 2
D 3
U 3
D 3
U 2
R 2
L 3
R 3
U 1
D 1
U 2
L 4
D 1
U 1
L 2
D 4
U 3
L 1
U 1
D 1
L 4
R 4
L 4
R 2
U 4
L 2
R 1
L 3
U 3
D 2
L 3
U 4
R 3
L 4
D 2
U 3
D 2
U 2
L 4
D 2
L 1
R 4
U 4
D 2
U 4
L 4
D 2
L 3
U 3
D 1
R 1
U 1
D 4
U 3
L 4
D 1
L 4
U 1
L 2
U 3
D 2
L 3
U 4
D 2
U 1
D 1
U 1
R 2
L 2
D 3
U 2
R 1
U 1
L 4
U 1
R 2
D 3
R 1
D 1
R 3
D 3
L 1
U 3
L 3
D 4
L 3
D 4
L 1
D 1
R 1
D 1
U 4
L 2
U 3
D 4
R 4
D 1
U 2
D 4
U 1
R 4
L 2
D 3
U 4
R 3
D 1
L 3
D 4
R 4
L 3
D 2
L 3
U 3
R 3
D 1
R 1
L 2
D 2
U 4
R 1
L 1
D 2
U 3
D 3
L 3
D 5
L 1
U 2
L 5
U 3
R 3
L 2
U 2
L 1
U 5
L 4
D 1
L 3
D 5
U 3
R 5
D 1
L 5
R 5
L 5
D 4
U 4
L 5
U 5
R 5
U 2
D 5
L 5
U 3
L 3
U 4
L 5
U 3
D 4
R 3
U 1
L 2
U 5
L 1
U 2
D 1
U 1
D 1
R 4
L 1
R 2
D 2
R 3
L 5
R 2
D 5
U 4
R 5
D 3
L 1
D 3
R 3
L 1
R 4
D 3
L 5
D 1
R 1
U 4
D 2
R 3
U 4
D 3
U 1
D 1
R 1
D 4
U 1
L 5
R 1
U 5
L 4
R 1
L 1
R 4
D 3
U 3
D 3
U 4
L 2
U 1
R 2
U 1
D 4
U 4
R 1
U 4
R 3
L 4
R 2
L 4
D 5
R 3
U 1
D 1
L 3
R 2
U 1
D 3
U 1
D 1
R 3
U 2
L 6
R 1
D 1
R 5
L 5
U 4
D 1
L 6
D 5
L 3
D 6
R 1
U 3
D 3
R 5
U 1
R 5
D 1
L 1
D 4
L 1
D 4
R 1
D 5
U 6
L 5
R 2
U 2
D 6
R 3
U 6
L 2
D 5
U 3
R 1
D 3
L 1
D 3
U 1
D 3
U 4
R 2
D 3
R 2
D 2
L 3
U 2
R 6
D 4
R 4
D 1
U 3
D 1
L 3
U 6
R 4
D 3
R 3
L 4
R 2
U 5
D 6
L 5
U 3
L 4
D 2
R 2
D 3
L 6
D 1
U 1
R 4
L 5
D 3
U 4
L 2
U 5
L 2
U 5
D 1
L 4
U 1
R 2
L 3
D 1
U 4
D 2
U 2
L 1
D 4
R 2
L 3
R 2
D 6
R 2
D 3
R 3
D 2
U 6
D 4
R 4
U 4
L 5
R 3
L 4
D 3
L 2
R 2
D 1
L 6
R 7
L 3
U 3
D 6
U 4
R 4
D 7
L 4
U 1
L 5
R 5
L 5
U 7
R 1
D 2
R 6
D 6
U 2
R 1
U 2
L 5
D 7
U 5
L 3
U 4
L 5
U 4
L 2
D 1
U 3
R 4
L 5
R 5
L 4
R 3
L 7
R 4
U 1
L 4
R 4
U 7
D 3
U 4
L 7
D 5
L 1
D 5
L 7
U 5
L 5
D 3
U 5
D 3
U 7
R 5
D 1
U 2
L 1
U 1
D 1
L 1
U 6
D 2
L 7
U 5
R 4
L 3
U 2
L 1
R 1
L 2
D 3
L 3
U 4
D 4
U 7
D 7
U 6
D 7
R 5
U 7
D 4
U 3
R 3
D 3
U 6
L 6
U 1
R 1
U 7
R 2
U 1
D 1
R 1
D 1
L 6
U 6
D 7
R 4
D 1
L 2
U 6
L 2
D 2
R 2
D 3
L 3
R 5
D 1
R 4
L 1
U 1
R 3
L 8
U 3
L 3
R 5
L 8
D 1
R 1
D 8
L 4
D 2
L 4
U 3
D 6
R 2
U 4
D 6
R 8
D 4
L 7
R 6
U 2
R 1
U 3
R 2
L 1
R 8
L 2
D 6
R 6
D 6
U 2
D 6
R 7
D 4
U 6
R 5
D 8
L 3
R 6
D 4
R 4
U 2
D 8
L 8
U 6
D 2
R 3
L 2
D 6
U 8
R 3
D 3
L 5
D 5
L 4
R 8
D 3
U 3
D 2
R 8
U 4
L 8
U 2
R 1
L 4
D 5
L 5
R 5
D 3
L 7
D 4
L 6
D 2
U 3
D 2
L 2
D 6
R 2
U 6
R 7
L 8
U 3
D 8
L 1
U 8
L 8
D 2
R 6
U 4
D 8
U 3
L 7
D 7
L 8
U 8
L 4
U 6
L 1
U 4
D 7
U 3
R 2
D 4
L 5
U 8
R 4
U 1
R 2
U 4
D 7
U 7
R 7
D 7
U 9
L 4
D 8
U 6
L 3
D 1
U 8
L 9
U 8
D 8
U 2
L 1
U 5
L 9
U 4
D 7
L 5
U 4
R 5
D 2
L 3
D 5
R 3
L 2
D 9
U 5
L 6
U 7
D 2
R 2
D 3
R 5
U 7
L 1
U 9
R 3
D 8
R 6
D 5
U 9
R 9
D 3
U 8
D 3
R 6
D 4
U 8
L 4
D 8
R 2
U 2
R 3
D 9
L 9
U 7
R 4
D 4
L 5
U 1
D 3
R 6
L 4
R 1
D 6
R 4
L 4
U 6
D 2
L 2
D 3
R 8
D 3
U 4
L 4
D 2
U 2
L 4
D 9
R 9
D 6
U 7
L 8
U 6
D 5
R 2
D 5
U 9
R 5
D 7
U 2
L 3
R 2
U 5
L 4
D 5
U 2
L 9
U 3
R 2
D 9
R 5
D 9
U 2
R 2
L 6
U 3
L 6
R 8
U 5
D 8
R 9
L 2
R 2
U 1
D 10
R 8
L 6
D 9
R 5
L 10
R 2
L 3
R 9
D 7
U 10
D 9
L 7
U 8
D 7
U 2
D 1
U 5
R 9
U 9
R 6
D 4
L 3
D 6
R 10
D 2
L 4
U 8
R 6
L 3
U 1
D 8
R 6
D 4
L 1
R 3
L 10
U 4
D 5
U 1
R 3
U 5
R 5
D 9
R 1
L 4
U 4
R 4
D 7
L 1
U 6
R 6
U 1
D 4
R 2
L 3
D 6
L 3
R 1
L 10
D 1
L 1
U 6
R 7
L 8
U 2
D 10
R 4
D 9
R 2
U 9
L 2
U 7
D 4
U 4
R 9
U 9
R 6
D 7
L 8
U 1
D 6
L 6
U 8
D 3
R 4
L 4
D 1
L 2
D 3
L 2
U 1
L 5
D 2
U 8
L 1
U 5
L 3
U 3
R 3
U 1
L 7
D 9
R 3
D 10
R 8
L 5
D 3
U 6
R 4
U 4
D 2
L 5
U 11
L 3
U 1
L 6
D 1
L 2
U 8
R 6
L 4
R 2
U 3
L 3
D 4
L 2
R 5
U 4
D 5
U 10
R 1
D 6
L 4
U 9
D 3
U 5
D 9
L 1
U 8
D 11
L 4
D 4
L 5
D 7
L 7
R 10
U 5
R 1
D 10
R 3
D 11
R 7
L 6
U 7
D 4
L 7
U 8
R 6
L 4
U 5
L 7
R 2
D 10
L 8
R 4
U 1
R 5
L 2
R 4
L 6
R 4
U 10
R 6
U 9
R 9
D 6
L 7
D 1
U 1
L 8
U 1
D 8
L 10
R 6
D 4
R 9
D 4
R 3
D 4
U 8
L 3
D 7
L 2
R 10
U 5
R 4
L 3
D 6
U 7
R 8
D 5
R 6
L 7
R 4
U 6
L 8
D 8
R 6
L 6
U 8
R 10
U 4
R 2
D 2
L 11
R 10
L 5
U 10
L 5
D 12
L 7
D 8
L 2
U 1
L 11
R 3
D 8
U 7
L 6
D 9
L 12
U 7
L 11
R 7
U 8
L 4
D 9
U 6
D 9
R 7
L 4
R 12
U 8
D 6
U 8
D 6
U 5
L 2
U 2
L 9
D 10
L 11
U 10
R 4
L 12
U 6
L 11
R 10
U 9
L 2
D 11
L 11
D 10
U 8
R 10
L 7
R 6
L 6
U 5
L 8
D 5
U 7
L 5
D 8
R 5
L 7
D 10
L 10
D 12
L 8
R 11
U 6
L 12
D 9
U 5
R 2
U 6
D 11
U 5
R 1
L 2
R 3
U 8
R 4
L 10
R 6
D 9
L 3
U 11
L 4
U 1
R 5
L 8
D 8
U 2
D 7
U 5
R 10
L 4
D 4
U 2
L 7
D 12
U 12
D 5
U 12
R 3
L 4
U 10
L 1
R 2
L 9
R 9
L 5
U 5
L 10
U 12
L 3
D 5
U 12
L 10
D 11
U 12
L 2
U 11
R 6
D 10
U 6
L 5
D 10
U 10
D 12
U 3
L 10
U 9
R 4
U 4
L 12
R 12
L 4
D 5
L 9
U 5
L 11
R 12
D 8
L 6
U 10
D 2
U 11
D 6
R 10
D 1
L 5
U 1
D 10
U 1
L 13
U 11
L 6
R 1
U 11
D 10
R 11
L 3
U 6
R 13
U 13
L 6
R 4
D 3
L 10
U 2
R 9
D 6
L 12
U 11
D 9
R 2
L 2
D 4
R 13
L 7
R 7
L 9
R 11
U 4
D 2
L 4
R 12
L 3
D 8
U 9
D 3
R 11
U 11
D 13
U 1
D 6
U 2
R 13
L 5
U 6
L 5
U 13
L 12
D 7
L 12
R 4
U 4
D 3
L 5
D 10
U 10
L 2
U 11
L 9
U 11
R 7
D 4
U 9
D 7
R 6
L 2
D 2
L 1
U 10
R 5
U 5
R 1
L 10
D 11
U 5
D 13
R 9
D 6
R 2
D 13
R 12
L 11
D 6
R 9
U 12
R 11
U 6
R 12
D 4
R 11
L 5
D 1
U 5
R 8
D 1
R 12
L 9
U 6
L 9
U 3
L 6
R 3
U 2
R 3
U 14
L 7
R 7
L 12
U 7
R 5
D 7
L 10
U 14
D 8
L 5
U 11
D 4
U 10
R 9
U 4
R 1
L 11
U 13
D 8
R 10
L 3
U 11
L 5
U 2
R 6
U 3
R 10
L 4
R 3
D 8
U 11
L 11
U 6
R 6
U 8
R 4
L 10
R 2
U 4
L 2
D 12
R 12
D 4
U 14
R 6
U 1
R 9
L 5
U 9
D 5
R 13
U 11
L 8
R 11
D 9
L 8
D 8
U 5
R 2
L 3
D 6
U 9
D 1
L 8
U 6
L 6
R 8
D 13
R 12
L 5
U 8
R 11
D 4
U 13
D 10
U 4
D 3
L 14
R 14
D 5
R 2
D 7
L 13
U 1
L 14
U 15
D 11
R 2
U 15
R 11
L 8
U 11
D 4
R 2
U 8
L 8
R 11
U 9
L 11
D 4
L 8
U 9
L 9
D 15
U 1
L 8
U 7
L 12
U 13
R 7
L 6
D 13
U 1
L 9
D 11
R 8
D 3
R 11
L 8
R 9
U 2
L 1
U 5
D 14
R 3
U 12
R 4
U 15
D 1
R 11
L 11
U 11
L 1
D 12
U 7
L 13
R 4
U 5
D 15
L 14
R 10
U 9
R 7
D 13
L 15
R 10
L 2
R 5
D 12
U 13
R 6
L 15
R 14
D 1
U 1
L 2
U 11
R 15
U 8
R 9
U 5
L 9
D 14
R 9
D 9
U 8
R 8
U 3
R 7
D 11
R 4
U 9
R 9
U 11
D 4
U 12
L 9
R 3
D 7
L 6
R 1
D 9
R 1
D 4
R 16
U 12
R 8
D 7
L 7
R 9
U 16
R 15
U 14
L 14
D 3
R 4
U 4
D 1
L 2
D 11
R 2
U 2
D 16
U 4
D 5
R 14
D 3
R 5
D 10
R 2
L 4
U 6
R 9
D 16
R 12
U 2
L 16
R 7
L 8
R 5
L 5
U 14
D 16
U 7
R 2
U 15
L 3
R 7
L 5
U 8
R 11
D 3
L 5
U 7
L 8
R 3
U 3
D 5
U 13
L 8
U 1
D 13
R 11
L 2
U 14
R 15
U 2
D 7
R 15
L 5
D 9
U 8
R 5
L 15
D 3
R 10
D 10
U 7
D 7
U 14
R 2
U 8
R 14
L 11
R 16
U 11
D 16
U 2
L 10
U 5
D 6
L 7
U 8
D 10
R 11
L 7
D 5
U 6
L 5
D 5
R 1
L 7
U 9
L 5
U 3
D 7
R 14
U 9
D 6
L 13
U 8
L 5
D 5
R 3
U 7
D 6
U 8
R 16
U 17
L 5
R 8
L 8
U 8
L 10
D 17
R 5
D 3
L 17
R 17
D 4
R 15
D 6
L 3
R 17
D 9
L 13
U 4
D 2
L 17
R 1
L 14
D 17
L 9
R 12
U 14
D 12
U 3
R 7
D 1
L 13
R 13
U 16
D 13
U 15
R 15
U 4
D 11
L 7
U 1
D 14
U 8
L 11
D 13
L 12
U 17
L 13
U 2
R 10
L 12
R 12
U 1
R 8
U 10
D 15
R 3
U 4
R 12
L 9
D 15
L 13
D 15
L 7
D 8
L 7
U 6
L 17
R 4
D 10
U 11
L 8
R 14
U 9
R 9
L 6
U 1
L 5
D 11
R 10
L 16
U 15
L 12
R 13
D 5
L 4
D 12
L 6
R 3
D 12
L 4
U 2
L 16
D 6
R 15
U 7
D 2
L 14
D 6
R 14
D 7
U 11
R 4
D 3
R 6
L 3
D 11
U 2
R 5
U 3
L 1
U 7
R 13
U 12
D 12
R 13
D 7
L 12
D 10
U 14
R 12
D 4
R 2
U 16
D 9
L 14
U 14
D 8
L 7
R 7
D 18
U 18
R 8
L 15
U 12
D 11
L 16
D 18
R 14
L 5
R 12
D 11
R 13
L 17
D 4
L 10
U 1
L 8
U 10
R 13
D 2
L 14
D 1
R 5
L 4
R 11
L 7
D 2
R 8
L 13
R 5
L 5
R 11
U 15
D 3
U 2
R 6
U 1
R 8
L 5
U 1
R 9
D 13
R 8
U 17
L 16
U 3
L 9
D 9
U 6
L 8
R 13
L 7
R 16
U 6
L 13
U 18
L 17
D 15
R 5
U 6
D 11
U 15
L 4
R 14
U 9
R 11
U 9
L 11
D 7
U 9
L 10
D 4
R 7
U 7
D 8
R 1
D 12
R 16
U 7
R 9
D 10
R 1
L 1
U 16
L 4
U 11
D 1
U 3
R 17
U 17
L 12
R 9
U 14
D 4
L 6
R 4
L 15
U 1
D 2
U 9
R 16
L 1
R 2
L 12
U 12
D 7
R 13
D 6
L 2
D 3
U 8
L 7
U 16
L 15
D 18
L 19
U 7
R 17
D 7
U 3
R 12
D 1
L 17
U 19
D 15
R 3
D 5
U 17
D 16
U 2
R 13
D 7
U 19
L 5
R 3
D 15
L 12
D 19
L 19
U 1
R 10
D 14
U 3
R 1
L 6
U 14
L 11
R 10
L 7
R 14
D 9
U 14
R 5
L 19
U 10
L 12
U 10
L 3
D 13
U 12
R 12
D 6
L 2
U 1
D 16
U 9
L 7
R 14
L 15
U 9
L 19
U 14
D 9
U 15
L 13
U 12
L 1
D 7
U 7
L 7
R 2
U 16
R 6
D 11
U 7
D 11
U 19
R 13
D 7
R 7
L 6
R 14
L 18
D 2
L 5
D 8
L 7
U 17
D 15
U 19

%% 2022\day09\test.txt
R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2

%% 2022\day09\test2.txt
R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20

%% 2022\day10\day10_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{

    auto r = new Generator!int({
        int x = 1;
        int tick = 1;

        foreach (line; stdin.byLine.chain(["noop"]))
        {
            debug writeln(tick, " ", x);

            if ((tick - 20) % 40 == 0)
            {
                debug writeln("yielding ", x * tick);
                yield(x * tick);
            }

            if (line == "noop")
            {
                tick++;
            }
            else
            {
                int s = line[5..$].to!int;
                if (tick == 19 || (tick - 20) % 40 == 39)
                {
                    debug writeln("yielding ", x * (tick + 1));
                    yield(x * (tick + 1));
                }
                x += s;
                tick += 2;
            }
        }

        debug writeln(tick, " ", x);
    });

    writeln(r.sum);
}


// 17   18   19   20   21   22   23   24
//          tick ntick
//               tick ntick
//     tick      ntick
//          tick      ntick
//               tick      ntick

%% 2022\day10\day10_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

void main(string[] args)
{

    auto r = new Generator!int({
        int x = 1;
        int tick = 0;

        foreach (line; stdin.byLine)
        {
            debug writeln(tick, " ", x);

            if (line == "noop")
            {
                yield(x);
                tick++;
            }
            else
            {
                int s = line[5..$].to!int;
                yield(x);
                yield(x);
                x += s;
                tick += 2;
            }
        }

        debug writeln(tick, " ", x);
    });


    r.enumerate
     .map!(x => (x[1] - 1 <= (x[0] % 40) && (x[0] % 40) <= x[1] + 1) ? '#' : '.' )
     .chunks(40)
     .each!(x => x.writeln);
}


// 17   18   19   20   21   22   23   24
//          tick ntick
//               tick ntick
//     tick      ntick
//          tick      ntick
//               tick      ntick

%% 2022\day10\fun1.txt
addx 1
addx 4
noop
noop
addx 3
addx -1
addx 5
addx -1
addx 6
addx 1
addx 1
addx 4
addx 1
addx 1
addx 4
addx 1
addx 2
addx 3
addx 2
addx 2
addx -38
addx -2
addx 6
noop
noop
addx 2
noop
noop
addx 2
addx 5
addx 3
addx -2
addx 5
addx -1
addx 2
addx 6
addx -2
addx 6
addx 2
addx 2
addx 2
addx 2
addx -38
addx -2
addx 6
noop
noop
addx 2
noop
noop
addx 2
addx 6
addx -2
addx 2
addx 6
addx -2
addx 2
addx 6
addx 2
addx 2
addx -2
addx 6
addx 2
addx 2
addx -38
addx -2
addx 6
addx 1
addx 1
addx 4
noop
noop
addx 2
noop
noop
addx 2
addx 6
addx -2
addx 2
addx 6
addx -2
addx 2
addx 6
addx -2
addx 6
addx 2
addx -39
addx 1
addx 4
addx 2
addx -2
addx 6
addx -2
addx 6
addx -2
addx 5
addx 1
addx 4
addx 1
addx 1
addx 4
addx 1
addx 1
addx 4
addx 2
addx 2
addx -38
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx -1

%% 2022\day10\fun2.txt
addx -2
addx 6
addx 2
addx -2
addx 6
addx 2
addx -2
addx 6
addx 2
addx -2
addx 6
addx 2
addx -2
addx 6
addx 2
addx -2
addx 6
addx 2
addx 2
addx -39
addx 1
addx 4
addx 1
addx 1
addx 4
addx 2
addx -2
addx 6
addx 2
addx -2
addx 6
addx 1
addx 3
addx 2
addx 2
addx 1
addx 3
addx 2
addx 2
addx -42
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 4
addx 2
noop
noop
addx 4
addx 2
noop
noop
addx 6
addx 2
addx -38
addx -2
addx 6
addx 2
addx -2
addx 6
addx 1
addx 1
addx 4
addx 1
addx 1
addx 4
addx 1
addx 3
addx 2
addx 2
addx 1
addx 3
addx 2
addx 2
addx -38
addx -2
addx 6
addx 2
addx -2
addx 6
addx 2
addx -2
addx 6
addx 2
addx -2
addx 6
addx 2
addx -2
addx 6
addx 2
addx -2
addx 6
addx 2
addx 2
addx -38
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx 2
addx -1

%% 2022\day10\in.txt
noop
addx 10
addx -4
addx -1
noop
noop
addx 5
addx -12
addx 17
noop
addx 1
addx 2
noop
addx 3
addx 2
noop
noop
addx 7
addx 3
noop
addx 2
noop
noop
addx 1
addx -38
addx 5
addx 2
addx 3
addx -2
addx 2
addx 5
addx 2
addx -4
addx 26
addx -19
addx 2
addx 5
addx -2
addx 7
addx -2
addx 5
addx 2
addx 4
addx -17
addx -23
addx 1
addx 5
addx 3
noop
addx 2
addx 24
addx 4
addx -23
noop
addx 5
addx -1
addx 6
noop
addx -2
noop
noop
noop
addx 7
addx 1
addx 4
noop
noop
noop
noop
addx -37
addx 5
addx 2
addx 1
noop
addx 4
addx -2
addx -4
addx 9
addx 7
noop
noop
addx 2
addx 3
addx -2
noop
addx -12
addx 17
noop
addx 3
addx 2
addx -3
addx -30
addx 3
noop
addx 2
addx 3
addx -2
addx 2
addx 5
addx 2
addx 11
addx -6
noop
addx 2
addx -19
addx 20
addx -7
addx 14
addx 8
addx -7
addx 2
addx -26
addx -7
noop
noop
addx 5
addx -2
addx 5
addx 15
addx -13
addx 5
noop
noop
addx 1
addx 4
addx 3
addx -2
addx 4
addx 1
noop
addx 2
noop
addx 3
addx 2
noop
noop
noop
noop
noop

%% 2022\day10\test.txt
noop
addx 3
addx -5

%% 2022\day10\test2.txt
addx 15
addx -11
addx 6
addx -3
addx 5
addx -1
addx -8
addx 13
addx 4
noop
addx -1
addx 5
addx -1
addx 5
addx -1
addx 5
addx -1
addx 5
addx -1
addx -35
addx 1
addx 24
addx -19
addx 1
addx 16
addx -11
noop
noop
addx 21
addx -15
noop
noop
addx -3
addx 9
addx 1
addx -3
addx 8
addx 1
addx 5
noop
noop
noop
noop
noop
addx -36
noop
addx 1
addx 7
noop
noop
noop
addx 2
addx 6
noop
noop
noop
noop
noop
addx 1
noop
noop
addx 7
addx 1
noop
addx -13
addx 13
addx 7
noop
addx 1
addx -33
noop
noop
noop
addx 2
noop
noop
noop
addx 8
noop
addx -1
addx 2
addx 1
noop
addx 17
addx -9
addx 1
addx 1
addx -3
addx 11
noop
noop
addx 1
noop
addx 1
noop
noop
addx -13
addx -19
addx 1
addx 3
addx 26
addx -30
addx 12
addx -1
addx 3
addx 1
noop
noop
noop
addx -9
addx 18
addx 1
addx 2
noop
noop
addx 9
noop
noop
noop
addx -1
addx 2
addx -37
addx 1
addx 3
noop
addx 15
addx -21
addx 22
addx -6
addx 1
noop
addx 2
addx 1
noop
addx -10
noop
noop
addx 20
addx 1
addx 2
addx 2
addx -6
addx -11
noop
noop
noop

%% 2022\day11\day11_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

struct Monkey
{
    int m;
    int[] items;
    string[] op;
    int div;
    int tm, fm;

    int inspect = 0;
}

int perform_op(int old, string[] op)
{
    int l = op[0] == "old" ? old : op[0].to!int;
    int r = op[2] == "old" ? old : op[2].to!int;

    if (op[1] == "+")
        return l + r;
    else if (op[1] == "*")
        return l * r;

    assert(0);
}

void main(string[] args)
{
    Monkey[] monkeys;
    while(!stdin.eof)
    {
        Monkey monkey;

        stdin.readf!"Monkey %d:\n"(monkey.m);

        string s;
        stdin.readf("  Starting items: %s\n", s);
        auto spec = singleSpec("%(%s, %)");
        monkey.items = s.unformatValue!(int[])(spec);

        string sop;
        stdin.readf("  Operation: new = %s\n", sop);
        monkey.op = sop.split;

        stdin.readf("  Test: divisible by %d\n", monkey.div);

        stdin.readf("    If true: throw to monkey %d\n", monkey.tm);
        stdin.readf("    If false: throw to monkey %d\n", monkey.fm);

        stdin.readln;

        monkeys ~= monkey;
    }

    debug writeln("  Monkeys: ");
    debug monkeys.each!(m => m.writeln);
    debug writeln;

    foreach (round; 0..20)
    {
        foreach (ref monkey; monkeys)
        {
            debug writeln("  Monkey inspector: ", monkey);

            foreach (item; monkey.items)
            {
                monkey.inspect++;
                int w = perform_op(item, monkey.op);
                w /= 3;
                if (w % monkey.div == 0)
                    monkeys[monkey.tm].items ~= w;
                else
                    monkeys[monkey.fm].items ~= w;
                monkey.items = monkey.items[1..$];

                debug monkeys.each!(m => m.writeln);
                debug writeln;
            }
        }
    }

    auto inspects = monkeys.map!(x => x.inspect).array.sort;
    writeln(inspects[$-1] * inspects[$-2]);
}

%% 2022\day11\day11_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.concurrency;

struct Monkey
{
    int m;
    long[] items;
    string[] op;
    int div;
    int tm, fm;

    long inspect = 0;
}

long perform_op(long old, string[] op)
{
    long l = op[0] == "old" ? old : op[0].to!long;
    long r = op[2] == "old" ? old : op[2].to!long;

    if (op[1] == "+")
        return l + r;
    else if (op[1] == "*")
        return l * r;

    assert(0);
}

void main(string[] args)
{
    Monkey[] monkeys;
    while(!stdin.eof)
    {
        Monkey monkey;

        stdin.readf!"Monkey %d:\n"(monkey.m);

        string s;
        stdin.readf("  Starting items: %s\n", s);
        auto spec = singleSpec("%(%s, %)");
        monkey.items = s.unformatValue!(long[])(spec);

        string sop;
        stdin.readf("  Operation: new = %s\n", sop);
        monkey.op = sop.split;

        stdin.readf("  Test: divisible by %d\n", monkey.div);

        stdin.readf("    If true: throw to monkey %d\n", monkey.tm);
        stdin.readf("    If false: throw to monkey %d\n", monkey.fm);

        stdin.readln;

        monkeys ~= monkey;
    }

    debug writeln("  Monkeys: ");
    debug monkeys.each!(m => m.writeln);
    debug writeln;

    long gd = monkeys.map!(m => m.div).fold!((a, b) => a * b)(1);
    debug writeln(gd);

    foreach (round; 0..10_000)
    {
        foreach (ref monkey; monkeys)
        {
            //debug writeln("  Monkey inspector: ", monkey);

            foreach (item; monkey.items)
            {
                monkey.inspect++;
                long w = perform_op(item, monkey.op);

                //w /= 3;
                w %= gd;

                if (w % monkey.div == 0)
                    monkeys[monkey.tm].items ~= w;
                else
                    monkeys[monkey.fm].items ~= w;
                monkey.items = monkey.items[1..$];

                // debug monkeys.each!(m => m.writeln);
                // debug writeln;
            }
        }

        debug writeln("Round = ", round+1);
        debug monkeys.each!(m => write(m.inspect, " "));
        debug writeln;
    }

    auto inspects = monkeys.map!(x => x.inspect).array.sort;
    writeln(inspects[$-1] * inspects[$-2]);
}

%% 2022\day11\in.txt
Monkey 0:
  Starting items: 89, 95, 92, 64, 87, 68
  Operation: new = old * 11
  Test: divisible by 2
    If true: throw to monkey 7
    If false: throw to monkey 4

Monkey 1:
  Starting items: 87, 67
  Operation: new = old + 1
  Test: divisible by 13
    If true: throw to monkey 3
    If false: throw to monkey 6

Monkey 2:
  Starting items: 95, 79, 92, 82, 60
  Operation: new = old + 6
  Test: divisible by 3
    If true: throw to monkey 1
    If false: throw to monkey 6

Monkey 3:
  Starting items: 67, 97, 56
  Operation: new = old * old
  Test: divisible by 17
    If true: throw to monkey 7
    If false: throw to monkey 0

Monkey 4:
  Starting items: 80, 68, 87, 94, 61, 59, 50, 68
  Operation: new = old * 7
  Test: divisible by 19
    If true: throw to monkey 5
    If false: throw to monkey 2

Monkey 5:
  Starting items: 73, 51, 76, 59
  Operation: new = old + 8
  Test: divisible by 7
    If true: throw to monkey 2
    If false: throw to monkey 1

Monkey 6:
  Starting items: 92
  Operation: new = old + 5
  Test: divisible by 11
    If true: throw to monkey 3
    If false: throw to monkey 0

Monkey 7:
  Starting items: 99, 76, 78, 76, 79, 90, 89
  Operation: new = old + 7
  Test: divisible by 5
    If true: throw to monkey 4
    If false: throw to monkey 5

%% 2022\day11\test.txt
Monkey 0:
  Starting items: 79, 98
  Operation: new = old * 19
  Test: divisible by 23
    If true: throw to monkey 2
    If false: throw to monkey 3

Monkey 1:
  Starting items: 54, 65, 75, 74
  Operation: new = old + 6
  Test: divisible by 19
    If true: throw to monkey 2
    If false: throw to monkey 0

Monkey 2:
  Starting items: 79, 60, 97
  Operation: new = old * old
  Test: divisible by 13
    If true: throw to monkey 1
    If false: throw to monkey 3

Monkey 3:
  Starting items: 74
  Operation: new = old + 3
  Test: divisible by 17
    If true: throw to monkey 0
    If false: throw to monkey 1

%% 2022\day12\day12_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;

void main(string[] args)
{
    auto input = stdin.byLine;
    int N = input.front.length, M = 0;
    int[] field;

    int sm, sn, em, en;
    foreach (ref i; input)
    {
        field.length += N;

        auto sr = i.find('S');
        if (!sr.empty)
        {
            sm = M;
            sn = i.length - sr.length;
            i[sn] = 'a';
        }

        auto er = i.find('E');
        if (!er.empty)
        {
            em = M;
            en = i.length - er.length;
            i[en] = 'z';
        }

        i.copy(field[$-N..$]);
        M++;
    }

    int[] visited;
    visited.length = field.length;
    int[][] queue;

    visited[sm * N + sn] = 1;
    queue ~= [sm, sn];
    while (queue.length > 0)
    {
        auto curr = queue.front;
        queue.popFront;

        foreach (off; [[-1, 0], [1, 0], [0, -1], [0, 1]])
        {
            auto t = curr.dup;
            t[] += off[];
            if (t[0] >= 0 && t[0] < M && t[1] >= 0 && t[1] < N &&
                field[t[0] * N + t[1]] - field[curr[0] * N + curr[1]] <= 1 &&
                visited[t[0] * N + t[1]] == 0)
            {
                queue ~= t;
                visited[t[0] * N + t[1]] = visited[curr[0] * N + curr[1]] + 1;
            }
        }

        if (visited[em * N + en] > 0)
        {
            writeln(visited[em * N + en] - 1);
            return;
        }
    }
}

%% 2022\day12\day12_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;

void main(string[] args)
{
    auto input = stdin.byLine;
    int N = input.front.length, M = 0;
    int[] field;

    int sm, sn, em, en;
    foreach (ref i; input)
    {
        field.length += N;

        auto sr = i.find('S');
        if (!sr.empty)
        {
            sm = M;
            sn = i.length - sr.length;
            i[sn] = 'a';
        }

        auto er = i.find('E');
        if (!er.empty)
        {
            em = M;
            en = i.length - er.length;
            i[en] = 'z';
        }

        i.copy(field[$-N..$]);
        M++;
    }

    int shortest = M*N+1;
    foreach (m; 0..M)
    {
        foreach (n; 0..N)
        {
            if (field[m * N + n] != 'a')
            {
                continue;
            }

            sm = m;
            sn = n;

            int[] visited;
            visited.length = field.length;
            int[][] queue;

            visited[sm * N + sn] = 1;
            queue ~= [sm, sn];
            while (queue.length > 0)
            {
                auto curr = queue.front;
                queue.popFront;

                foreach (off; [[-1, 0], [1, 0], [0, -1], [0, 1]])
                {
                    auto t = curr.dup;
                    t[] += off[];
                    if (t[0] >= 0 && t[0] < M && t[1] >= 0 && t[1] < N &&
                    field[t[0] * N + t[1]] - field[curr[0] * N + curr[1]] <= 1 &&
                    visited[t[0] * N + t[1]] == 0)
                    {
                        queue ~= t;
                        visited[t[0] * N + t[1]] = visited[curr[0] * N + curr[1]] + 1;
                    }
                }

                if (visited[em * N + en] > 0)
                {
                    shortest = min(shortest, visited[em * N + en] - 1);
                    break;
                }
            }
        }
    }

    writeln(shortest);
}

%% 2022\day12\in.txt
abaaaaacccccccccccccccccccccccccccccccccccccccaaaaaaaccccaaaaaaaaaaaaaaaaacccccaaaaaacccccccccccccccccccccccaaaaaaaaccccccccccccccccccccccccccccccccaaaaaa
abaaaaaacccaaaacccccccccccccccccccccccaccccccccaaaaaaaaccaaaaaaaaaaaaaaaaccccccaaaaaacccccccccccccccccccccccccaaaaccccccccccccccccccccccccccccccccccaaaaaa
abaaaaaacccaaaacccccccccccccccccaaaaaaaacccccccaaaaaaaaacaaaaaaaaaaaaacccccccccaaaaacccccccccccccccccccccccccaaaaacccccccccccccccccccaaaccccccccccccaaaaaa
abaaacaccccaaaaccccccccccccccccccaaaaaacccccccccaaaaaaaccccaaaaaaaaaaacccccccccaaaaacccccccccccccccccccccccccaacaaaccccccccccccccccccaaacccccccccccccccaaa
abaaacccccccaaacccccccccccaacccccaaaaaaccccccccaaaaaaccccccaacaaaaaaaacccccccccccccccccccccccaaccccccccccccccacccaaaaacccccccccaaccccaaacccccccccccccccaaa
abccccccccccccccccccccccccaaaaccaaaaaaaacccccccaaaaaaaccccccccaaaaaaaaaccccccccccaacccccccccaaaccccccccccccccccccacaaacccccccccaaaaccaaacccccccccccccccaac
abccccccccccccccccccccccaaaaaacaaaaaaaaaaccccccaaccaaaaacccccaaaaccaaaaccccccccccaaacaacccccaaacaaacccaaccccccccaaaaaaaacccccccaaaaakkkkkkcccccccccccccccc
abccccccccccccccccccccccaaaaaccaaaaaaaaaacccccccccccaaaaaaccccacccaaaaaccccccccccaaaaaaccaaaaaaaaaaaaaaaccccccccaaaaaaaaccccccccaaajkkkkkkkaccccccaacccccc
abcccccccccccccccccccccccaaaaacacacaaaccccccccccccccaaaaaaccccccccaaaacccccccccaaaaaaacccaaaaaaaaaaaaaaaaaccccccccaaaaaccccccccccjjjkkkkkkkkccaaaaaacccccc
abcccccccccccccccccccccccaacaacccccaaacccaccccccccccaaaaaaccccccccaaaacccccccccaaaaaaacccccaaaaaacaaaaaaaacccccccaaaaacccccccjjjjjjjooopppkkkcaaaaaaaccccc
abcccccccccccccccccaacaacccccccccccaaaaaaacccccccccccaaaaacccccccccccccccccccccccaaaaaaccccaaaaaaccaaaaaaacccccccaaaaaacciijjjjjjjjoooopppkkkcaaaaaaaacccc
abccccccccccaaaccccaaaaacccccccccccccaaaaacccccccccccaaaaccccccccccccccccccccccccaacaaaccccaaaaaaacaaaaacccccccccaccaaaciiiijjjjjjoooopppppkllcaaaaaaacccc
abccaaccccccaaaaacaaaaacccccccccccccaaaaaacccccccccccccccccccccccccccccccccccccccaacccccccaaaacaaaaaaaaacccaaccccaaaaaciiiiinoooooooouuuupplllaaaaaacccccc
abcaaacccccaaaaaacaaaaaacccccccccccaaaaaaaaccccccccaacaccccccccccccccccccccccccccccccccccccaccccccccccaaccaaaccccaaaaaciiinnnooooooouuuuuppplllaaacacccccc
abaaaaaacccaaaaaacccaaaacccccccccccaaaaaaaaccccccccaaaaccccccccccccccccccccccccccccccccccccccccccccccccaaaaacaacaaaaaaiiinnnnntttoouuuuuupppllllcccccccccc
abaaaaaaccccaaaaacccaaccccccccccacccccaaccccccccccaaaaaccccccccccccccccccccccccccccccccccccccccccccccccaaaaaaaacaaaaaaiiinnnnttttuuuuxxuuupppllllccccccccc
abaaaaacccccaacaaccccccccccccccaaaccccaacccccaacccaaaaaacccccccccccccccccccccccccccccccccccccccccccccccccaaaaaccaaaaaaiiinnnttttxxuuxxyyuuppppllllcccccccc
abaaaacccccccccccccccccccccaaacaaaccccccaaacaaaaccacaaaacccccccccccccccccccccccccccccccccccaacccccccccccaaaaaccccaaaccciinnntttxxxxxxxyyvvvqqqqqlllccccccc
abaaaaaccccccccccccccccccccaaaaaaaaaacccaaaaaaacccccaaccccccccccccccccccccccccccccccccccccaaacccccccccccaacaaaccccccccciiinntttxxxxxxxyyvvvvvqqqqljjcccccc
abccaaaccaccccccccaaacccccccaaaaaaaaaccccaaaaaacccccccccccccccccccccccccccccccaacccccccaaaaacaaccccccccccccaacccccccccchhinnnttxxxxxxyyyyyvvvvqqqjjjcccccc
SbccccaaaacccccccaaaaaacccccccaaaaaccccccaaaaaaaaccccccccccccccccccccaaccccccaaaaccccccaaaaaaaacccccccccccccccccccccccchhhnnntttxxxxEzyyyyyvvvqqqjjjcccccc
abccccaaaacccccccaaaaaaccccccaaaaaacccccaaaaaaaaaacccccccccccccccccccaaccccccaaaaccccccccaaaaacccccccccccccccccccccccccchhhnntttxxxyyyyyyyvvvvqqqjjjcccccc
abcccaaaaaaccccccaaaaaacccccaaaaaaaccccaaaaaaaaaacccccccccccccccccaaaaaaaacccaaaacccccccaaaaaccccccccccccccccccccccccccchhmmmttxxxyyyyyyvvvvvqqqjjjdcccccc
abcccaaaaaacccccccaaaaacccccaaacaaacaaaaaaaaaaccccccccccccaaacccccaaaaaaaaccccccccccccccaacaaacccccccaacaaacccccccccccchhhmmmtswwwyyyyyyvvvqqqqjjjjdddcccc
abcccccaacccccccccaacaacccccccccccacaaaaaccaaaccccccccccaaaaacccccccaaaacccccccccccccccccccaaccccccccaaaaaacccccccccccchhhmmssswwwwwwyyywvrqqqjjjjdddccccc
abcccccccccccccccccccccccccccccccccaaaaaccccaaccccccccacaaaaaacccccaaaaacccccccccccccccccccccccccccccaaaaaacccccccccccchhhmmssswwwwwwywywwrrqjjjjddddccccc
abcccccccccccccccccccccccccccccccccaaaaaccccccccaaacaaacaaaaaacccccaaaaaaccccccccccccccccccccccccccccaaaaaaaccccccccccchhmmmsssswwsswwwwwwrrkkjjddddcccccc
abccccccccccccccccccccccccccccccccccaaaaacccccccaaaaaaacaaaaaccccccaaccaacccccccccccaaccccccccccccccaaaaaaaacaacaaccccchhhmmmsssssssswwwwrrrkkjddddaaccccc
abcccccccccccccccccccccccccaaaaaccccaacccccccccccaaaaaacaaaaacccccccccccccaacccccccaaaaaacccccccccccaaaaaaaacaaaaaccccchhgmmmmssssssrrwwwrrrkkddddaaaccccc
abcccccccccccccccccccccccccaaaaacccccccccccccccccaaaaaaaacccccccccccccccaaaaaaccccccaaaaaccccaaccccccccaaacccaaaaaaccccgggmmmmmmllllrrrrrrrkkkeedaaaaccccc
abcccccccccccaaccccccccccccaaaaaacccccccccccccccaaaaaaaaacccccccccccccccaaaaaaccccaaaaaaacccaaaacccccccaaccccaaaaaaccccggggmmmmllllllrrrrrkkkkeedaaaaacccc
abcccccccccccaaacaacaaaccccaaaaaaccccccccccccccaaaaaaaaaacccccccccccccccaaaaaaccccaaaaaaaaccaaaacccccccccccccaaaaaccccccgggggglllllllllrrkkkkeeeaaaaaacccc
abcccccccccccaaaaaacaaaacccaaaaaaccccccccccccccaaacaaaaaaccccccccccccccccaaaaaccccaaaaaaaaccaaaacccccccccccaaccaaaccccccgggggggggffflllkkkkkkeeeaaaaaacccc
abaccccccccaaaaaaaccaaaacccccaaacccccccccccccccccccaaaaaacaccccccccaaccccaaaacccccccaaacacccccccccccccccaaaaaccccccccccccccgggggffffflllkkkkeeeccaaacccccc
abaccccccccaaaaaaaccaaacccccccccccccccccaaaccccccccaaacaaaaaccccccaaacccccccccccccaaaacccccccccccccccccccaaaaaccccccccccccccccccaffffffkkkeeeeeccaaccccccc
abaaaccccccccaaaaaaccccccccccccccccccccaaaaaacccccccaaaaaaaacaaaacaaacccccccccaaaaaacccccccccccccccccccccaaaaaccccccccccccccccccccaffffffeeeeecccccccccccc
abaacccccccccaacaaaccccccccccccccccccccaaaaaaccccccccaaaaaccaaaaaaaaacccccccccaaaaaaaaccccccccccaaccccccaaaaacccccccccccccccccccccaaaffffeeeecccccccccccaa
abaacccccccccaaccccccccccccccccaaccccccaaaaacaaccaacccaaaaacaaaaaaaaacccccccccaaaaaaaaccccccaaacaacccccccccaacccccccccccccccccccccaaaccceaecccccccccccccaa
abaacccccccccccccccccccccccccccaaaaaacccaaaaaaaaaaaccaaacaaccaaaaaaaaaaaaacccccaaaaaaacccccccaaaaaccccccccccccccccccccccccccccccccaaacccccccccccccccaaacaa
abcccccccccccccccccccccccccccccaaaaaccccaacaacaaaaacccaaccccccaaaaaaaaaaaacccccaaaaacccccccccaaaaaaaccccccccccccccccccccccccccccccaaacccccccccccccccaaaaaa
abcccccccccccccccccccccccccccaaaaaaaccccccccaaaaaaaaccccccccccaaaaaaaaaaccccccaaaaaaccccccccaaaaaaaaccccccccccccccccccccccccccccccccccccccccccccccccaaaaaa

%% 2022\day12\test.txt
Sabqponm
abcryxxl
accszExk
acctuvwj
abdefghi

%% 2022\day13\day13_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;

int compare(string left, string right)
{
    auto delist = (string s){
                int depth = 0;
                int prev = 1;
                foreach (i; 1..s.length-1)
                {
                    if (s[i] == '[')
                        depth++;
                    else if (s[i] == ']')
                        depth--;
                    else if (s[i] == ',' && depth == 0)
                    {
                        yield(s[prev..i]);
                        prev = i+1;
                    }
                }
                if (prev < s.length-1)
                    yield(s[prev..s.length-1]);
    };

    if (left[0] != '[' && right[0] != '[')
    {
        return left.to!int < right.to!int;
    }
    else if (left[0] != '[' && right[0] == '[')
    {
        return cmp!compare(
            [left],
            new Generator!string({delist(right);})
            ) < 0;
    }
    else if (left[0] == '[' && right[0] != '[')
    {
        return cmp!compare(
            new Generator!string({delist(left);}),
            [right]
            ) < 0;
    }

    return cmp!compare(
        new Generator!string({delist(left);}),
        new Generator!string({delist(right);})
        ) < 0;
}

void main(string[] args)
{
    auto pairs = stdin.byLineCopy.array.splitter("");

    // writeln(compare(pairs.front[0], pairs.front[1]));

    pairs.map!(x => compare(x[0], x[1])).enumerate(1)
         .map!(x => x[0] * x[1])
         .sum
         .writeln;
}

%% 2022\day13\day13_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;

bool compare(string left, string right)
{
    auto delist = (string s){
                int depth = 0;
                int prev = 1;
                string[] ret;
                foreach (i; 1..s.length-1)
                {
                    if (s[i] == '[')
                        depth++;
                    else if (s[i] == ']')
                        depth--;
                    else if (s[i] == ',' && depth == 0)
                    {
                        ret ~= s[prev..i];
                        prev = i+1;
                    }
                }
                if (prev < s.length-1)
                    ret ~= s[prev..s.length-1];
                return ret;
    };

    if (left[0] != '[' && right[0] != '[')
    {
        return left.to!int < right.to!int;
    }
    else if (left[0] != '[' && right[0] == '[')
    {
        return cmp!compare(
            [left],
            delist(right)
            ) < 0;
    }
    else if (left[0] == '[' && right[0] != '[')
    {
        return cmp!compare(
            delist(left),
            [right]
            ) < 0;
    }

    return cmp!compare(
        delist(left),
        delist(right)
        ) < 0;
}

void main(string[] args)
{
    auto pairs = stdin.byLineCopy
                      .filter!(x => x != "")
                      .array
                      .sort!compare;

    auto s = pairs.find("[[2]]");
    auto e = pairs.find("[[6]]");

    writeln((pairs.length - s.length + 1) * (pairs.length - e.length + 1));
}

%% 2022\day13\in.txt
[[[[10,6],3,[9,6,7,9,7]],[[2,4,10,7,1],[7,9],[8,2,9,9,2],5,[1]],5,[]],[[[8,6,6,9,1],1],[7,[8,3],9,4,[0,3,10,9,7]]],[[[10,1]],0,[],[[4,1],[3],[10,6,4],10]],[8,[7],2,9],[[],2,[[3,6,3,6],4,[8,7,4,7,2],3]]]
[[8,9,[[]]],[],[]]

[[10,8]]
[[[[4,1,5,2],[2,9,0,7,10],[7,0]],0,[],[7,10,6,[2,10,0,10]],0]]

[[[4,7,[],3,[]],5,2,[]],[10,6,9],[3,6,8,[]],[3,[[3,1,6,0],9,8]],[[0,3,1],0,6,[4,9]]]
[[[[7],5,10],5]]

[[2,[],[10]],[9,1,[5,[4,5,0],[6,3,3,3,2]]],[[[6,0,2,7]],[10,6,[]],10,8]]
[[0,[4,7],10],[4,8,0,4,6],[],[[[5,10,0],10,[9,5],9],4,[3]],[[],0]]

[[],[[[8,6,8],[6],3],1,4,[[7,4,9,1,10],[3,10,5,4],[6],8],5]]
[[],[0,[0,3,2],8,10],[9,[[],9,6,[]],10,[]],[9],[[[9,5],4,5],[[7,2],[7,1,1]],6,[]]]

[[6,[6,[7,3,8,8,8],[0,1]],0,[[10],[1],[6,10,10,3,4],6],[[10,3,1,9,0],[8,10,3],1,[8,9]]],[9,[4,[10,10,7,7],5,[4]],[],2],[6,[[7,8],2],[[2,8,6,6],[8,4,5,3,4]],3],[[1,[],[6,1,0,8,5]],[6],[5],0]]
[[[9,[],0,[0,1,0,6,6]],[6,7,9],[8,7,0,3,[5,6,3,0]],3,[[0,0,10,1],[6],8]]]

[[[[2,0,3,3,6],8],[[9,5,2,6,7],[2,4,9,6,8],3,5],[[2,4,9,7]]],[2,[4,[]]],[[6,[3,9,7,5,0],[0,7,8,6],[6,6,7],[0,7,2,5]],[[2],[10],5],9,6,[10,[],0,[4,8,7,5],[10]]]]
[[3,[]],[[3,0],5],[3,1,[[8,3],6,[9,3,10]],[[1],7,8,8],3],[]]

[[[5],[[8],5,[0],6],3,5]]
[[],[[[],[8,4,1],0]],[]]

[[1,[[0],7,[0,8],4,[]],8,[3,5,[2,4,9,6,3],4]]]
[[5,[[],7,[7,10,1],6,0],4,[[0,8,7,9],4,8]],[2,[4,[2,8,4,1,1],[5,7,6,10,2],10,[4]],0]]

[[6,[2],[[6,9,2,3]]],[],[6,8],[],[[4,10,3],2,5,[[8,4],[6,0,2,2],[0,1]],5]]
[[[[5,3,6],[4,9],10,7],1]]

[[],[[8,[8,1,3,9,1]],0],[4,3]]
[[[1,[10],9],[[3,10],[2,2,6]],[],[[7],6],[8,1,[0],7,[10]]],[],[0,[2,9],[0,1,5],8]]

[[[],[9,9]]]
[[],[],[6,[[7]],2],[8,9,2,0,[8,8,[0,3,0,3],9]],[]]

[[[]]]
[[2,5,[0],6],[[2,[8,3,1],5],[],[0,[2,3],6,[],6],[[8,1,8,10,5],[5]],[10,2]],[]]

[[[[1]]]]
[[[],[2,[8,5],2,[0,8]],4],[[[6],7,8,[]]],[[]],[],[6]]

[[[],0],[[2,[],6],3,[8,[5,9,4,3,3]],2,[1,10,[1]]],[[0,[1,5,2,3],7,1],[10,7,[5,3,2],5],[[9,7],10,1,[4]],[9,[3,5,0,5],[1,10]]],[[7,4,5],[[5,5,5,0,4],[7,3,8,5,3],[2,0,10,0,4],4],8,[8,[]]],[2,9,0]]
[[]]

[[],[1,[4],[[7],[1],10,5,8],10,8],[2,[],[[],[],2,[9,7]],9,[2]],[[2,[10,7,5,8,0],4],2,[7,[5,5,8,7,9],0,[],[9]]]]
[[1],[],[9,[9],[2]],[[[6]],[],1,[],4]]

[[[[],10,[10,10,0]],[[9],[8,6,9,0]],9,[]],[3],[5,6,[4,1,7,[7,6,3,1,4],8]]]
[[[3,5,[1,7],2,[6,4,0]]],[]]

[[3,[],1,[],5],[[0,[1]],[6,[4,2,3]],[[],5,[6],[8,9,6,10]]]]
[[],[[[0,10,9],6,[8,0]],2,[[5,3,3,4,7]],[2]],[[10,[8,3,9],[2,2,2],[2]],[2,3,8],9]]

[[],[],[[[1],5,2,[7,8,9]],8,[],2],[7]]
[[1],[[10,[0],9],3,[],2],[0,[[8,1,7,6,10],[7,1,8,10,2],10],1,[0,10,10,[5]]],[[[],[4,3,6],[8,4],[2],[9,6,2]],9,7,4]]

[[4,[2,8,5,0],[2,3,6,[2,3,4,0],[6,5,4,1,1]],5],[]]
[[],[4,6,0]]

[[],[[[7]],[7,[9],[8,0,7,7],1]]]
[[[10,2,3],[3,3,[]],[],3,[10,[2,8],8]]]

[[[6,[1,3,4],[6],7],[1],7,[[1,2,0],5,[7],0,0]]]
[[1,[5],10],[9],[[[3,10,8,5],[9,2,7,6,4],8]],[[7,1,7],8,1,[],4],[[[1,3],[8],[1,3]],[[4,8],5,10,6,[10,10,3,10]],7,[3]]]

[[[[2,2,8,4,2],0,8,3],8,1,7],[[4,[]],[5,8,6],[[9,6,4],4],[7,[4,8,0],8,8],[]],[10,2],[4,[3],[7],[[3,1,9,10],[10,0,3]],[3,[7],9]],[3,[5],[[6,9,4]]]]
[[10,0,0,[4,2,[3,9,0],9]],[10,[[0]],5],[[[6,1,6],4,[8],7],0,[[10],[7,3,3,6,4]]]]

[[[],9,[7,[6,3,1,10,9]]],[],[7],[7,[],[[],[9,0,8,5,3]]]]
[[8],[[[8],7],[1,[4],[7,6],10,10]]]

[1,0,9,5,8]
[1,0,9,5]

[[[5,[],[2]]],[9],[7,9,[4,2,0,[0]],4],[9,[3,2,0,[6,5,6,1,8],[]],3,10],[10,10]]
[[],[[],0,3],[2,[3,[2,7,3,6,9],[8,1,1,6,0],[10,9,8,8,4],6],9,[[8,8,6]],[]],[6],[[[],5,4,6,[]],7,[10,6,[7,8,0],[1,4,4]],[[6,10,0,7,0],9,[6]],[5,9]]]

[[6],[4],[8]]
[[[],3],[[3,[3],[9,8,2,1],[0,9,3,7,7],[]]],[0]]

[[],[[8,[3,3,2,6,4],[],10],10,0,[[1,1,6,9]],[0,[5,9,10,3],2,1,7]],[[[]],[[10,4],[3,4]],[[],[6,7,6,6,7]],2],[4,8,[[8,0,4],10,[3,3]],[5,2,[0,1,2,1,2],[0,4],[]]],[6,[7],[[9],[],[],0,4],2]]
[[[[],[5,9,8,0]],[4]],[4,2],[[[8,7,4,4,2],6,2,7],7,7,7,4]]

[[],[8,[[4,6,4],[4,3,2,0]]],[[[10,2,9,9],[7],[6,4],[9,8]],[[1],[],3,[7,5,9,0,10],[10,6,3,9,4]],[[9,5,0],0,[]]],[0,[3,[0,9,5,10,4],10,2,3]],[[[6],6,[5,0]],8,4]]
[[10],[[],[[5,9]]],[8,3,1,7,4],[8]]

[[[5,1]],[]]
[[[6,10,[2]],0,[8,[]]],[10,[[10,4,6,4,1],2,2,[6,2,9,5,2],[]]],[[[],8,10],4,6],[[[3,3,2,7,4],2],[10],[7,6,[3,4,8],[7,1],[2]]]]

[[2],[5]]
[[[[]],6,4],[]]

[[3,8,7,4]]
[[9,[[10,2,9,9]],[1,[0,2,1,4,10],0],10],[[[],5,2,[1,7,3,3]],[[9],4,5,9],[]],[],[[[8,6,6,7,0]],[[3],0,[1,2]],[[8,5],9,[10,9],7],3]]

[[4,[[]],[[8,10,9,7,6],6,[4]],10],[[]],[[[2,9,0],9,7,[0,6,8,4],[7,7,8,2,8]],[0,[1],[1]],[10,[1,10]],10],[]]
[[6,[9,9]],[[5,[9,1,9],[]]],[],[5,[[0,1,7,8],[9,1],2,5,3],10,6],[]]

[[7,[2,0],[[9,2,1,10,1],1,[10,2,9],0]],[[8],1,7,7],[0],[[9,7]],[5,[4,[],5,[2,7,1,9,5]],[],[],3]]
[[6,10],[5,9],[6,4]]

[[10,[[8],[1,7]],[[],[3,5,0,2,2],[4,7,1],[6,8,5]]],[[[5],8],[3]]]
[[],[],[3,[3,[10,2,9],[7,10,0,7],3,1],5,[9,10,[],[0,2,10,6]],6],[7,[],[[10,2,8,10,5],8,[0,2,5,2,8],[8,8,1],[0,5,7]]],[5]]

[[[8,[8,7,8]]],[2,[3,[]],4]]
[[8],[2,[[]],2,[]],[9,5]]

[[[],[1,8,[2,10],[8,1,10]],[[5,6],8,4,8]],[[0],[[9,0,7],7,9,10,1],[[5,9,0],2,8,[4,8,8,3]],5],[[7,9,[1,10,4,3]],7,[7,3,1,[9,8,0,4]]],[[],2]]
[[[],5,10,5,4],[[7,[6],4]],[[9,[6,0,5,10,9],[2,3,6,0]],[0,6,2]]]

[[[3,4],[[2,4],[5,9,1,6,8],[7,10],3],[9,3],9],[[[1],7]],[[4,[6,3],[],4]],[1,[[],[0,0,4,7,7],1,6]],[[[8,9,5,3],9,4,9],8]]
[[[4],[3],[8,[2,6,5,10,8],2,[3,6,7]]]]

[[],[],[],[2,[[3],7,1,3,[]],[[4,8,7,0,10],0,[5,9]],0,[3,[3,8],0]]]
[[3,[3,[0],[2,10,9,9,8]],[10,[6,5,9]]]]

[[6,[]],[1,4,[[9,6,3,4,4]],[[10]]],[[9],8,8],[[[2,2,7,0,9]],10,[7,[2,8,1,0],[2,8],9,[3,4,10]],7]]
[[[5,[],6,8,10],[]],[1,[2],[[3],10,[2],[7,4],6],[7,2,2,[0,4,7]]],[5,[3,[0],[8,8,2],[]],[],2,[0,1,[9,8,8,9],[3,0,10,10]]],[8]]

[[],[2,10,[[6,4,3],[2],8]],[3],[]]
[[4,1,[0,[10,2,4],[0],[8,7,7,5,9],1],1,[]],[],[[1,1,[4,4,3,9]],[[1,7,4],8,[5,7,6,6],[2,9,0]],5,5,[[7,8],[5,4,6],[6,1,7],[6,2,6,6]]],[6,[],4,[[2,7,6],8],7]]

[[3],[[[8,5,2,4],[],3,1],5,[[],[6,8,7,6],[],[2,1]],6,6]]
[[],[8]]

[[[],[[10,8,10,2]],[],[[8,8,10],[6],[]]],[10,1,1]]
[[[5,2,[4,10,4]],[5,8,[7]],[4]],[3,[5,[6,5,8,7,2],[9,0,3,6],[2,3,6,0],10],0],[1]]

[[[4,[],8,[7,5,8,7],9],[[2,7,7,9]],3,[],8]]
[[5,[7,6],[1,[],10],[[9,9,3,2]]],[],[3,8,8,9,8]]

[[[[6,0],5,[5,6,8,0,10],1,6],5,4,1],[[[2,8,1,8],[],3,[6,8,4,1,10]],[0],[[8,1],10,[],5],[[],[],[4,2,9,0,9],[1,2,4,6]],4],[],[[[8],1,2,4],0,[5]],[[[4,4,9,9,4]],1,7,[1,1],5]]
[[4,[[10,4]],[]],[6,[[],1],[[10,1,0],[5],[3]],[[3],[8,7,9,1],7,9]],[9]]

[[9],[]]
[[10,[3],[6,5,0,[7]],8]]

[[1,0,8,9,2],[[9,1,7,[4,10,3],[]],[[0,6,9,1,6]],6],[10]]
[[1,0,[[],[6,0]],[[5,9,0,7,4],[1,9],4,0]]]

[[[[8,7,9],[5,1,10]],[7,[4,6,6]],5,2,4],[[[2,5,2,6,0],[2,0,9,4,7],2,[3],[2]],2,1,6,8],[[[2,3],10,2,[7,4,10]],2,1],[[[4],9,[],[4],[2,8,6,6]],1],[]]
[[[[],0,[4,9,10,5,1]],[1,2,2,8,8],[4,[5],0,[7,1,3,0,3],[3]]],[0]]

[[4,8],[7,4],[[[2,0],[9,4,10,4,3]],4,[[2,2,2,9,5],8,[10,3,8],8]]]
[[3,[],6,0],[[]],[],[3],[0,[0,1,[5,1,3]],6]]

[[[[0,0,2,3,10]],2],[[3,8,[5,5,8,6,0]],[[1,8,6],10,0,[0]]],[[[2],1],0,[5,7],0,0],[[],[5,2,6,1,[6,7]],3],[]]
[[[6,[],7],7,5],[2,10],[2,[0,7,3,8],[[],[7,9,8,1]],[4],[[],9,[1,8,3,2]]],[6,7,[[5]],3,0]]

[[[[],8,[9,5],[2,7,3,7,6]],[4],4,[],6],[],[],[[[3],[9,0,7,6],2],[6,3],9]]
[[2,[[7,1]],[1,9]]]

[[9,8,1,[[],[5,8,9,4,1],2,[6,9,9,2,7]]],[[9],10,5]]
[[[3],[[0,2,9],2,5],7,[[],2]],[],[[10,4,[7,0,1],5],[5,[9,6,6,6,7],[2],9],7]]

[[[[3,6],[3],[8,10,7]],7],[8,3,2,1],[6,4,3,[],[0,[10,3,2,9]]],[0],[]]
[[[[2,10],[3,7,8]],[[3,2,5,7],0,3]],[],[],[]]

[[[[3,6,9,7],3,6,2,[]],[7,10,[10,1,3,8],[]],1,9],[[[2,8,0]]],[7,[[6],8,1,9,[7,2,1,0,7]]]]
[[7,[5,[5,5],[6],[3,6],6],5,[3]],[6]]

[[3,[7,[2],[10,10],8],8,[0,[6,4,1,9,9],[],2]]]
[[[1]],[8],[10],[9,[2],1,[[6],[8,3,1,0]],[[8,3,7,8],6,3]]]

[[[7,2,[5,8]],0,[[1,6,9,8],[2,7,9,9]],10]]
[[[6,4],9,[[5,3,3],[0],1,3,7]],[7,[5],[[10,1,6,2],[]],0],[],[6,[],5,5,[2,1]]]

[[6,6,[],1,9],[[],[7,5,[],[4,1],[3,6,1]],[[7,3,0,7]],[[0,2,6,9],6,[8,2]]],[4,[[],6,10,[]]],[]]
[[6],[4,[[1,5,10,6],[5,1],7]]]

[[1],[5],[[],[0,[],[3,8],7,[4,9,1,3,3]],10,[[1,6,4,8,2],[4]]],[],[]]
[[8,[[3,9],[3,8]],[[1,3,6]],7,0],[[4],8,[[],[0,8,8,10,10],[10]]]]

[[[],[[2],[1,0,6,1,7],4,[8,1,6]],[10,1,[9,7,0],[2,0,10,9,1],8],[]],[8],[8,[[8,9,5,0],4,10,[3,8],[9,1,8]]],[0],[7,5,[],0,[]]]
[[],[],[[[8],[]],7,10],[[[9,4,5],9],6]]

[[[[7,4,9,2]],9]]
[[1,8,[]],[[3,8,2,0,1],[7,5,3,[6],[9]],[8,[1,6,10],[2,4,2],10],[[10,1,3,8],8,[10,0,8,8,7],5]],[[[7,0],[]]]]

[[[[],3,3,0,0],[]],[[]],[[[4,0,2],[6,2,9],[2,5]],[[3,6,6],[2,0,5]],[[1,3],[]],10,[6,[],10,[9,6]]],[[1,10,0,6],[[8,0],1,0,[0,7,2,7,9],[7,7,9]]],[[[1,9],0],[[5],[7,4,3,10],[4,6,0,1],[0,5,10,1]],[],5]]
[[[4,4,[],[]],4,[[5,9,4,3,4],3]],[],[1,9,8,[[2,3,7,8],[2,1,3,3],[]]],[10,[]]]

[[7,[[]],3,[],[[2,6]]]]
[[3,[1,[2,6,9],[10,2]]],[[[1],[2,3,0,6,7]],[[1,10,0,7,4],[8,8,8,10],10,[0,9,3]],[],[4,[1,2]]]]

[[1,[[],[2,6,0,5,7]],8,[],6],[],[[],[10,[],8],[[10,5,7,9,9],[0,3],9,8]]]
[[1,1],[[6,9,1,[1]],8],[7]]

[[[9,[3,8,9],2,[5,10,0,1,10],[6,5,4]],[3,[9,2]],5,4,6],[[[8,3,8,5]],[[5,7,2,4],5]],[10]]
[[10,[2,[2,0,10]],3]]

[[[],[[1,10,1],[1,9],[0,1,3,3]],[4,1,[1,2,4,3,8],[8,10,10,3],6]],[3],[[[9,6,3]]],[8]]
[[[3],[[7,2],[3,10,2,7]],9]]

[10,7,9,4]
[10,7,9,4,1]

[[[[7]],9,[[6,6],[6,10,9,3],[3]],[2,[10]],[4,[5,0,5,0],[6]]],[[0,9,4,[2],0],[1,[3,8],1],3],[0],[[],[]],[[[8,3]],[10,[8],4,10],[[],[10,3],8]]]
[[],[8,[[10,10]]],[[],[0,6,7,[6,5,3,9]],8,[],1],[1,7,[[1,3,10,5,0],[1,7,6,0,4],9,[7,2],[8,5,4]]]]

[[8,6,[[],9,3,3,[10,6]],7],[6,[]]]
[[9,0,[[3],3,0,[0,2,9,10,5],5]],[[[8],8,[6]],[[5,3,6,10,9],4],[[6],[10,1],[3,9,6]],7],[[[9,6,1],3],5],[[4,0,[2]],[[],7,[2,4,7,5],8],[],[[],[],[0,6,4]]],[[[3,3,8],2,[3,0,1],[5,3,4]],[[7],4,[2,3]],3,[[3,5,8,8,6],4]]]

[[5,8,[],[[],[5,1,9],7],[[10]]],[7,[[4,7],10,1,2,3],9,[[8,3,6,9],[9,7,5,4],4,[]],[[],5,[5,8,0]]]]
[[5,[4,[8,8,5,7],5,5]]]

[[[6,5,1,6,6],4,[5,[0],7,1,10]]]
[[[[3]],[6,6],6,[[7],5,[2,1,0]],[]],[10,[[0,5],[1,3,0,7,9],[2,8,2,10,8],[]],[[10,2,6,1]],6]]

[[10,1,7],[[[10,1,9]],[[6,4,9],5,9],[[6,5,9,3],8,[8,10,9,0],3,[5,6,8,1,9]],4,[]],[10,[[3,6]],[9,4,[3,8,9],[7,7,4]]],[],[[],[],[[8]],0]]
[[5,6],[10],[4],[1,9,[[1],0,[2,3,10,3]],10],[]]

[[[[1],[2,0,4]],[[7,3,8]]],[]]
[[],[[],3],[3]]

[[[]],[[6,3],7,4,3,2],[9,[[7,5,9,4],7]],[],[]]
[[5],[2,4,[4,[10,8,1],[3,9,1],[],4]],[[]],[[[3,5,4]],[[5,8],[6],[],[9,3,2,7,2],[1,5,5,1,8]],[8,[7,2,4],6],[7],1],[1,1,[[2,8,6,9,0]]]]

[[1,6,8,8],[[[1,5,3,8,3],5,[5,2],[7,6],6],[]],[[[10,9,9,1,4],[6,9,1],6,8,6],4,[7,[8],1,3],4,10]]
[[[[1,2,1],[6,7,5,1]],[[7,5,0,3,5],9,0,[9],6]],[9]]

[[[5],4,10]]
[[5,8,2],[2]]

[]
[[2,[[10],[1,5,4,3],[]],10,5]]

[[0,[9,5,0,3,8]]]
[[[2,[5],[9,7,9,8,7]],0],[[2,0,5,10],7,[[1,8,10,9],[9,2,6],7,[],4]],[]]

[[6,5,3,[7,2,[1,0,6,7,6]],[10]],[[[10],[8,4],[0,1]]]]
[[[],[9,[10]]],[[[5,4,3,4],1,1,[4,8,3]],[2,5]],[2,[[0,6,3,3,9],4,[0,5]],[2,8],[[10,2],6,[1,6]],[[8,0,6],8,0]],[[[7,4,1,4],[0,7]],8,[],[[10]]],[[1,[8,10,1,2],[1,10,5,2]],1,7,7,6]]

[[[],10]]
[[1,[[0,5]]],[1],[[]]]

[[9,1,[]],[[[],[9]],2,[]],[[[5,8,5,10,9],8,[],[0,7,0,4,10]],[],[[8,1,10],[9,10]]],[1,[3,[3,4,8,9,10],[]],7,[1,3,6,9,[0,0,5]],6]]
[[[6,5,[10,7,0],[1,2]]],[4],[],[[0,7]],[4,[[9,0,6]],6,5,[9]]]

[[[[6]],2,[[],2],4],[4,9],[5,4,0,[4],[10]],[],[[8,7,3,10],9,10]]
[[0,[6],6],[[],[8],[],3,4]]

[[],[[],4],[[1,2,[1,9,5],1],[7,[],[]],8,6,[]],[[8,[8,5,4,0,9],[10],[8,2,1,3]],[[5,1],10],1,8]]
[[9],[[[],0,4,5],4,[8,[],4,10]],[[[4,8,4,2],6],[[9],[]]],[2,[]]]

[[[[6,6,5,7],10],[3,[],[0,0,8,1,8],[10,4]],[[5],8,[3,5,8],2],[10,[8,0,4,9],1,[3,4,8,6],[8,6]],[[9,8,7,6,1],[1,6],3,8]],[[9,4,4],[[10],[],[2,5],[9,7,4,3,2]],[[6],5],[6,0],[[3,4],10,[5,2,4,7],[5]]],[3],[[[3,0],3,[5,4,8,0,8]],9,1,2,[[0,8],[3,9],8,6,6]]]
[[3]]

[[[[1],10,[3,6,3],[9,8,3]],0]]
[[0,[9,[8,8,1,9],3],3,7,7],[3,[3],6,2,1],[],[[0,[0,9,10,7],[9],0],[2,4,3,[4,5,1,3,9],10],3,2,[[],9]],[[0,[10,6,3]],[],2]]

[[2,[],[10,[7,6,3,5]],3,[2]],[0],[9,[6,10,10,0,10],1,9]]
[[[[9,6,4,6],[0,10,3,5,3],2,5,9],[[10],4,9],[9,6,8,2,1],4,6],[[[6,1],[5,9],3,1],[],[[1,4],[],6,7,[1,4,6,1,3]],6,2],[0,5,[[10,5,10],[2,8],[3,4],10,[6,4,8,6]],2,5]]

[[7,[8],[[9,9,7]],6],[[[3,3,8,5,3],[],[3,3],[2,3,8],8]],[4,9,[7,5,[1,5,2],4,[9,6]]]]
[[],[9,3,[[7,3,5,4,7]],4],[],[[],2,[[1,10,3]],[8]]]

[[8,1,1,[1,0,[2,4],8,[]],10],[2,9,1,10,1],[[[],0,1,[9,1,8],3]],[8,[]],[1,[5,[],[10,4,8,10]],[[8],5,[],3,[7,0,4,9,0]],9]]
[[],[[[2,8,5]],10,[[6],10],[[3,10,9,5],0,10],0],[10,6,[10,9,9]],[10,3]]

[[6,[[4,0,7,4],[10,1,1,9],[],1,1]],[[],6,3]]
[[[3,1,6],9],[1,0,[5,[5,4]],[[2,5],[0,3,4],[],9],[]],[1,3,[[2],0,[4,1],[4,2,9,0,6],2]],[10,2,7,[9,[],[2,1,1,4,2]]]]

[[[9,3,[0,0,2],9]],[6],[[[10,4],[3,5,10,7],6,2,[6,1,3]],7],[[7,2,4,3,4],5,[5,5,[2,8],[9,2],7]]]
[[3,7,4,[[8,7],0,4,2],3],[],[2,[[5]]]]

[[9,[1,10,[2,3,0]],[],2],[[10,1]],[]]
[[0,5],[0,[[9]],[[2,5],4,[],[4],2]]]

[[[6,9,[7]],[8,[9,8,9,1],8,5],[],[]],[[[8,1,8,8],1],[],9],[[[],5,[3]],[[6,6,2],5,[]],[[4,7,7]],[[5,5,10,8]],[1,[9],1]]]
[[[1],6,[[3,9,0],10,[9],2,3],[6,[],[2]],[]],[8,5,[4,[0,5]]],[2,6,[[7,5,8,3,7],[2,10,6],[1],[],5]],[5,7,[[8,6,10,10],[],5],6],[]]

[[[],[[6,8,6]],[9,10,[8]],[4,4,[2,1,6,1,10],2]]]
[[],[],[],[[3,[]]]]

[[],[4,[5,4,[2,9,6],[8],4]],[2,[2,[],4],[8,4],[8,3,[6,1,6,8],7,2]],[[[],0,[4,2,6,4,3],[],[]]]]
[[7,[[],[1,8],[9,0,1,10,10],5],9,[1,[10,0,2,8,9],2,7,4]],[[4,6,[2,6,9,10],[4]]],[[[8,3,4],6,[2,10,1]],[0,9,[8],4,5],4,5],[2]]

[[9,[[9,5,4,0,10],3,7],[[9],[],[4],[6,8,9]],6],[[9,8,2]],[6]]
[[[1,[7],9,7,1]],[[[1,0,7]]]]

[[8,7,[[],5,[2,9,1]],[]],[1,[5,4,2],8,9,9],[7,[[5,10,0,10],0,1],3]]
[[2,7,4,8,2],[10,8,[4]],[[[],[6,0,3,5,10]]],[[2,[]],9,[]]]

[[9,[[8,7,3,7,2]],10]]
[[],[]]

[[[[4,8],[4,2,0],8,3],8,6,[]]]
[[[[8,2],7,2,[10,1,4,2],9],2,9],[8,[7],0],[],[6,6,2,[0,[1,3,7],[1,10,1],5]],[6]]

[[[],[[1,3,10],[4,3,0,2,3],[9],9],4],[]]
[[[7,1,4],5,[4,[6,6],0],[[],[4,5,0,4,8],3,[3,10,0,2,6],[2,4,9,1,5]],[]],[[[]]],[[[6,6,10]],[9],3,5,[4,[2,5],1,8,[9]]]]

[[[[4,2],[4,8,10,2],0,[8,8]],[[4,3,0,4],[6],9,[0,0,4,0]],0],[5,[4,[8,7,2,0],4,6,1],[]]]
[[7,[],[3,1,9,[8,8,0,5],6]],[10,[],[[4,8,9,3],[9,1],[5,6,6]]]]

[[[],6,3,[]]]
[[2,[8,[3,5,6],2,4,[9,9,8,7,2]],9,[[3,5,5,7],[6,3]],1]]

[[1,[1,1],[6,[7,8],10,6,0],0,[8,[5,5,3,9],[0,8,5,8,8]]],[[[8,7,6,1]],[],7,10],[3,8]]
[[6],[4,[],[4,[0,9,4,7,4],0,[]],[5,6,3,[1,8,6]]],[1,[],7,10,[]]]

[[[[6],[1,1,7,7,7],[1,4,4]]],[[[]],6,[2,6,5,3],[4,[8,2,7,10],9,[8],1],4],[[10,9],1,3,[[10,0,0,4],[],[1,7],7,[]]],[[4,10,6,6],8],[9]]
[[],[[[9],[3,5,2]],[0,[9,5],9],6],[],[],[[]]]

[[[[8],[0,10,6]],[4,5,5],0,8],[]]
[[[2,[6]],[[1,10,4,1,3]]],[],[10,[4],[0],[0,[0,9,8],[3,8,8,2],5,4]],[[],4],[]]

[[[5,3,[0,2],3,5]],[],[],[5,[[2],[6]]]]
[[],[[6,4],[0,[2,2,10],3],[],[]]]

[[10,[[]]],[],[[9,2],3,[[8,9,4,5,4],[0,2]],10,[]],[[[1,0,9,8],9]]]
[[6,8,[[],5,7,[0,7,1,7],[5,5]]],[[0,3,[9,2,0,2,6]],8,3,[2,2]],[9,[],[]]]

[[3,[[2,2,0,7,0],[0],8,7,[1,8,10]],[[4,8,0,6]],6],[]]
[[[5,[6,4,6],[1,8,4],8],4],[[],2,6,8,7],[[]]]

[[7,[5,5,6,[8,9,9,7,1]],[[3,8,8,8],[9,0,1],10]],[[[7,4,3],[2,5],[5,9,3]],8,10],[[3,10,9,[],10],[5,[2,10]],8,8,[3]],[7],[[[3,5,0,2]]]]
[[],[[8,10,[4,5,2,4],[3]],10,[[]],9],[[2,[7,7,10,10],[7,3,10,10]],[[1,2,5],9,6]]]

[[1,10,10,[]],[[[9]],[[5,10,0],2,[5,5]],4]]
[[8,2,[[],[2,1,7,7]]],[[6,[7,2,8,8]],[],1,[[10],[0,6,5,8,9],[10,9,6,7,0],[],[3,8,10]],[10]]]

[[8]]
[[],[[[8],[1,5,4,1],2]]]

[[[[4,5],0,8,[3,7,10,6,7]],[9,6,[1],0,5],[7,0,5]],[[]],[[3,10,[]],[0,9,8],0,[[9,4,4],5],[4]]]
[[[[10],1],[7,[7]]],[[4,10,2,4]],[[8,[0,10],[],1],[8,10,[2,8,2,4]],[8]],[3,10,[5,[0,0,7],5,10,5]],[5,5,6,0,[9,[0,2]]]]

[[],[],[[[9,10,1,9],[1],3],9,[5,[]],[[10,7,6],6,[1,3,3],[]]],[[6,[9,8,3,8,9],9,[]],[1,5,4,1,[7,8]],[[10]]],[8,5]]
[[],[0,10,0,0,1]]

[[3],[[5]],[0,9],[[]]]
[[1,9,3,[5,5,[]],4],[[[5],1],9,0,10,6]]

[[[8,10,1,3,[0,5,2,8,6]],2,4]]
[[3],[[10,[4,10,6,8,9],[10]]],[9,0,[],[[10,3,5],1]],[[[6],[4,1,7,10],[5,5,3,8,3],8,4],[[9],[10,8,6,1,7],[6,6]],8,[6,0,[4,2,5,10,0],10]]]

[[[[6,7,9,3],[],0,5,[8,4,4,2,6]],3,[],[8,[]]],[[[1,9,7,9,2]],[9],[[1,6,4,0,0],[4,0,4,4],[3,4]],3,7],[[],7,[6,5,5,4,0]],[9,[[10,7,1,2,0],[5,0,10,4],[],3],9]]
[[[5,[6,1,0],[8,0]],[10,8]],[],[7],[[[3,4,3,5,5],5,9],[5,[8,9],7,[5,7,4,0],1]],[[[],[3,2,1,3,8],[9,0]],[[5,2,1],10,0,4],[[],[3,5]],[4,10,[1,0,8,3,1]],6]]

[[10],[10],[]]
[[],[[8,[3]],6,9,[[0,10,6],[6,1,3,0],[0,9],4,2],[[1],[1],[10],1]],[5,[10,10,[4,8]],10,[8,0,9,[4,2,0,6,8],9]]]

[[[[10,4,5,9,6]],0,[6,[10,9,2,3],10]],[[[10,10,9],6,[10,2,5]],[[8,2,6],7,[3,4,2]],4]]
[[[],6,8]]

[[0,5,[[4,4],10,[],[],6]],[[[2,8],[9,3,10]],10],[],[[[],4,4],4,[[10,0,2,6],10,7,[],[3]],[7,1],[4,[7,6,1,5,5],4,4,0]]]
[[8,[0,7,[8,1],[1,4,6,4,9],[10,6]],1,[]],[],[6],[2,[[10,2,1,10,7],[1,8,10],[7,0,9]],7]]

[[[[4],2]]]
[[4,0],[1,[[1]],[]],[[10,[1]]],[0,0,[0,[6,5,7,8],[1,10]],7,[9,[3,9],[9,6]]]]

[[[8,7,[9,10,4,2,1],4,7],3]]
[[9,[9],8],[8,[1],[1],[9,[3,3,1,2,3],9,10,[4,8]],7],[[8,0,[3,1,9,1,5],2,6],10,5,3,[[8,7,5,10]]],[]]

[[[7,[]],[[10,8],[9,7,3,8]]],[[8,[],[2,0,3,6],10,[1,0,1,6]]],[0,5,[[],6,[8],1],10],[2,4]]
[[10],[7,7]]

[[],[8,8,[9,0,[],[9,6]],7,5],[]]
[[],[1],[[8,[],2],[],1,[1,9,[],3],[]],[[[8,8,10,10,1],[],[0],7],7,[[1],[4,2,10],8,[8,1],[10,8]],6,9],[1,[],9,[[7,5],1],1]]

[[[8,[5,2],[9,9,4,4],2,0],[[5,0,10],[8,6,5,1],[1,4,1,5,1]]],[[]],[[],5,6]]
[[[]],[[],[[],[]],4,[]]]

[[[],3,8,2,10]]
[[[[3,0,0],2,[9,7,2],1],9],[[],[[8,8,0,7],9,[],9],5],[]]

[[[[10,6],[8,9,2,6],[0,1,5,5,0]],1,[],5]]
[[0,[6,10,5],7,7,0],[7],[4,[5],1,[[1,0]],10],[[10,4,7,5],[]],[3,[7,[],[10,2,2,2,0],[],[0]],9]]

[[],[3,[9,[10,10,3,6,10],7,8,9],6,[]],[[10,[8],1,0],7],[],[[[1,5,6,4,5],3,1,3],[4,0,[1,1],[]],[],[[],10,8,6,5]]]
[[[5,[3,0,9,9],[]],4,5]]

[[[0,[1,10,0,4]],1,[[0,10,3,9],4,8],[[5,7,1,8,0],[9,1,10,7,2]]],[6,3]]
[[[10,10,[3,10,7]]],[6,5,[[10,1,10]],1,1],[10,[9]],[[5,7,0,[],[6,0,10,10]],1,6],[9,8,[]]]

[[8,6,6],[4,[[],6,3,1,4],[[1,2,9,4],8,2],1],[],[9],[[3,0,0,4]]]
[[[4],10,0,[],[9,[6,8]]],[[4,5,[0,3,3],6],1,[[3,2,7,1,10]],[[3],3,[]],[]],[[[3,10,5,2],[7],9,0,9],5,10]]

[[[6,[10],9],6,[1],[[9,5,10,9],4,5,[]],1],[]]
[[8,0,9,[]],[[[4,1,2,7],[9,9,8,7,3]],10,1,5,[9,3,4,4,4]],[4,[[0,6,8,6,10],2,[5,10,6,7,9],2],[[9],7,1,8],0],[[[5,8,9,3],6,10,0,6]],[[5],[[7,4],[],6],5,1,[0,[9],0,[8,7]]]]

[[2,3,[]],[[6,4,[],[10,6,8,5,8],6],[1,5,[9,0,1,8,10],[5,8,8],5],[[],[4,6,0],[3,4,5,4,4],8],[[7,6]]],[]]
[[[2],[[9,5,3,6]],[[],[5,9],[3],[10,9,4,1,7]],[4]],[[],[[],8,[2,8],3,[2,7,5,2,6]]],[],[2,[[1],[],4,[3,2,2,1,1],2],[[3,7,6,10,1],10],[[],[0],4,[4,0]]]]

[[[[]],[[5,10,1,9,4]]],[3,[4,7,[4,7,5,8,10],[],[1]],4]]
[[[[9,9,0],2],4],[[],[7,3,[10,4,5,3,5]]],[[],[6,[10],1,[]],10,1],[[]],[5]]

[[[10,[]],1,[3,[0,9]]]]
[[[[9]],[[8,5,2,1,4],[]],[]],[],[[[1],6,10],7,1,[[],[8,0]],10]]

[[[1,[5,2,1,6],[5,2,9,7,5],7],4,6],[1,5,5,[1]],[[10,[8,0,4,0,4],8],7,[4,10,4]],[]]
[[[[10,8,0,6]],10,[7],[1,10],3],[10,[8],[3,[4,4,6],[]]],[[10,3,7],[[2,3,6],7,4,[]],[3],[[2]]]]

[[9,9],[10,10,[[6,5,3,5,1],[10,7],10,[3,6,2]],2],[9],[[[9,10,4,9,2],[]],[[10,6,7],8,[7,3,6,9],[2,8,1,9,6]],[[5,4],9,5,[6,0,2,7],[]],2],[[],[0,[9,1,0],6]]]
[[],[8,[6,4,[10,8,0,8]]]]

[[1,[3,1,8]],[[],5,[[]],[5,[3,6,9],[7,5,8]]],[[1,8,1]]]
[[[[10,3,7,0,5],10],9,[[]]]]

[[],[[],[],[[],[9,9],8],[6,[3,4,5],[]]],[6,[[3,3,4,9,10],[4,4,3,5,1],7,[0,9,7],[2,2,0]]],[0,[[0,2,10,1],[],[3,10,4,4,9],[],4]],[[0,1],[8],5]]
[[],[[2,[],1,4]]]

[[[],[[6,6,0],10],[[2,4,8,10],0,[6,8]],3,10],[4,7]]
[[5,10,10,[[10]]],[1],[7]]

[[2],[1,0,[[5,5,7,4],1]]]
[[1,9]]

[[[],[8,[4,9,4,6,1],0,[1,3,4,3,0]],7,[[8],7]],[[[6,4,1,0,10]],3,[8,[1,6]],[[9,9,10]]],[10,[10]]]
[[3,10],[9,8,2]]

[[6,7]]
[[2,[10,0,[9,4,4],[5,2,5,10],4],[[4,3,3,8,6],3],[9,[6,7,4],[1,6,5,7,10],[10,1,1,9,10]],[1,10,[1,9,9,5],[8]]],[10,[4,[],[4,2]],10,9],[[[9,10,3],5,[0,7,2]],[4,4,2],4]]

[[1,10,8,[[10,0],4,9,[4,1]],[[8],[2,1,7,7]]]]
[[[[2,3,9,7],[5],[7],10,[10,1,5,2,9]],[8,[1,0,3,5],4],[5,8,[2]],10,[10,6,[5,1,3],8]],[[3]],[1],[8],[4,[9],[],3]]

[[1],[],[[3,[0,3],[],[7,7,2,1,7],[4,3,2]],[7,[5,2],4],0]]
[[[[1,4,4,5,10],[6,8,6,3,2]],[0],10,[[8,1,8],0,[9,7,0,9,6]]],[3,[6,1,[]],9,[[7,8,6,1,10],[2,1,3,3,7],[8,7,0],2],4],[5],[]]

[[[3,[7,3,10],[6]]]]
[[],[1],[9,2,[[],1,[9,6,5],9],[0,2,[8,7,4,2,8],10,[]]],[1,[2]]]

[[3],[7,7,2,[7,[10,0],[2,9,1],[7,8],[]]],[[1,6,[],[10,6,1],6],0,[1,[9,10,9,5,7],[0,6,6,6]],2],[]]
[[5]]

[[],[1,[[6,8,7,1,6],[5,0,1],[]],3,[[1,1,2,2],[2,2],[0,0,8,4,3],10,4],[5,[6,6,6,8,10]]],[]]
[[1],[[1],5,10,[[1,0,6]],0],[8,[],7,3,[]],[2,6,4]]

[[3],[2,[[6,1],[3]]],[3,3],[10],[[4,3,3],[[3,10],5,10,[]],[[],8]]]
[[0,2],[[9,[6,9,5],1]]]

[[[[6,8,0,3,5],10,[2,5,4,4,2]],1,10,[[2]]],[[6,2,[2,3],[9,3,4]],5,[0,[10],7,9,6],[]],[8,2,[8]],[[5,[10,10,9],[6,4,3,8],[1]],6,4,5]]
[[[8,1,[],[],[5]],6,7,9,1],[5,10],[]]

[[[9,[9,1,10,9,8]],9,6,0,[[0,4,6],[1],7,3,[4]]],[1,[[2,7,7],[8,4],[7,9,3,3]],[3,4],7,4],[4,7,[],[],4]]
[[[],[7],0,5],[2],[4,6,4,6,6],[8,[[],7],[6],[[],2,[],1,[2,2,2,4,1]]]]

[[[[4],7,[4],[0,8,1]],[[3,6],[8,8,7]],10]]
[[7,6,[5,8,[]]]]

[[1],[[[10],[0],[8,8,7,4,5]],6,[[9,0],[10,7,3],4,[2,4,5],[5,7,10]],[[1,5,10,10],[],[3,3,9]]],[[[0,1,9,5],[6,8,1,2],8,[6,10,8],9],[],[[6,9,7],1,1,6],[[]]],[6,[[6,5,3,4,6],[8,6],2,[5,6,2,10,8],[9,8,1,6,5]],[],10],[[],0,10,2,[1,[8,8]]]]
[[7,10]]

[[],[[[8,4,0]],[4,8,[5],1],[[1],[7],5,5,[3]],4],[5,[1,[9,2,8],[1,2,3,3,8]],2,8,[1,6,1]],[[[6]],0,5,0],[7,8,[4,6]]]
[[8,[[6,1,3],7],4,7,[[10,6],[4,7,10,6,8],[3,4,10,4,5],[0],4]],[[0],[2,[3],[]],1]]

%% 2022\day13\in2.txt
[[[[10,6],3,[9,6,7,9,7]],[[2,4,10,7,1],[7,9],[8,2,9,9,2],5,[1]],5,[]],[[[8,6,6,9,1],1],[7,[8,3],9,4,[0,3,10,9,7]]],[[[10,1]],0,[],[[4,1],[3],[10,6,4],10]],[8,[7],2,9],[[],2,[[3,6,3,6],4,[8,7,4,7,2],3]]]
[[8,9,[[]]],[],[]]

[[10,8]]
[[[[4,1,5,2],[2,9,0,7,10],[7,0]],0,[],[7,10,6,[2,10,0,10]],0]]

[[[4,7,[],3,[]],5,2,[]],[10,6,9],[3,6,8,[]],[3,[[3,1,6,0],9,8]],[[0,3,1],0,6,[4,9]]]
[[[[7],5,10],5]]

[[2,[],[10]],[9,1,[5,[4,5,0],[6,3,3,3,2]]],[[[6,0,2,7]],[10,6,[]],10,8]]
[[0,[4,7],10],[4,8,0,4,6],[],[[[5,10,0],10,[9,5],9],4,[3]],[[],0]]

[[],[[[8,6,8],[6],3],1,4,[[7,4,9,1,10],[3,10,5,4],[6],8],5]]
[[],[0,[0,3,2],8,10],[9,[[],9,6,[]],10,[]],[9],[[[9,5],4,5],[[7,2],[7,1,1]],6,[]]]

[[6,[6,[7,3,8,8,8],[0,1]],0,[[10],[1],[6,10,10,3,4],6],[[10,3,1,9,0],[8,10,3],1,[8,9]]],[9,[4,[10,10,7,7],5,[4]],[],2],[6,[[7,8],2],[[2,8,6,6],[8,4,5,3,4]],3],[[1,[],[6,1,0,8,5]],[6],[5],0]]
[[[9,[],0,[0,1,0,6,6]],[6,7,9],[8,7,0,3,[5,6,3,0]],3,[[0,0,10,1],[6],8]]]

[[[[2,0,3,3,6],8],[[9,5,2,6,7],[2,4,9,6,8],3,5],[[2,4,9,7]]],[2,[4,[]]],[[6,[3,9,7,5,0],[0,7,8,6],[6,6,7],[0,7,2,5]],[[2],[10],5],9,6,[10,[],0,[4,8,7,5],[10]]]]
[[3,[]],[[3,0],5],[3,1,[[8,3],6,[9,3,10]],[[1],7,8,8],3],[]]

[[[5],[[8],5,[0],6],3,5]]
[[],[[[],[8,4,1],0]],[]]

[[1,[[0],7,[0,8],4,[]],8,[3,5,[2,4,9,6,3],4]]]
[[5,[[],7,[7,10,1],6,0],4,[[0,8,7,9],4,8]],[2,[4,[2,8,4,1,1],[5,7,6,10,2],10,[4]],0]]

[[6,[2],[[6,9,2,3]]],[],[6,8],[],[[4,10,3],2,5,[[8,4],[6,0,2,2],[0,1]],5]]
[[[[5,3,6],[4,9],10,7],1]]

[[],[[8,[8,1,3,9,1]],0],[4,3]]
[[[1,[10],9],[[3,10],[2,2,6]],[],[[7],6],[8,1,[0],7,[10]]],[],[0,[2,9],[0,1,5],8]]

[[[],[9,9]]]
[[],[],[6,[[7]],2],[8,9,2,0,[8,8,[0,3,0,3],9]],[]]

[[[]]]
[[2,5,[0],6],[[2,[8,3,1],5],[],[0,[2,3],6,[],6],[[8,1,8,10,5],[5]],[10,2]],[]]

[[[[1]]]]
[[[],[2,[8,5],2,[0,8]],4],[[[6],7,8,[]]],[[]],[],[6]]

[[[],0],[[2,[],6],3,[8,[5,9,4,3,3]],2,[1,10,[1]]],[[0,[1,5,2,3],7,1],[10,7,[5,3,2],5],[[9,7],10,1,[4]],[9,[3,5,0,5],[1,10]]],[[7,4,5],[[5,5,5,0,4],[7,3,8,5,3],[2,0,10,0,4],4],8,[8,[]]],[2,9,0]]
[[]]

[[],[1,[4],[[7],[1],10,5,8],10,8],[2,[],[[],[],2,[9,7]],9,[2]],[[2,[10,7,5,8,0],4],2,[7,[5,5,8,7,9],0,[],[9]]]]
[[1],[],[9,[9],[2]],[[[6]],[],1,[],4]]

[[[[],10,[10,10,0]],[[9],[8,6,9,0]],9,[]],[3],[5,6,[4,1,7,[7,6,3,1,4],8]]]
[[[3,5,[1,7],2,[6,4,0]]],[]]

[[3,[],1,[],5],[[0,[1]],[6,[4,2,3]],[[],5,[6],[8,9,6,10]]]]
[[],[[[0,10,9],6,[8,0]],2,[[5,3,3,4,7]],[2]],[[10,[8,3,9],[2,2,2],[2]],[2,3,8],9]]

[[],[],[[[1],5,2,[7,8,9]],8,[],2],[7]]
[[1],[[10,[0],9],3,[],2],[0,[[8,1,7,6,10],[7,1,8,10,2],10],1,[0,10,10,[5]]],[[[],[4,3,6],[8,4],[2],[9,6,2]],9,7,4]]

[[4,[2,8,5,0],[2,3,6,[2,3,4,0],[6,5,4,1,1]],5],[]]
[[],[4,6,0]]

[[],[[[7]],[7,[9],[8,0,7,7],1]]]
[[[10,2,3],[3,3,[]],[],3,[10,[2,8],8]]]

[[[6,[1,3,4],[6],7],[1],7,[[1,2,0],5,[7],0,0]]]
[[1,[5],10],[9],[[[3,10,8,5],[9,2,7,6,4],8]],[[7,1,7],8,1,[],4],[[[1,3],[8],[1,3]],[[4,8],5,10,6,[10,10,3,10]],7,[3]]]

[[[[2,2,8,4,2],0,8,3],8,1,7],[[4,[]],[5,8,6],[[9,6,4],4],[7,[4,8,0],8,8],[]],[10,2],[4,[3],[7],[[3,1,9,10],[10,0,3]],[3,[7],9]],[3,[5],[[6,9,4]]]]
[[10,0,0,[4,2,[3,9,0],9]],[10,[[0]],5],[[[6,1,6],4,[8],7],0,[[10],[7,3,3,6,4]]]]

[[[],9,[7,[6,3,1,10,9]]],[],[7],[7,[],[[],[9,0,8,5,3]]]]
[[8],[[[8],7],[1,[4],[7,6],10,10]]]

[1,0,9,5,8]
[1,0,9,5]

[[[5,[],[2]]],[9],[7,9,[4,2,0,[0]],4],[9,[3,2,0,[6,5,6,1,8],[]],3,10],[10,10]]
[[],[[],0,3],[2,[3,[2,7,3,6,9],[8,1,1,6,0],[10,9,8,8,4],6],9,[[8,8,6]],[]],[6],[[[],5,4,6,[]],7,[10,6,[7,8,0],[1,4,4]],[[6,10,0,7,0],9,[6]],[5,9]]]

[[6],[4],[8]]
[[[],3],[[3,[3],[9,8,2,1],[0,9,3,7,7],[]]],[0]]

[[],[[8,[3,3,2,6,4],[],10],10,0,[[1,1,6,9]],[0,[5,9,10,3],2,1,7]],[[[]],[[10,4],[3,4]],[[],[6,7,6,6,7]],2],[4,8,[[8,0,4],10,[3,3]],[5,2,[0,1,2,1,2],[0,4],[]]],[6,[7],[[9],[],[],0,4],2]]
[[[[],[5,9,8,0]],[4]],[4,2],[[[8,7,4,4,2],6,2,7],7,7,7,4]]

[[],[8,[[4,6,4],[4,3,2,0]]],[[[10,2,9,9],[7],[6,4],[9,8]],[[1],[],3,[7,5,9,0,10],[10,6,3,9,4]],[[9,5,0],0,[]]],[0,[3,[0,9,5,10,4],10,2,3]],[[[6],6,[5,0]],8,4]]
[[10],[[],[[5,9]]],[8,3,1,7,4],[8]]

[[[5,1]],[]]
[[[6,10,[2]],0,[8,[]]],[10,[[10,4,6,4,1],2,2,[6,2,9,5,2],[]]],[[[],8,10],4,6],[[[3,3,2,7,4],2],[10],[7,6,[3,4,8],[7,1],[2]]]]

[[2],[5]]
[[[[]],6,4],[]]

[[3,8,7,4]]
[[9,[[10,2,9,9]],[1,[0,2,1,4,10],0],10],[[[],5,2,[1,7,3,3]],[[9],4,5,9],[]],[],[[[8,6,6,7,0]],[[3],0,[1,2]],[[8,5],9,[10,9],7],3]]

[[4,[[]],[[8,10,9,7,6],6,[4]],10],[[]],[[[2,9,0],9,7,[0,6,8,4],[7,7,8,2,8]],[0,[1],[1]],[10,[1,10]],10],[]]
[[6,[9,9]],[[5,[9,1,9],[]]],[],[5,[[0,1,7,8],[9,1],2,5,3],10,6],[]]

[[7,[2,0],[[9,2,1,10,1],1,[10,2,9],0]],[[8],1,7,7],[0],[[9,7]],[5,[4,[],5,[2,7,1,9,5]],[],[],3]]
[[6,10],[5,9],[6,4]]

[[10,[[8],[1,7]],[[],[3,5,0,2,2],[4,7,1],[6,8,5]]],[[[5],8],[3]]]
[[],[],[3,[3,[10,2,9],[7,10,0,7],3,1],5,[9,10,[],[0,2,10,6]],6],[7,[],[[10,2,8,10,5],8,[0,2,5,2,8],[8,8,1],[0,5,7]]],[5]]

[[[8,[8,7,8]]],[2,[3,[]],4]]
[[8],[2,[[]],2,[]],[9,5]]

[[[],[1,8,[2,10],[8,1,10]],[[5,6],8,4,8]],[[0],[[9,0,7],7,9,10,1],[[5,9,0],2,8,[4,8,8,3]],5],[[7,9,[1,10,4,3]],7,[7,3,1,[9,8,0,4]]],[[],2]]
[[[],5,10,5,4],[[7,[6],4]],[[9,[6,0,5,10,9],[2,3,6,0]],[0,6,2]]]

[[[3,4],[[2,4],[5,9,1,6,8],[7,10],3],[9,3],9],[[[1],7]],[[4,[6,3],[],4]],[1,[[],[0,0,4,7,7],1,6]],[[[8,9,5,3],9,4,9],8]]
[[[4],[3],[8,[2,6,5,10,8],2,[3,6,7]]]]

[[],[],[],[2,[[3],7,1,3,[]],[[4,8,7,0,10],0,[5,9]],0,[3,[3,8],0]]]
[[3,[3,[0],[2,10,9,9,8]],[10,[6,5,9]]]]

[[6,[]],[1,4,[[9,6,3,4,4]],[[10]]],[[9],8,8],[[[2,2,7,0,9]],10,[7,[2,8,1,0],[2,8],9,[3,4,10]],7]]
[[[5,[],6,8,10],[]],[1,[2],[[3],10,[2],[7,4],6],[7,2,2,[0,4,7]]],[5,[3,[0],[8,8,2],[]],[],2,[0,1,[9,8,8,9],[3,0,10,10]]],[8]]

[[],[2,10,[[6,4,3],[2],8]],[3],[]]
[[4,1,[0,[10,2,4],[0],[8,7,7,5,9],1],1,[]],[],[[1,1,[4,4,3,9]],[[1,7,4],8,[5,7,6,6],[2,9,0]],5,5,[[7,8],[5,4,6],[6,1,7],[6,2,6,6]]],[6,[],4,[[2,7,6],8],7]]

[[3],[[[8,5,2,4],[],3,1],5,[[],[6,8,7,6],[],[2,1]],6,6]]
[[],[8]]

[[[],[[10,8,10,2]],[],[[8,8,10],[6],[]]],[10,1,1]]
[[[5,2,[4,10,4]],[5,8,[7]],[4]],[3,[5,[6,5,8,7,2],[9,0,3,6],[2,3,6,0],10],0],[1]]

[[[4,[],8,[7,5,8,7],9],[[2,7,7,9]],3,[],8]]
[[5,[7,6],[1,[],10],[[9,9,3,2]]],[],[3,8,8,9,8]]

[[[[6,0],5,[5,6,8,0,10],1,6],5,4,1],[[[2,8,1,8],[],3,[6,8,4,1,10]],[0],[[8,1],10,[],5],[[],[],[4,2,9,0,9],[1,2,4,6]],4],[],[[[8],1,2,4],0,[5]],[[[4,4,9,9,4]],1,7,[1,1],5]]
[[4,[[10,4]],[]],[6,[[],1],[[10,1,0],[5],[3]],[[3],[8,7,9,1],7,9]],[9]]

[[9],[]]
[[10,[3],[6,5,0,[7]],8]]

[[1,0,8,9,2],[[9,1,7,[4,10,3],[]],[[0,6,9,1,6]],6],[10]]
[[1,0,[[],[6,0]],[[5,9,0,7,4],[1,9],4,0]]]

[[[[8,7,9],[5,1,10]],[7,[4,6,6]],5,2,4],[[[2,5,2,6,0],[2,0,9,4,7],2,[3],[2]],2,1,6,8],[[[2,3],10,2,[7,4,10]],2,1],[[[4],9,[],[4],[2,8,6,6]],1],[]]
[[[[],0,[4,9,10,5,1]],[1,2,2,8,8],[4,[5],0,[7,1,3,0,3],[3]]],[0]]

[[4,8],[7,4],[[[2,0],[9,4,10,4,3]],4,[[2,2,2,9,5],8,[10,3,8],8]]]
[[3,[],6,0],[[]],[],[3],[0,[0,1,[5,1,3]],6]]

[[[[0,0,2,3,10]],2],[[3,8,[5,5,8,6,0]],[[1,8,6],10,0,[0]]],[[[2],1],0,[5,7],0,0],[[],[5,2,6,1,[6,7]],3],[]]
[[[6,[],7],7,5],[2,10],[2,[0,7,3,8],[[],[7,9,8,1]],[4],[[],9,[1,8,3,2]]],[6,7,[[5]],3,0]]

[[[[],8,[9,5],[2,7,3,7,6]],[4],4,[],6],[],[],[[[3],[9,0,7,6],2],[6,3],9]]
[[2,[[7,1]],[1,9]]]

[[9,8,1,[[],[5,8,9,4,1],2,[6,9,9,2,7]]],[[9],10,5]]
[[[3],[[0,2,9],2,5],7,[[],2]],[],[[10,4,[7,0,1],5],[5,[9,6,6,6,7],[2],9],7]]

[[[[3,6],[3],[8,10,7]],7],[8,3,2,1],[6,4,3,[],[0,[10,3,2,9]]],[0],[]]
[[[[2,10],[3,7,8]],[[3,2,5,7],0,3]],[],[],[]]

[[[[3,6,9,7],3,6,2,[]],[7,10,[10,1,3,8],[]],1,9],[[[2,8,0]]],[7,[[6],8,1,9,[7,2,1,0,7]]]]
[[7,[5,[5,5],[6],[3,6],6],5,[3]],[6]]

[[3,[7,[2],[10,10],8],8,[0,[6,4,1,9,9],[],2]]]
[[[1]],[8],[10],[9,[2],1,[[6],[8,3,1,0]],[[8,3,7,8],6,3]]]

[[[7,2,[5,8]],0,[[1,6,9,8],[2,7,9,9]],10]]
[[[6,4],9,[[5,3,3],[0],1,3,7]],[7,[5],[[10,1,6,2],[]],0],[],[6,[],5,5,[2,1]]]

[[6,6,[],1,9],[[],[7,5,[],[4,1],[3,6,1]],[[7,3,0,7]],[[0,2,6,9],6,[8,2]]],[4,[[],6,10,[]]],[]]
[[6],[4,[[1,5,10,6],[5,1],7]]]

[[1],[5],[[],[0,[],[3,8],7,[4,9,1,3,3]],10,[[1,6,4,8,2],[4]]],[],[]]
[[8,[[3,9],[3,8]],[[1,3,6]],7,0],[[4],8,[[],[0,8,8,10,10],[10]]]]

[[[],[[2],[1,0,6,1,7],4,[8,1,6]],[10,1,[9,7,0],[2,0,10,9,1],8],[]],[8],[8,[[8,9,5,0],4,10,[3,8],[9,1,8]]],[0],[7,5,[],0,[]]]
[[],[],[[[8],[]],7,10],[[[9,4,5],9],6]]

[[[[7,4,9,2]],9]]
[[1,8,[]],[[3,8,2,0,1],[7,5,3,[6],[9]],[8,[1,6,10],[2,4,2],10],[[10,1,3,8],8,[10,0,8,8,7],5]],[[[7,0],[]]]]

[[[[],3,3,0,0],[]],[[]],[[[4,0,2],[6,2,9],[2,5]],[[3,6,6],[2,0,5]],[[1,3],[]],10,[6,[],10,[9,6]]],[[1,10,0,6],[[8,0],1,0,[0,7,2,7,9],[7,7,9]]],[[[1,9],0],[[5],[7,4,3,10],[4,6,0,1],[0,5,10,1]],[],5]]
[[[4,4,[],[]],4,[[5,9,4,3,4],3]],[],[1,9,8,[[2,3,7,8],[2,1,3,3],[]]],[10,[]]]

[[7,[[]],3,[],[[2,6]]]]
[[3,[1,[2,6,9],[10,2]]],[[[1],[2,3,0,6,7]],[[1,10,0,7,4],[8,8,8,10],10,[0,9,3]],[],[4,[1,2]]]]

[[1,[[],[2,6,0,5,7]],8,[],6],[],[[],[10,[],8],[[10,5,7,9,9],[0,3],9,8]]]
[[1,1],[[6,9,1,[1]],8],[7]]

[[[9,[3,8,9],2,[5,10,0,1,10],[6,5,4]],[3,[9,2]],5,4,6],[[[8,3,8,5]],[[5,7,2,4],5]],[10]]
[[10,[2,[2,0,10]],3]]

[[[],[[1,10,1],[1,9],[0,1,3,3]],[4,1,[1,2,4,3,8],[8,10,10,3],6]],[3],[[[9,6,3]]],[8]]
[[[3],[[7,2],[3,10,2,7]],9]]

[10,7,9,4]
[10,7,9,4,1]

[[[[7]],9,[[6,6],[6,10,9,3],[3]],[2,[10]],[4,[5,0,5,0],[6]]],[[0,9,4,[2],0],[1,[3,8],1],3],[0],[[],[]],[[[8,3]],[10,[8],4,10],[[],[10,3],8]]]
[[],[8,[[10,10]]],[[],[0,6,7,[6,5,3,9]],8,[],1],[1,7,[[1,3,10,5,0],[1,7,6,0,4],9,[7,2],[8,5,4]]]]

[[8,6,[[],9,3,3,[10,6]],7],[6,[]]]
[[9,0,[[3],3,0,[0,2,9,10,5],5]],[[[8],8,[6]],[[5,3,6,10,9],4],[[6],[10,1],[3,9,6]],7],[[[9,6,1],3],5],[[4,0,[2]],[[],7,[2,4,7,5],8],[],[[],[],[0,6,4]]],[[[3,3,8],2,[3,0,1],[5,3,4]],[[7],4,[2,3]],3,[[3,5,8,8,6],4]]]

[[5,8,[],[[],[5,1,9],7],[[10]]],[7,[[4,7],10,1,2,3],9,[[8,3,6,9],[9,7,5,4],4,[]],[[],5,[5,8,0]]]]
[[5,[4,[8,8,5,7],5,5]]]

[[[6,5,1,6,6],4,[5,[0],7,1,10]]]
[[[[3]],[6,6],6,[[7],5,[2,1,0]],[]],[10,[[0,5],[1,3,0,7,9],[2,8,2,10,8],[]],[[10,2,6,1]],6]]

[[10,1,7],[[[10,1,9]],[[6,4,9],5,9],[[6,5,9,3],8,[8,10,9,0],3,[5,6,8,1,9]],4,[]],[10,[[3,6]],[9,4,[3,8,9],[7,7,4]]],[],[[],[],[[8]],0]]
[[5,6],[10],[4],[1,9,[[1],0,[2,3,10,3]],10],[]]

[[[[1],[2,0,4]],[[7,3,8]]],[]]
[[],[[],3],[3]]

[[[]],[[6,3],7,4,3,2],[9,[[7,5,9,4],7]],[],[]]
[[5],[2,4,[4,[10,8,1],[3,9,1],[],4]],[[]],[[[3,5,4]],[[5,8],[6],[],[9,3,2,7,2],[1,5,5,1,8]],[8,[7,2,4],6],[7],1],[1,1,[[2,8,6,9,0]]]]

[[1,6,8,8],[[[1,5,3,8,3],5,[5,2],[7,6],6],[]],[[[10,9,9,1,4],[6,9,1],6,8,6],4,[7,[8],1,3],4,10]]
[[[[1,2,1],[6,7,5,1]],[[7,5,0,3,5],9,0,[9],6]],[9]]

[[[5],4,10]]
[[5,8,2],[2]]

[]
[[2,[[10],[1,5,4,3],[]],10,5]]

[[0,[9,5,0,3,8]]]
[[[2,[5],[9,7,9,8,7]],0],[[2,0,5,10],7,[[1,8,10,9],[9,2,6],7,[],4]],[]]

[[6,5,3,[7,2,[1,0,6,7,6]],[10]],[[[10],[8,4],[0,1]]]]
[[[],[9,[10]]],[[[5,4,3,4],1,1,[4,8,3]],[2,5]],[2,[[0,6,3,3,9],4,[0,5]],[2,8],[[10,2],6,[1,6]],[[8,0,6],8,0]],[[[7,4,1,4],[0,7]],8,[],[[10]]],[[1,[8,10,1,2],[1,10,5,2]],1,7,7,6]]

[[[],10]]
[[1,[[0,5]]],[1],[[]]]

[[9,1,[]],[[[],[9]],2,[]],[[[5,8,5,10,9],8,[],[0,7,0,4,10]],[],[[8,1,10],[9,10]]],[1,[3,[3,4,8,9,10],[]],7,[1,3,6,9,[0,0,5]],6]]
[[[6,5,[10,7,0],[1,2]]],[4],[],[[0,7]],[4,[[9,0,6]],6,5,[9]]]

[[[[6]],2,[[],2],4],[4,9],[5,4,0,[4],[10]],[],[[8,7,3,10],9,10]]
[[0,[6],6],[[],[8],[],3,4]]

[[],[[],4],[[1,2,[1,9,5],1],[7,[],[]],8,6,[]],[[8,[8,5,4,0,9],[10],[8,2,1,3]],[[5,1],10],1,8]]
[[9],[[[],0,4,5],4,[8,[],4,10]],[[[4,8,4,2],6],[[9],[]]],[2,[]]]

[[[[6,6,5,7],10],[3,[],[0,0,8,1,8],[10,4]],[[5],8,[3,5,8],2],[10,[8,0,4,9],1,[3,4,8,6],[8,6]],[[9,8,7,6,1],[1,6],3,8]],[[9,4,4],[[10],[],[2,5],[9,7,4,3,2]],[[6],5],[6,0],[[3,4],10,[5,2,4,7],[5]]],[3],[[[3,0],3,[5,4,8,0,8]],9,1,2,[[0,8],[3,9],8,6,6]]]
[[3]]

[[[[1],10,[3,6,3],[9,8,3]],0]]
[[0,[9,[8,8,1,9],3],3,7,7],[3,[3],6,2,1],[],[[0,[0,9,10,7],[9],0],[2,4,3,[4,5,1,3,9],10],3,2,[[],9]],[[0,[10,6,3]],[],2]]

[[2,[],[10,[7,6,3,5]],3,[2]],[0],[9,[6,10,10,0,10],1,9]]
[[[[9,6,4,6],[0,10,3,5,3],2,5,9],[[10],4,9],[9,6,8,2,1],4,6],[[[6,1],[5,9],3,1],[],[[1,4],[],6,7,[1,4,6,1,3]],6,2],[0,5,[[10,5,10],[2,8],[3,4],10,[6,4,8,6]],2,5]]

[[7,[8],[[9,9,7]],6],[[[3,3,8,5,3],[],[3,3],[2,3,8],8]],[4,9,[7,5,[1,5,2],4,[9,6]]]]
[[],[9,3,[[7,3,5,4,7]],4],[],[[],2,[[1,10,3]],[8]]]

[[8,1,1,[1,0,[2,4],8,[]],10],[2,9,1,10,1],[[[],0,1,[9,1,8],3]],[8,[]],[1,[5,[],[10,4,8,10]],[[8],5,[],3,[7,0,4,9,0]],9]]
[[],[[[2,8,5]],10,[[6],10],[[3,10,9,5],0,10],0],[10,6,[10,9,9]],[10,3]]

[[6,[[4,0,7,4],[10,1,1,9],[],1,1]],[[],6,3]]
[[[3,1,6],9],[1,0,[5,[5,4]],[[2,5],[0,3,4],[],9],[]],[1,3,[[2],0,[4,1],[4,2,9,0,6],2]],[10,2,7,[9,[],[2,1,1,4,2]]]]

[[[9,3,[0,0,2],9]],[6],[[[10,4],[3,5,10,7],6,2,[6,1,3]],7],[[7,2,4,3,4],5,[5,5,[2,8],[9,2],7]]]
[[3,7,4,[[8,7],0,4,2],3],[],[2,[[5]]]]

[[9,[1,10,[2,3,0]],[],2],[[10,1]],[]]
[[0,5],[0,[[9]],[[2,5],4,[],[4],2]]]

[[[6,9,[7]],[8,[9,8,9,1],8,5],[],[]],[[[8,1,8,8],1],[],9],[[[],5,[3]],[[6,6,2],5,[]],[[4,7,7]],[[5,5,10,8]],[1,[9],1]]]
[[[1],6,[[3,9,0],10,[9],2,3],[6,[],[2]],[]],[8,5,[4,[0,5]]],[2,6,[[7,5,8,3,7],[2,10,6],[1],[],5]],[5,7,[[8,6,10,10],[],5],6],[]]

[[[],[[6,8,6]],[9,10,[8]],[4,4,[2,1,6,1,10],2]]]
[[],[],[],[[3,[]]]]

[[],[4,[5,4,[2,9,6],[8],4]],[2,[2,[],4],[8,4],[8,3,[6,1,6,8],7,2]],[[[],0,[4,2,6,4,3],[],[]]]]
[[7,[[],[1,8],[9,0,1,10,10],5],9,[1,[10,0,2,8,9],2,7,4]],[[4,6,[2,6,9,10],[4]]],[[[8,3,4],6,[2,10,1]],[0,9,[8],4,5],4,5],[2]]

[[9,[[9,5,4,0,10],3,7],[[9],[],[4],[6,8,9]],6],[[9,8,2]],[6]]
[[[1,[7],9,7,1]],[[[1,0,7]]]]

[[8,7,[[],5,[2,9,1]],[]],[1,[5,4,2],8,9,9],[7,[[5,10,0,10],0,1],3]]
[[2,7,4,8,2],[10,8,[4]],[[[],[6,0,3,5,10]]],[[2,[]],9,[]]]

[[9,[[8,7,3,7,2]],10]]
[[],[]]

[[[[4,8],[4,2,0],8,3],8,6,[]]]
[[[[8,2],7,2,[10,1,4,2],9],2,9],[8,[7],0],[],[6,6,2,[0,[1,3,7],[1,10,1],5]],[6]]

[[[],[[1,3,10],[4,3,0,2,3],[9],9],4],[]]
[[[7,1,4],5,[4,[6,6],0],[[],[4,5,0,4,8],3,[3,10,0,2,6],[2,4,9,1,5]],[]],[[[]]],[[[6,6,10]],[9],3,5,[4,[2,5],1,8,[9]]]]

[[[[4,2],[4,8,10,2],0,[8,8]],[[4,3,0,4],[6],9,[0,0,4,0]],0],[5,[4,[8,7,2,0],4,6,1],[]]]
[[7,[],[3,1,9,[8,8,0,5],6]],[10,[],[[4,8,9,3],[9,1],[5,6,6]]]]

[[[],6,3,[]]]
[[2,[8,[3,5,6],2,4,[9,9,8,7,2]],9,[[3,5,5,7],[6,3]],1]]

[[1,[1,1],[6,[7,8],10,6,0],0,[8,[5,5,3,9],[0,8,5,8,8]]],[[[8,7,6,1]],[],7,10],[3,8]]
[[6],[4,[],[4,[0,9,4,7,4],0,[]],[5,6,3,[1,8,6]]],[1,[],7,10,[]]]

[[[[6],[1,1,7,7,7],[1,4,4]]],[[[]],6,[2,6,5,3],[4,[8,2,7,10],9,[8],1],4],[[10,9],1,3,[[10,0,0,4],[],[1,7],7,[]]],[[4,10,6,6],8],[9]]
[[],[[[9],[3,5,2]],[0,[9,5],9],6],[],[],[[]]]

[[[[8],[0,10,6]],[4,5,5],0,8],[]]
[[[2,[6]],[[1,10,4,1,3]]],[],[10,[4],[0],[0,[0,9,8],[3,8,8,2],5,4]],[[],4],[]]

[[[5,3,[0,2],3,5]],[],[],[5,[[2],[6]]]]
[[],[[6,4],[0,[2,2,10],3],[],[]]]

[[10,[[]]],[],[[9,2],3,[[8,9,4,5,4],[0,2]],10,[]],[[[1,0,9,8],9]]]
[[6,8,[[],5,7,[0,7,1,7],[5,5]]],[[0,3,[9,2,0,2,6]],8,3,[2,2]],[9,[],[]]]

[[3,[[2,2,0,7,0],[0],8,7,[1,8,10]],[[4,8,0,6]],6],[]]
[[[5,[6,4,6],[1,8,4],8],4],[[],2,6,8,7],[[]]]

[[7,[5,5,6,[8,9,9,7,1]],[[3,8,8,8],[9,0,1],10]],[[[7,4,3],[2,5],[5,9,3]],8,10],[[3,10,9,[],10],[5,[2,10]],8,8,[3]],[7],[[[3,5,0,2]]]]
[[],[[8,10,[4,5,2,4],[3]],10,[[]],9],[[2,[7,7,10,10],[7,3,10,10]],[[1,2,5],9,6]]]

[[1,10,10,[]],[[[9]],[[5,10,0],2,[5,5]],4]]
[[8,2,[[],[2,1,7,7]]],[[6,[7,2,8,8]],[],1,[[10],[0,6,5,8,9],[10,9,6,7,0],[],[3,8,10]],[10]]]

[[8]]
[[],[[[8],[1,5,4,1],2]]]

[[[[4,5],0,8,[3,7,10,6,7]],[9,6,[1],0,5],[7,0,5]],[[]],[[3,10,[]],[0,9,8],0,[[9,4,4],5],[4]]]
[[[[10],1],[7,[7]]],[[4,10,2,4]],[[8,[0,10],[],1],[8,10,[2,8,2,4]],[8]],[3,10,[5,[0,0,7],5,10,5]],[5,5,6,0,[9,[0,2]]]]

[[],[],[[[9,10,1,9],[1],3],9,[5,[]],[[10,7,6],6,[1,3,3],[]]],[[6,[9,8,3,8,9],9,[]],[1,5,4,1,[7,8]],[[10]]],[8,5]]
[[],[0,10,0,0,1]]

[[3],[[5]],[0,9],[[]]]
[[1,9,3,[5,5,[]],4],[[[5],1],9,0,10,6]]

[[[8,10,1,3,[0,5,2,8,6]],2,4]]
[[3],[[10,[4,10,6,8,9],[10]]],[9,0,[],[[10,3,5],1]],[[[6],[4,1,7,10],[5,5,3,8,3],8,4],[[9],[10,8,6,1,7],[6,6]],8,[6,0,[4,2,5,10,0],10]]]

[[[[6,7,9,3],[],0,5,[8,4,4,2,6]],3,[],[8,[]]],[[[1,9,7,9,2]],[9],[[1,6,4,0,0],[4,0,4,4],[3,4]],3,7],[[],7,[6,5,5,4,0]],[9,[[10,7,1,2,0],[5,0,10,4],[],3],9]]
[[[5,[6,1,0],[8,0]],[10,8]],[],[7],[[[3,4,3,5,5],5,9],[5,[8,9],7,[5,7,4,0],1]],[[[],[3,2,1,3,8],[9,0]],[[5,2,1],10,0,4],[[],[3,5]],[4,10,[1,0,8,3,1]],6]]

[[10],[10],[]]
[[],[[8,[3]],6,9,[[0,10,6],[6,1,3,0],[0,9],4,2],[[1],[1],[10],1]],[5,[10,10,[4,8]],10,[8,0,9,[4,2,0,6,8],9]]]

[[[[10,4,5,9,6]],0,[6,[10,9,2,3],10]],[[[10,10,9],6,[10,2,5]],[[8,2,6],7,[3,4,2]],4]]
[[[],6,8]]

[[0,5,[[4,4],10,[],[],6]],[[[2,8],[9,3,10]],10],[],[[[],4,4],4,[[10,0,2,6],10,7,[],[3]],[7,1],[4,[7,6,1,5,5],4,4,0]]]
[[8,[0,7,[8,1],[1,4,6,4,9],[10,6]],1,[]],[],[6],[2,[[10,2,1,10,7],[1,8,10],[7,0,9]],7]]

[[[[4],2]]]
[[4,0],[1,[[1]],[]],[[10,[1]]],[0,0,[0,[6,5,7,8],[1,10]],7,[9,[3,9],[9,6]]]]

[[[8,7,[9,10,4,2,1],4,7],3]]
[[9,[9],8],[8,[1],[1],[9,[3,3,1,2,3],9,10,[4,8]],7],[[8,0,[3,1,9,1,5],2,6],10,5,3,[[8,7,5,10]]],[]]

[[[7,[]],[[10,8],[9,7,3,8]]],[[8,[],[2,0,3,6],10,[1,0,1,6]]],[0,5,[[],6,[8],1],10],[2,4]]
[[10],[7,7]]

[[],[8,8,[9,0,[],[9,6]],7,5],[]]
[[],[1],[[8,[],2],[],1,[1,9,[],3],[]],[[[8,8,10,10,1],[],[0],7],7,[[1],[4,2,10],8,[8,1],[10,8]],6,9],[1,[],9,[[7,5],1],1]]

[[[8,[5,2],[9,9,4,4],2,0],[[5,0,10],[8,6,5,1],[1,4,1,5,1]]],[[]],[[],5,6]]
[[[]],[[],[[],[]],4,[]]]

[[[],3,8,2,10]]
[[[[3,0,0],2,[9,7,2],1],9],[[],[[8,8,0,7],9,[],9],5],[]]

[[[[10,6],[8,9,2,6],[0,1,5,5,0]],1,[],5]]
[[0,[6,10,5],7,7,0],[7],[4,[5],1,[[1,0]],10],[[10,4,7,5],[]],[3,[7,[],[10,2,2,2,0],[],[0]],9]]

[[],[3,[9,[10,10,3,6,10],7,8,9],6,[]],[[10,[8],1,0],7],[],[[[1,5,6,4,5],3,1,3],[4,0,[1,1],[]],[],[[],10,8,6,5]]]
[[[5,[3,0,9,9],[]],4,5]]

[[[0,[1,10,0,4]],1,[[0,10,3,9],4,8],[[5,7,1,8,0],[9,1,10,7,2]]],[6,3]]
[[[10,10,[3,10,7]]],[6,5,[[10,1,10]],1,1],[10,[9]],[[5,7,0,[],[6,0,10,10]],1,6],[9,8,[]]]

[[8,6,6],[4,[[],6,3,1,4],[[1,2,9,4],8,2],1],[],[9],[[3,0,0,4]]]
[[[4],10,0,[],[9,[6,8]]],[[4,5,[0,3,3],6],1,[[3,2,7,1,10]],[[3],3,[]],[]],[[[3,10,5,2],[7],9,0,9],5,10]]

[[[6,[10],9],6,[1],[[9,5,10,9],4,5,[]],1],[]]
[[8,0,9,[]],[[[4,1,2,7],[9,9,8,7,3]],10,1,5,[9,3,4,4,4]],[4,[[0,6,8,6,10],2,[5,10,6,7,9],2],[[9],7,1,8],0],[[[5,8,9,3],6,10,0,6]],[[5],[[7,4],[],6],5,1,[0,[9],0,[8,7]]]]

[[2,3,[]],[[6,4,[],[10,6,8,5,8],6],[1,5,[9,0,1,8,10],[5,8,8],5],[[],[4,6,0],[3,4,5,4,4],8],[[7,6]]],[]]
[[[2],[[9,5,3,6]],[[],[5,9],[3],[10,9,4,1,7]],[4]],[[],[[],8,[2,8],3,[2,7,5,2,6]]],[],[2,[[1],[],4,[3,2,2,1,1],2],[[3,7,6,10,1],10],[[],[0],4,[4,0]]]]

[[[[]],[[5,10,1,9,4]]],[3,[4,7,[4,7,5,8,10],[],[1]],4]]
[[[[9,9,0],2],4],[[],[7,3,[10,4,5,3,5]]],[[],[6,[10],1,[]],10,1],[[]],[5]]

[[[10,[]],1,[3,[0,9]]]]
[[[[9]],[[8,5,2,1,4],[]],[]],[],[[[1],6,10],7,1,[[],[8,0]],10]]

[[[1,[5,2,1,6],[5,2,9,7,5],7],4,6],[1,5,5,[1]],[[10,[8,0,4,0,4],8],7,[4,10,4]],[]]
[[[[10,8,0,6]],10,[7],[1,10],3],[10,[8],[3,[4,4,6],[]]],[[10,3,7],[[2,3,6],7,4,[]],[3],[[2]]]]

[[9,9],[10,10,[[6,5,3,5,1],[10,7],10,[3,6,2]],2],[9],[[[9,10,4,9,2],[]],[[10,6,7],8,[7,3,6,9],[2,8,1,9,6]],[[5,4],9,5,[6,0,2,7],[]],2],[[],[0,[9,1,0],6]]]
[[],[8,[6,4,[10,8,0,8]]]]

[[1,[3,1,8]],[[],5,[[]],[5,[3,6,9],[7,5,8]]],[[1,8,1]]]
[[[[10,3,7,0,5],10],9,[[]]]]

[[],[[],[],[[],[9,9],8],[6,[3,4,5],[]]],[6,[[3,3,4,9,10],[4,4,3,5,1],7,[0,9,7],[2,2,0]]],[0,[[0,2,10,1],[],[3,10,4,4,9],[],4]],[[0,1],[8],5]]
[[],[[2,[],1,4]]]

[[[],[[6,6,0],10],[[2,4,8,10],0,[6,8]],3,10],[4,7]]
[[5,10,10,[[10]]],[1],[7]]

[[2],[1,0,[[5,5,7,4],1]]]
[[1,9]]

[[[],[8,[4,9,4,6,1],0,[1,3,4,3,0]],7,[[8],7]],[[[6,4,1,0,10]],3,[8,[1,6]],[[9,9,10]]],[10,[10]]]
[[3,10],[9,8,2]]

[[6,7]]
[[2,[10,0,[9,4,4],[5,2,5,10],4],[[4,3,3,8,6],3],[9,[6,7,4],[1,6,5,7,10],[10,1,1,9,10]],[1,10,[1,9,9,5],[8]]],[10,[4,[],[4,2]],10,9],[[[9,10,3],5,[0,7,2]],[4,4,2],4]]
[[1,10,8,[[10,0],4,9,[4,1]],[[8],[2,1,7,7]]]]
[[[[2,3,9,7],[5],[7],10,[10,1,5,2,9]],[8,[1,0,3,5],4],[5,8,[2]],10,[10,6,[5,1,3],8]],[[3]],[1],[8],[4,[9],[],3]]

[[1],[],[[3,[0,3],[],[7,7,2,1,7],[4,3,2]],[7,[5,2],4],0]]
[[[[1,4,4,5,10],[6,8,6,3,2]],[0],10,[[8,1,8],0,[9,7,0,9,6]]],[3,[6,1,[]],9,[[7,8,6,1,10],[2,1,3,3,7],[8,7,0],2],4],[5],[]]

[[[3,[7,3,10],[6]]]]
[[],[1],[9,2,[[],1,[9,6,5],9],[0,2,[8,7,4,2,8],10,[]]],[1,[2]]]

[[3],[7,7,2,[7,[10,0],[2,9,1],[7,8],[]]],[[1,6,[],[10,6,1],6],0,[1,[9,10,9,5,7],[0,6,6,6]],2],[]]
[[5]]

[[],[1,[[6,8,7,1,6],[5,0,1],[]],3,[[1,1,2,2],[2,2],[0,0,8,4,3],10,4],[5,[6,6,6,8,10]]],[]]
[[1],[[1],5,10,[[1,0,6]],0],[8,[],7,3,[]],[2,6,4]]

[[3],[2,[[6,1],[3]]],[3,3],[10],[[4,3,3],[[3,10],5,10,[]],[[],8]]]
[[0,2],[[9,[6,9,5],1]]]

[[[[6,8,0,3,5],10,[2,5,4,4,2]],1,10,[[2]]],[[6,2,[2,3],[9,3,4]],5,[0,[10],7,9,6],[]],[8,2,[8]],[[5,[10,10,9],[6,4,3,8],[1]],6,4,5]]
[[[8,1,[],[],[5]],6,7,9,1],[5,10],[]]

[[[9,[9,1,10,9,8]],9,6,0,[[0,4,6],[1],7,3,[4]]],[1,[[2,7,7],[8,4],[7,9,3,3]],[3,4],7,4],[4,7,[],[],4]]
[[[],[7],0,5],[2],[4,6,4,6,6],[8,[[],7],[6],[[],2,[],1,[2,2,2,4,1]]]]

[[[[4],7,[4],[0,8,1]],[[3,6],[8,8,7]],10]]
[[7,6,[5,8,[]]]]

[[1],[[[10],[0],[8,8,7,4,5]],6,[[9,0],[10,7,3],4,[2,4,5],[5,7,10]],[[1,5,10,10],[],[3,3,9]]],[[[0,1,9,5],[6,8,1,2],8,[6,10,8],9],[],[[6,9,7],1,1,6],[[]]],[6,[[6,5,3,4,6],[8,6],2,[5,6,2,10,8],[9,8,1,6,5]],[],10],[[],0,10,2,[1,[8,8]]]]
[[7,10]]

[[],[[[8,4,0]],[4,8,[5],1],[[1],[7],5,5,[3]],4],[5,[1,[9,2,8],[1,2,3,3,8]],2,8,[1,6,1]],[[[6]],0,5,0],[7,8,[4,6]]]
[[8,[[6,1,3],7],4,7,[[10,6],[4,7,10,6,8],[3,4,10,4,5],[0],4]],[[0],[2,[3],[]],1]]

[[2]]
[[6]]

%% 2022\day13\test.txt
[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]

%% 2022\day13\test2.txt
[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]

[[2]]
[[6]]

%% 2022\day14\day14_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;

void main(string[] args)
{
    auto input = stdin.byLineCopy.array;

    auto xs = input.join(" -> ").splitter(" -> ")
                   .map!(x => x.splitter(",").front.to!int);

    auto minx = xs.minElement;
    auto maxx = xs.maxElement;

    auto miny = 0;
    auto maxy = input.join(" -> ").splitter(" -> ")
                     .map!(x => x.find(",")[1..$].to!int).maxElement;

    //writeln(minx, " ", maxx);
    //writeln(maxy);

    auto N = maxx - minx + 1, M = maxy - miny + 1;
    int[] field;
    field.length = N*M;

    foreach (line; input)
    {
        foreach (start, end; lockstep(
            line.splitter(" -> "),
            line.splitter(" -> ").drop(1)))
        {
            auto sr = start.splitter(",");
            auto sx = sr.front.to!int - minx;
            sr.popFront;
            auto sy = sr.front.to!int - miny;

            auto er = end.splitter(",");
            auto ex = er.front.to!int - minx;
            er.popFront;
            auto ey = er.front.to!int - miny;

            auto off = [ex, ey];
            off[] -= [sx, sy];
            enforce(off[0] == 0 || off[1] == 0);
            off[0] = off[0].sgn;
            off[1] = off[1].sgn;

            auto s = [sx, sy];
            auto e = [ex, ey];
            e[] += off[];
            while(s != e)
            {
                field[s[1] * N + s[0]] = 1;
                s[] += off[];
            }
        }
    }

    foreach (i; sequence!((a,n) => n)())
    {
        auto curr = [500 - minx, 0 - miny];
        while (true)
        {
            auto cand = curr.repeat(3).zip([[0, 1], [-1, 1], [1, 1]])
                            .map!(x => [x[0][0] + x[1][0], x[0][1] + x[1][1]]);

            if (cand.canFind!(x => x[1] * N + x[0] < 0 || x[1] * N + x[0] >= N*M))
            {
                writeln(i);
                return;
            }

            auto next = cand.find!(x => field[x[1] * N + x[0]] == 0);

            if (next.empty)
            {
                field[curr[1] * N + curr[0]] = 2;
                break;
            }
            else
            {
                curr = next.front;
            }
        }

        debug writeln("qq");
        debug field.chunks(N).each!(x => x.writeln);
    }
}

%% 2022\day14\day14_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;

void main(string[] args)
{
    auto input = stdin.byLineCopy.array;

    auto xs = input.join(" -> ").splitter(" -> ")
                   .map!(x => x.splitter(",").front.to!int);

    auto minx = xs.minElement;
    auto maxx = xs.maxElement;

    auto miny = 0;
    auto maxy = input.join(" -> ").splitter(" -> ")
                     .map!(x => x.find(",")[1..$].to!int).maxElement;

    auto orig = maxx - minx;
    minx -= orig * 4; // * 4 is a heuristic. I think, maybe, a triangle number-based estimate could be done
    maxx += orig * 4;
    maxy += 2;
    input ~= "%d,%d -> %d,%d".format(minx, maxy, maxx, maxy);

    // writeln(minx, " ", maxx);
    // writeln(maxy); // test = 9, in = 168

    auto N = maxx - minx + 1, M = maxy - miny + 1;
    int[] field;
    field.length = N*M;

    foreach (line; input)
    {
        foreach (start, end; lockstep(
            line.splitter(" -> "),
            line.splitter(" -> ").drop(1)))
        {
            auto sr = start.splitter(",");
            auto sx = sr.front.to!int - minx;
            sr.popFront;
            auto sy = sr.front.to!int - miny;

            auto er = end.splitter(",");
            auto ex = er.front.to!int - minx;
            er.popFront;
            auto ey = er.front.to!int - miny;

            auto off = [ex, ey];
            off[] -= [sx, sy];
            enforce(off[0] == 0 || off[1] == 0);
            off[0] = off[0].sgn;
            off[1] = off[1].sgn;

            auto s = [sx, sy];
            auto e = [ex, ey];
            e[] += off[];
            while(s != e)
            {
                field[s[1] * N + s[0]] = 1;
                s[] += off[];
            }
        }
    }

    auto init = [500 - minx, 0 - miny];
    foreach (i; sequence!((a,n) => n)())
    {
        auto curr = init.dup;
        while (true)
        {
            auto cand = curr.repeat(3).zip([[0, 1], [-1, 1], [1, 1]])
                            .map!(x => [x[0][0] + x[1][0], x[0][1] + x[1][1]]);

            if (cand.canFind!(x => x[1] * N + x[0] < 0 || x[1] * N + x[0] >= N*M))
            {
                writeln("in abyss at ", i);
                return;
            }

            auto next = cand.find!(x => field[x[1] * N + x[0]] == 0);

            if (next.empty)
            {
                field[curr[1] * N + curr[0]] = 2;
                if (curr == init)
                {
                    writeln("stuck at ", i+1);
                    return;
                }
                break;
            }
            else
            {
                curr = next.front;
            }
        }

        debug writeln("qq");
        debug field.chunks(N).each!(x => x.writeln);
    }
}

%% 2022\day14\in.txt
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
460,159 -> 460,154 -> 460,159 -> 462,159 -> 462,151 -> 462,159 -> 464,159 -> 464,152 -> 464,159
464,109 -> 464,111 -> 463,111 -> 463,118 -> 473,118 -> 473,111 -> 468,111 -> 468,109
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
478,33 -> 478,37 -> 471,37 -> 471,41 -> 483,41 -> 483,37 -> 482,37 -> 482,33
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
466,96 -> 470,96
494,22 -> 499,22
499,13 -> 499,16 -> 498,16 -> 498,19 -> 507,19 -> 507,16 -> 501,16 -> 501,13
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
460,145 -> 460,146 -> 462,146
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
460,159 -> 460,154 -> 460,159 -> 462,159 -> 462,151 -> 462,159 -> 464,159 -> 464,152 -> 464,159
454,168 -> 458,168
476,60 -> 476,61 -> 489,61
502,26 -> 507,26
447,106 -> 452,106
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
498,24 -> 503,24
478,33 -> 478,37 -> 471,37 -> 471,41 -> 483,41 -> 483,37 -> 482,37 -> 482,33
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
499,13 -> 499,16 -> 498,16 -> 498,19 -> 507,19 -> 507,16 -> 501,16 -> 501,13
457,166 -> 461,166
478,33 -> 478,37 -> 471,37 -> 471,41 -> 483,41 -> 483,37 -> 482,37 -> 482,33
464,109 -> 464,111 -> 463,111 -> 463,118 -> 473,118 -> 473,111 -> 468,111 -> 468,109
499,13 -> 499,16 -> 498,16 -> 498,19 -> 507,19 -> 507,16 -> 501,16 -> 501,13
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
478,33 -> 478,37 -> 471,37 -> 471,41 -> 483,41 -> 483,37 -> 482,37 -> 482,33
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
457,99 -> 461,99
499,13 -> 499,16 -> 498,16 -> 498,19 -> 507,19 -> 507,16 -> 501,16 -> 501,13
463,162 -> 467,162
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
457,104 -> 462,104
450,104 -> 455,104
476,60 -> 476,61 -> 489,61
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
462,143 -> 473,143 -> 473,142
483,44 -> 483,48 -> 481,48 -> 481,55 -> 489,55 -> 489,48 -> 487,48 -> 487,44
463,99 -> 467,99
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87
478,33 -> 478,37 -> 471,37 -> 471,41 -> 483,41 -> 483,37 -> 482,37 -> 482,33
472,168 -> 476,168
472,123 -> 472,124 -> 476,124
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
483,44 -> 483,48 -> 481,48 -> 481,55 -> 489,55 -> 489,48 -> 487,48 -> 487,44
489,30 -> 494,30
462,143 -> 473,143 -> 473,142
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
482,30 -> 487,30
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
460,145 -> 460,146 -> 462,146
460,168 -> 464,168
460,159 -> 460,154 -> 460,159 -> 462,159 -> 462,151 -> 462,159 -> 464,159 -> 464,152 -> 464,159
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
492,28 -> 497,28
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
464,109 -> 464,111 -> 463,111 -> 463,118 -> 473,118 -> 473,111 -> 468,111 -> 468,109
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
466,164 -> 470,164
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
464,109 -> 464,111 -> 463,111 -> 463,118 -> 473,118 -> 473,111 -> 468,111 -> 468,109
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87
478,33 -> 478,37 -> 471,37 -> 471,41 -> 483,41 -> 483,37 -> 482,37 -> 482,33
460,96 -> 464,96
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
472,123 -> 472,124 -> 476,124
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
460,159 -> 460,154 -> 460,159 -> 462,159 -> 462,151 -> 462,159 -> 464,159 -> 464,152 -> 464,159
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
499,13 -> 499,16 -> 498,16 -> 498,19 -> 507,19 -> 507,16 -> 501,16 -> 501,13
464,109 -> 464,111 -> 463,111 -> 463,118 -> 473,118 -> 473,111 -> 468,111 -> 468,109
463,166 -> 467,166
483,44 -> 483,48 -> 481,48 -> 481,55 -> 489,55 -> 489,48 -> 487,48 -> 487,44
491,24 -> 496,24
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
488,26 -> 493,26
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
483,44 -> 483,48 -> 481,48 -> 481,55 -> 489,55 -> 489,48 -> 487,48 -> 487,44
460,159 -> 460,154 -> 460,159 -> 462,159 -> 462,151 -> 462,159 -> 464,159 -> 464,152 -> 464,159
499,13 -> 499,16 -> 498,16 -> 498,19 -> 507,19 -> 507,16 -> 501,16 -> 501,13
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
453,102 -> 458,102
485,28 -> 490,28
461,106 -> 466,106
454,106 -> 459,106
464,109 -> 464,111 -> 463,111 -> 463,118 -> 473,118 -> 473,111 -> 468,111 -> 468,109
478,33 -> 478,37 -> 471,37 -> 471,41 -> 483,41 -> 483,37 -> 482,37 -> 482,33
503,30 -> 508,30
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87
466,90 -> 470,90
460,159 -> 460,154 -> 460,159 -> 462,159 -> 462,151 -> 462,159 -> 464,159 -> 464,152 -> 464,159
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
460,164 -> 464,164
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
496,30 -> 501,30
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
472,96 -> 476,96
510,30 -> 515,30
463,93 -> 467,93
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
475,99 -> 479,99
466,168 -> 470,168
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
469,99 -> 473,99
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
464,109 -> 464,111 -> 463,111 -> 463,118 -> 473,118 -> 473,111 -> 468,111 -> 468,109
499,13 -> 499,16 -> 498,16 -> 498,19 -> 507,19 -> 507,16 -> 501,16 -> 501,13
483,44 -> 483,48 -> 481,48 -> 481,55 -> 489,55 -> 489,48 -> 487,48 -> 487,44
495,26 -> 500,26
460,159 -> 460,154 -> 460,159 -> 462,159 -> 462,151 -> 462,159 -> 464,159 -> 464,152 -> 464,159
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
499,28 -> 504,28
483,44 -> 483,48 -> 481,48 -> 481,55 -> 489,55 -> 489,48 -> 487,48 -> 487,44
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87
483,44 -> 483,48 -> 481,48 -> 481,55 -> 489,55 -> 489,48 -> 487,48 -> 487,44
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87
469,93 -> 473,93
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
506,28 -> 511,28
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
469,166 -> 473,166
460,159 -> 460,154 -> 460,159 -> 462,159 -> 462,151 -> 462,159 -> 464,159 -> 464,152 -> 464,159
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
468,137 -> 468,132 -> 468,137 -> 470,137 -> 470,130 -> 470,137 -> 472,137 -> 472,136 -> 472,137 -> 474,137 -> 474,127 -> 474,137 -> 476,137 -> 476,131 -> 476,137 -> 478,137 -> 478,130 -> 478,137 -> 480,137 -> 480,128 -> 480,137 -> 482,137 -> 482,128 -> 482,137 -> 484,137 -> 484,133 -> 484,137
466,74 -> 466,71 -> 466,74 -> 468,74 -> 468,64 -> 468,74 -> 470,74 -> 470,65 -> 470,74 -> 472,74 -> 472,68 -> 472,74 -> 474,74 -> 474,68 -> 474,74 -> 476,74 -> 476,71 -> 476,74 -> 478,74 -> 478,65 -> 478,74 -> 480,74 -> 480,73 -> 480,74 -> 482,74 -> 482,64 -> 482,74
461,87 -> 461,80 -> 461,87 -> 463,87 -> 463,80 -> 463,87 -> 465,87 -> 465,80 -> 465,87 -> 467,87 -> 467,86 -> 467,87

%% 2022\day14\test.txt
498,4 -> 498,6 -> 496,6
503,4 -> 502,4 -> 502,9 -> 494,9

%% 2022\day15\day15_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;

int segments_union_measure(int[][] a)
{
	auto n = a.length;
    Tuple!(int, bool)[] x;
    x.length = n * 2;
	foreach (i; 0..n)
	{
		x[i*2]   = tuple(a[i][0], false);
		x[i*2+1] = tuple(a[i][1], true);
	}

	x.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]));

	int result = 0;
	int c = 0;
	foreach (i; 0..n*2)
	{
        debug writeln("c = ", c, ", x[i][0] = ", x[i][0]);

		if (c && i)
			result += x[i][0] - x[i-1][0];
		if (x[i][1])
			++c;
		else
			--c;
	}
	return result;
}

void main(string[] args)
{

    auto segments = stdin.byLine.map!((x){
        int[4] a;
        x.formattedRead("Sensor at x=%d, y=%d: closest beacon is at x=%d, y=%d", a[0], a[1], a[2], a[3]);
        return a;
    }).map!((a) {
        a[2..$][] -= a[0..2][];
        int y = 2_000_000;
        //int y = 10;
        return [a[0] - abs(a[2]) - abs(a[3]) + abs(y - a[1]),
                a[0] + abs(a[2]) + abs(a[3]) - abs(y - a[1])];
    }).filter!(x => x[0] < x[1]).array;

    segments.segments_union_measure.writeln;

    // writeln(segments_union_measure([
    //     [1, 3],
    //     ]));

    // 0 1 2 3 . 5 6 7

}

%% 2022\day15\day15_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;

Tuple!(int, int) segments_union_measure(int[][] a)
{
	auto n = a.length;
    Tuple!(int, bool)[] x;
    x.length = n * 2;
	foreach (i; 0..n)
	{
		x[i*2]   = tuple(a[i][0], false);
		x[i*2+1] = tuple(a[i][1], true);
	}

	x.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]));

	int result = 0;
	int c = 0;
    int prev = x[0][0];
    int outsider = -1;
	foreach (i; 0..n*2)
	{
        debug writeln("c = ", c, ", x[i][0] = ", x[i][0]);

		if (c && i)
        {
			result += x[i][0] - x[i-1][0];
            if (prev != x[i-1][0])
                outsider = prev + 1;

            prev = x[i][0];
        }
		if (x[i][1])
			++c;
		else
			--c;
	}
	return tuple(result, outsider);
}

void main(string[] args)
{

    auto input = stdin.byLine.map!((x){
        int[4] a;
        x.formattedRead("Sensor at x=%d, y=%d: closest beacon is at x=%d, y=%d", a[0], a[1], a[2], a[3]);
        return a;
    }).array;

    int minxy = 0, maxxy = 4_000_000;
    foreach (y; minxy..maxxy+1)
    {
        auto segments = input.map!((a) {
            a[2..$][] -= a[0..2][];
            return [clamp(a[0] - abs(a[2]) - abs(a[3]) + abs(y - a[1]), minxy, maxxy),
                    clamp(a[0] + abs(a[2]) + abs(a[3]) - abs(y - a[1]), minxy, maxxy)];
        }).filter!(x => x[0] < x[1]).array;

        auto result = segments.segments_union_measure;
        if (result[0] == maxxy - minxy - 2)
        {
            writeln(result[1] * 4_000_000L + y);
        }
    }
}

%% 2022\day15\in.txt
Sensor at x=1363026, y=2928920: closest beacon is at x=1571469, y=3023534
Sensor at x=2744178, y=3005943: closest beacon is at x=3091714, y=3106683
Sensor at x=223983, y=2437431: closest beacon is at x=-278961, y=3326224
Sensor at x=2454616, y=2576344: closest beacon is at x=2885998, y=2387754
Sensor at x=1551436, y=29248: closest beacon is at x=1865296, y=-1279130
Sensor at x=2997120, y=2493979: closest beacon is at x=2885998, y=2387754
Sensor at x=1588355, y=3153332: closest beacon is at x=1571469, y=3023534
Sensor at x=3539081, y=3302128: closest beacon is at x=3309042, y=3583067
Sensor at x=3973905, y=60392: closest beacon is at x=3515381, y=-806927
Sensor at x=3305001, y=3120691: closest beacon is at x=3091714, y=3106683
Sensor at x=3859262, y=2668840: closest beacon is at x=3574747, y=2000000
Sensor at x=2475557, y=3997856: closest beacon is at x=2364210, y=4052453
Sensor at x=2775306, y=3668540: closest beacon is at x=3309042, y=3583067
Sensor at x=3018235, y=2285225: closest beacon is at x=2885998, y=2387754
Sensor at x=3033163, y=3294719: closest beacon is at x=3091714, y=3106683
Sensor at x=3079956, y=3215569: closest beacon is at x=3091714, y=3106683
Sensor at x=3994355, y=1831842: closest beacon is at x=3574747, y=2000000
Sensor at x=1741021, y=3231978: closest beacon is at x=1571469, y=3023534
Sensor at x=1873455, y=3917294: closest beacon is at x=2364210, y=4052453
Sensor at x=3128140, y=2938277: closest beacon is at x=3091714, y=3106683
Sensor at x=732217, y=3603298: closest beacon is at x=-278961, y=3326224
Sensor at x=3884431, y=3834735: closest beacon is at x=3309042, y=3583067
Sensor at x=3679358, y=1029949: closest beacon is at x=3574747, y=2000000
Sensor at x=2260133, y=3563353: closest beacon is at x=2364210, y=4052453
Sensor at x=60149, y=3320681: closest beacon is at x=-278961, y=3326224
Sensor at x=3132535, y=2405693: closest beacon is at x=2885998, y=2387754
Sensor at x=3028313, y=2829410: closest beacon is at x=3091714, y=3106683
Sensor at x=3142423, y=3921417: closest beacon is at x=3309042, y=3583067
Sensor at x=2636416, y=939525: closest beacon is at x=2885998, y=2387754
Sensor at x=524530, y=681397: closest beacon is at x=-1031499, y=681463
Sensor at x=3155000, y=1666362: closest beacon is at x=3574747, y=2000000
Sensor at x=2169350, y=3040469: closest beacon is at x=1571469, y=3023534
Sensor at x=1663350, y=1595182: closest beacon is at x=1571469, y=3023534
Sensor at x=3311582, y=3386773: closest beacon is at x=3309042, y=3583067

%% 2022\day15\test.txt
Sensor at x=2, y=18: closest beacon is at x=-2, y=15
Sensor at x=9, y=16: closest beacon is at x=10, y=16
Sensor at x=13, y=2: closest beacon is at x=15, y=3
Sensor at x=12, y=14: closest beacon is at x=10, y=16
Sensor at x=10, y=20: closest beacon is at x=10, y=16
Sensor at x=14, y=17: closest beacon is at x=10, y=16
Sensor at x=8, y=7: closest beacon is at x=2, y=10
Sensor at x=2, y=0: closest beacon is at x=2, y=10
Sensor at x=0, y=11: closest beacon is at x=2, y=10
Sensor at x=20, y=14: closest beacon is at x=25, y=17
Sensor at x=17, y=20: closest beacon is at x=21, y=22
Sensor at x=16, y=7: closest beacon is at x=15, y=3
Sensor at x=14, y=3: closest beacon is at x=15, y=3
Sensor at x=20, y=1: closest beacon is at x=15, y=3

%% 2022\day16\day16_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

struct Valve
{
    int rate;
    string name;
    string[] pipes;
}

struct State
{
    int output;
    int[] open;
}

void main(string[] args)
{
    int N = 0;
    int[string] indicies;
    Valve[string] graph;
    int[] rates;
    foreach (line; stdin.byLine)
    {
        Valve valve;
        string pipes;
        line.formattedRead("Valve %s has flow rate=%d; %s", valve.name, valve.rate, pipes);
        valve.pipes = pipes.split(", ").array;
        valve.pipes[0] = valve.pipes[0][$-2..$];
        graph[valve.name] = valve;

        writeln(valve.name, " ", N);

        indicies[valve.name] = N++;
        rates ~= valve.rate;
    }

    enum static_N = 60;
    enforce(N < static_N);
    int[static_N][static_N] adjacency = 2000*N;
    foreach (i; 0..N)
        adjacency[i][i] = 0;

    foreach (k, v; graph)
    {
        int i = indicies[k];
        foreach (p; v.pipes)
        {
            int j = indicies[p];
            adjacency[i][j] = adjacency[j][i] = 1;
        }
    }

    // Floyd
    for (int k=0; k<N; ++k)
        for (int i=0; i<N; ++i)
            for (int j=0; j<N; ++j)
                adjacency[i][j] = min (adjacency[i][j], adjacency[i][k] + adjacency[k][j]);

    auto zero_valves = graph.keys.filter!(k => graph[k].rate == 0)
                            .map!(x => indicies[x]);

    auto non_zero_valves = graph.keys.filter!(k => graph[k].rate != 0)
                                .map!(x => indicies[x]);

    int go(int curr, int[] open, int minutes)
    {
        int m = 0;
        bool found = false;
        foreach (i; 0..N)
        {
            int d = adjacency[curr][i] + 1;

            if (open[i] == 0 && minutes > d)
            {
                found = true;
                //int o = zip(open, rates).map!(x => x[0] * x[1]).sum * d;
                int o = rates[i] * (minutes - d);

                auto nopen = open.dup;
                nopen[i] = 1;
                o += go(i, nopen, minutes - d);

                if (o > m)
                    m = o;
            }
        }

        // if (!found)
        //     m = zip(open, rates).map!(x => x[0] * x[1]).sum * minutes;

        return m;
    }

    int[] open;
    open.length = N;
    foreach (z; zero_valves)
        open[z] = 1;
    writeln(go(indicies["AA"], open, 30));
}

%% 2022\day16\day16_1a.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

struct Valve
{
    int rate;
    string name;
    string[] pipes;
}

struct State
{
    int output;
    int[] open;
}

void main(string[] args)
{
    int N = 0;
    int[string] indicies;
    Valve[string] graph;
    int[] rates;
    foreach (line; stdin.byLine)
    {
        Valve valve;
        string pipes;
        line.formattedRead("Valve %s has flow rate=%d; %s", valve.name, valve.rate, pipes);
        valve.pipes = pipes.split(", ").array;
        valve.pipes[0] = valve.pipes[0][$-2..$];
        graph[valve.name] = valve;

        writeln(valve.name, " ", N);

        indicies[valve.name] = N++;
        rates ~= valve.rate;
    }

    //writeln(graph);

    enum static_N = 60;
    enforce(N < static_N);
    int[static_N][static_N] adjacency = 2000*N;
    foreach (i; 0..N)
        adjacency[i][i] = 0;

    foreach (k, v; graph)
    {
        int i = indicies[k];
        foreach (p; v.pipes)
        {
            int j = indicies[p];
            adjacency[i][j] = adjacency[j][i] = 1;
        }
    }

    // Floyd
    for (int k=0; k<N; ++k)
        for (int i=0; i<N; ++i)
            for (int j=0; j<N; ++j)
                adjacency[i][j] = min (adjacency[i][j], adjacency[i][k] + adjacency[k][j]);

    auto zero_valves = graph.keys.filter!(k => graph[k].rate == 0)
                            .map!(x => indicies[x]);

    State[Tuple!(int, int)] dict;

    State s;
    s.output = 0;
    s.open.length = N;
    foreach (z; zero_valves)
        s.open[z] = 1;
    auto t = tuple(indicies["AA"], 30);
    dict[t] = s;
    Tuple!(int, int)[] queue;
    queue ~= t;

    while (!queue.empty)
    {
        t = queue.front;
        queue.popFront;
        s = dict[t];

        foreach (i; 0..N)
        {
            if (s.open[i] == 0)
            {
                int d = adjacency[t[0]][i] + 1;
                int o = s.output + zip(s.open, rates).map!(x => x[0] * x[1]).sum * d;
                //writeln(i, " ", t[0], " ", s.open, " ", rates);
                //writeln(i, " ", t[0], " ", d);

                if (t[1] - d < 0)
                    break;

                auto tt = tuple(i, t[1] - d);

                State ss;
                ss.output = o;
                ss.open = s.open.dup;
                ss.open[i] = 1;

                dict.update(tt,
                () {
                    queue ~= tt;
                    return ss;
                },
                (ref State old) {
                    // int o1 = o +          zip(s  .open, rates).map!(x => x[0] * x[1]).sum * tt[1];
                    // int o2 = old.output + zip(old.open, rates).map!(x => x[0] * x[1]).sum * tt[1];
                    // if (o1 > o2)
                    if (o >= old.output)
                    {
                        old = ss;
                        queue ~= tt;
                    }
                });
            }
        }

        // writeln(queue.length);

        // writeln;
        // foreach (k, v; dict)
        // {
        //     int o = v.output + zip(v.open, rates).map!(x => x[0] * x[1]).sum * k[1];
        //     writeln(k, " ", v, " ", o);
        // }

        // writeln;
        // foreach (k, v; dict)
        // {
        //     if (k[1] == 21)
        //     {
        //         int o = v.output + zip(v.open, rates).map!(x => x[0] * x[1]).sum * k[1];
        //         writeln(k, " ", v, " ", o);
        //     }
        // }
    }



    // writeln;
    // foreach (k, v; dict)
    // {
    //     int o = v.output + zip(v.open, rates).map!(x => x[0] * x[1]).sum * k[1];
    //     writeln(k, " ", v, " ", o);
    // }

    int m = 0;
    // writeln;
    foreach (k, v; dict)
    {
        int o = v.output + zip(v.open, rates).map!(x => x[0] * x[1]).sum * k[1];
        if (o > m)
            m = o;
    }
    writeln(m);
}

%% 2022\day16\day16_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

struct Valve
{
    int rate;
    string name;
    string[] pipes;
}

struct State
{
    int output;
    int[] open;
}

void main(string[] args)
{
    int N = 0;
    int[string] indicies;
    Valve[string] graph;
    int[] rates;
    foreach (line; stdin.byLine)
    {
        Valve valve;
        string pipes;
        line.formattedRead("Valve %s has flow rate=%d; %s", valve.name, valve.rate, pipes);
        valve.pipes = pipes.split(", ").array;
        valve.pipes[0] = valve.pipes[0][$-2..$];
        graph[valve.name] = valve;

        writeln(valve.name, " ", N);

        indicies[valve.name] = N++;
        rates ~= valve.rate;
    }

    enum static_N = 60;
    enforce(N < static_N);
    int[static_N][static_N] adjacency = 2000*N;
    foreach (i; 0..N)
        adjacency[i][i] = 0;

    foreach (k, v; graph)
    {
        int i = indicies[k];
        foreach (p; v.pipes)
        {
            int j = indicies[p];
            adjacency[i][j] = adjacency[j][i] = 1;
        }
    }

    // Floyd
    for (int k=0; k<N; ++k)
        for (int i=0; i<N; ++i)
            for (int j=0; j<N; ++j)
                adjacency[i][j] = min (adjacency[i][j], adjacency[i][k] + adjacency[k][j]);

    auto zero_valves = graph.keys.filter!(k => graph[k].rate == 0)
                            .map!(x => indicies[x]);

    auto non_zero_valves = graph.keys.filter!(k => graph[k].rate != 0)
                                .map!(x => indicies[x]);

    int go(int curr, int[] open, int minutes, bool elephant)
    {
        int m = 0;
        bool found = false;
        foreach (i; 0..N)
        {
            int d = adjacency[curr][i] + 1;
            if (d >= minutes || open[i] != 0)
                continue;

            found = true;
            int o = rates[i] * (minutes - d);

            auto nopen = open.dup;
            nopen[i] = 1;
            o += go(i, nopen, minutes - d, elephant);

            if (o > m)
                m = o;
        }

        if (!found && elephant)
            return go(indicies["AA"], open, 26, false);

        return m;
    }

    int[] open;
    open.length = N;
    foreach (z; zero_valves)
        open[z] = 1;
    writeln(go(indicies["AA"], open, 26, true));
}

%% 2022\day16\day16_2.py
#!/usr/bin/env python3

from os import path
from collections import defaultdict
from networkx import *
import functools


@functools.cache
def do(pos, visited, minutes, elephant):
    if minutes == 0:
        if elephant:
            return do("AA", visited, 26, False)
        return 0

    best = 0
    found = False
    for to, dist in graph[pos]:
        if dist >= minutes or to in visited:
            continue
        found = True
        result = do(to, visited | {to}, minutes - dist, elephant) + rates[to] * (
            minutes - dist
        )
        if result > best:
            best = result

    if not found and elephant:
        return do("AA", visited, 26, False)

    return best


with open(path.join(path.dirname(__file__), "input.txt")) as f:
    G = Graph()
    rates = {"AA": 0}
    for line in f.read().splitlines():
        words = line.split()
        name = words[1]
        rate = int(words[4][5:-1])
        if rate > 0:
            rates[name] = rate
        G.add_node(name)
        for to in "".join(words[9:]).split(","):
            G.add_edge(name, to)

    graph = defaultdict(list)
    for fro in rates:
        for to in rates:
            graph[fro].append((to, shortest_path_length(G, fro, to) + 1))

    print("Part 1:", do("AA", frozenset(["AA"]), 30, False))
    print("Part 2:", do("AA", frozenset(["AA"]), 26, True))

%% 2022\day16\in.sorted.txt
Valve AA has flow rate=0; tunnels lead to valves RN, NH, VJ, JG, KS
Valve BF has flow rate=0; tunnels lead to valves RM, FU
Valve BL has flow rate=0; tunnels lead to valves BU, JT
Valve BN has flow rate=0; tunnels lead to valves TO, JT
Valve BT has flow rate=0; tunnels lead to valves EZ, TO
Valve BU has flow rate=0; tunnels lead to valves IR, BL
Valve CA has flow rate=0; tunnels lead to valves PH, IR
Valve CP has flow rate=0; tunnels lead to valves FU, ZH
Valve CX has flow rate=0; tunnels lead to valves NT, UV
Valve EH has flow rate=0; tunnels lead to valves OY, GS
Valve ES has flow rate=0; tunnels lead to valves KE, JT
Valve EU has flow rate=0; tunnels lead to valves EZ, FC
Valve EZ has flow rate=8; tunnels lead to valves BT, EU, VJ, PJ, HX
Valve FC has flow rate=22; tunnels lead to valves TG, EU
Valve FS has flow rate=0; tunnels lead to valves KE, XQ
Valve FU has flow rate=14; tunnels lead to valves BF, CP
Valve GS has flow rate=0; tunnels lead to valves PT, EH
Valve HV has flow rate=0; tunnels lead to valves MO, IR
Valve HX has flow rate=0; tunnels lead to valves EZ, OY
Valve IF has flow rate=25; tunnels lead to valves MO, YI
Valve IL has flow rate=0; tunnels lead to valves YI, PH
Valve IR has flow rate=13; tunnels lead to valves HV, CA, BU, MA, SQ
Valve JG has flow rate=0; tunnels lead to valves JL, AA
Valve JJ has flow rate=0; tunnels lead to valves QG, JU
Valve JL has flow rate=0; tunnels lead to valves JG, OY
Valve JT has flow rate=9; tunnels lead to valves ES, RL, BL, BN
Valve JU has flow rate=0; tunnels lead to valves JJ, OY
Valve KE has flow rate=21; tunnels lead to valves ES, SQ, FS
Valve KS has flow rate=0; tunnels lead to valves TO, AA
Valve MA has flow rate=0; tunnels lead to valves SV, IR
Valve MO has flow rate=0; tunnels lead to valves IF, HV
Valve NH has flow rate=0; tunnels lead to valves PA, AA
Valve NL has flow rate=0; tunnels lead to valves SV, QD
Valve NN has flow rate=23; tunnel leads to valve RM
Valve NT has flow rate=0; tunnels lead to valves TO, CX
Valve OJ has flow rate=0; tunnels lead to valves UV, QG
Valve OY has flow rate=11; tunnels lead to valves HX, JL, ZH, EH, JU
Valve PA has flow rate=0; tunnels lead to valves QG, NH
Valve PH has flow rate=20; tunnels lead to valves IL, CA, RL, QD
Valve PJ has flow rate=0; tunnels lead to valves YW, EZ
Valve PT has flow rate=18; tunnel leads to valve GS
Valve QD has flow rate=0; tunnels lead to valves NL, PH
Valve QG has flow rate=5; tunnels lead to valves TX, JJ, PA, YW, OJ
Valve RL has flow rate=0; tunnels lead to valves PH, JT
Valve RM has flow rate=0; tunnels lead to valves NN, BF
Valve RN has flow rate=0; tunnels lead to valves AA, YQ
Valve SQ has flow rate=0; tunnels lead to valves IR, KE
Valve SV has flow rate=16; tunnels lead to valves NL, MA, XQ
Valve TG has flow rate=0; tunnels lead to valves YB, FC
Valve TO has flow rate=3; tunnels lead to valves BT, NT, TX, BN, KS
Valve TX has flow rate=0; tunnels lead to valves TO, QG
Valve UV has flow rate=19; tunnels lead to valves YB, OJ, YQ, CX
Valve VJ has flow rate=0; tunnels lead to valves EZ, AA
Valve XQ has flow rate=0; tunnels lead to valves SV, FS
Valve YB has flow rate=0; tunnels lead to valves UV, TG
Valve YI has flow rate=0; tunnels lead to valves IL, IF
Valve YQ has flow rate=0; tunnels lead to valves UV, RN
Valve YW has flow rate=0; tunnels lead to valves QG, PJ
Valve ZH has flow rate=0; tunnels lead to valves OY, CP

%% 2022\day16\in.txt
Valve BT has flow rate=0; tunnels lead to valves EZ, TO
Valve OJ has flow rate=0; tunnels lead to valves UV, QG
Valve SQ has flow rate=0; tunnels lead to valves IR, KE
Valve JT has flow rate=9; tunnels lead to valves ES, RL, BL, BN
Valve PH has flow rate=20; tunnels lead to valves IL, CA, RL, QD
Valve YI has flow rate=0; tunnels lead to valves IL, IF
Valve BU has flow rate=0; tunnels lead to valves IR, BL
Valve IR has flow rate=13; tunnels lead to valves HV, CA, BU, MA, SQ
Valve SV has flow rate=16; tunnels lead to valves NL, MA, XQ
Valve JG has flow rate=0; tunnels lead to valves JL, AA
Valve NL has flow rate=0; tunnels lead to valves SV, QD
Valve FS has flow rate=0; tunnels lead to valves KE, XQ
Valve UV has flow rate=19; tunnels lead to valves YB, OJ, YQ, CX
Valve MA has flow rate=0; tunnels lead to valves SV, IR
Valve YB has flow rate=0; tunnels lead to valves UV, TG
Valve YQ has flow rate=0; tunnels lead to valves UV, RN
Valve EZ has flow rate=8; tunnels lead to valves BT, EU, VJ, PJ, HX
Valve EU has flow rate=0; tunnels lead to valves EZ, FC
Valve KE has flow rate=21; tunnels lead to valves ES, SQ, FS
Valve YW has flow rate=0; tunnels lead to valves QG, PJ
Valve PJ has flow rate=0; tunnels lead to valves YW, EZ
Valve OY has flow rate=11; tunnels lead to valves HX, JL, ZH, EH, JU
Valve CX has flow rate=0; tunnels lead to valves NT, UV
Valve HV has flow rate=0; tunnels lead to valves MO, IR
Valve EH has flow rate=0; tunnels lead to valves OY, GS
Valve NN has flow rate=23; tunnel leads to valve RM
Valve CP has flow rate=0; tunnels lead to valves FU, ZH
Valve FU has flow rate=14; tunnels lead to valves BF, CP
Valve BF has flow rate=0; tunnels lead to valves RM, FU
Valve RN has flow rate=0; tunnels lead to valves AA, YQ
Valve BN has flow rate=0; tunnels lead to valves TO, JT
Valve HX has flow rate=0; tunnels lead to valves EZ, OY
Valve JL has flow rate=0; tunnels lead to valves JG, OY
Valve KS has flow rate=0; tunnels lead to valves TO, AA
Valve JU has flow rate=0; tunnels lead to valves JJ, OY
Valve PA has flow rate=0; tunnels lead to valves QG, NH
Valve JJ has flow rate=0; tunnels lead to valves QG, JU
Valve IL has flow rate=0; tunnels lead to valves YI, PH
Valve ES has flow rate=0; tunnels lead to valves KE, JT
Valve TX has flow rate=0; tunnels lead to valves TO, QG
Valve GS has flow rate=0; tunnels lead to valves PT, EH
Valve QD has flow rate=0; tunnels lead to valves NL, PH
Valve TG has flow rate=0; tunnels lead to valves YB, FC
Valve BL has flow rate=0; tunnels lead to valves BU, JT
Valve ZH has flow rate=0; tunnels lead to valves OY, CP
Valve PT has flow rate=18; tunnel leads to valve GS
Valve CA has flow rate=0; tunnels lead to valves PH, IR
Valve IF has flow rate=25; tunnels lead to valves MO, YI
Valve NH has flow rate=0; tunnels lead to valves PA, AA
Valve TO has flow rate=3; tunnels lead to valves BT, NT, TX, BN, KS
Valve RL has flow rate=0; tunnels lead to valves PH, JT
Valve FC has flow rate=22; tunnels lead to valves TG, EU
Valve AA has flow rate=0; tunnels lead to valves RN, NH, VJ, JG, KS
Valve XQ has flow rate=0; tunnels lead to valves SV, FS
Valve QG has flow rate=5; tunnels lead to valves TX, JJ, PA, YW, OJ
Valve VJ has flow rate=0; tunnels lead to valves EZ, AA
Valve RM has flow rate=0; tunnels lead to valves NN, BF
Valve NT has flow rate=0; tunnels lead to valves TO, CX
Valve MO has flow rate=0; tunnels lead to valves IF, HV

%% 2022\day16\input.txt
Valve BT has flow rate=0; tunnels lead to valves EZ, TO
Valve OJ has flow rate=0; tunnels lead to valves UV, QG
Valve SQ has flow rate=0; tunnels lead to valves IR, KE
Valve JT has flow rate=9; tunnels lead to valves ES, RL, BL, BN
Valve PH has flow rate=20; tunnels lead to valves IL, CA, RL, QD
Valve YI has flow rate=0; tunnels lead to valves IL, IF
Valve BU has flow rate=0; tunnels lead to valves IR, BL
Valve IR has flow rate=13; tunnels lead to valves HV, CA, BU, MA, SQ
Valve SV has flow rate=16; tunnels lead to valves NL, MA, XQ
Valve JG has flow rate=0; tunnels lead to valves JL, AA
Valve NL has flow rate=0; tunnels lead to valves SV, QD
Valve FS has flow rate=0; tunnels lead to valves KE, XQ
Valve UV has flow rate=19; tunnels lead to valves YB, OJ, YQ, CX
Valve MA has flow rate=0; tunnels lead to valves SV, IR
Valve YB has flow rate=0; tunnels lead to valves UV, TG
Valve YQ has flow rate=0; tunnels lead to valves UV, RN
Valve EZ has flow rate=8; tunnels lead to valves BT, EU, VJ, PJ, HX
Valve EU has flow rate=0; tunnels lead to valves EZ, FC
Valve KE has flow rate=21; tunnels lead to valves ES, SQ, FS
Valve YW has flow rate=0; tunnels lead to valves QG, PJ
Valve PJ has flow rate=0; tunnels lead to valves YW, EZ
Valve OY has flow rate=11; tunnels lead to valves HX, JL, ZH, EH, JU
Valve CX has flow rate=0; tunnels lead to valves NT, UV
Valve HV has flow rate=0; tunnels lead to valves MO, IR
Valve EH has flow rate=0; tunnels lead to valves OY, GS
Valve NN has flow rate=23; tunnel leads to valve RM
Valve CP has flow rate=0; tunnels lead to valves FU, ZH
Valve FU has flow rate=14; tunnels lead to valves BF, CP
Valve BF has flow rate=0; tunnels lead to valves RM, FU
Valve RN has flow rate=0; tunnels lead to valves AA, YQ
Valve BN has flow rate=0; tunnels lead to valves TO, JT
Valve HX has flow rate=0; tunnels lead to valves EZ, OY
Valve JL has flow rate=0; tunnels lead to valves JG, OY
Valve KS has flow rate=0; tunnels lead to valves TO, AA
Valve JU has flow rate=0; tunnels lead to valves JJ, OY
Valve PA has flow rate=0; tunnels lead to valves QG, NH
Valve JJ has flow rate=0; tunnels lead to valves QG, JU
Valve IL has flow rate=0; tunnels lead to valves YI, PH
Valve ES has flow rate=0; tunnels lead to valves KE, JT
Valve TX has flow rate=0; tunnels lead to valves TO, QG
Valve GS has flow rate=0; tunnels lead to valves PT, EH
Valve QD has flow rate=0; tunnels lead to valves NL, PH
Valve TG has flow rate=0; tunnels lead to valves YB, FC
Valve BL has flow rate=0; tunnels lead to valves BU, JT
Valve ZH has flow rate=0; tunnels lead to valves OY, CP
Valve PT has flow rate=18; tunnel leads to valve GS
Valve CA has flow rate=0; tunnels lead to valves PH, IR
Valve IF has flow rate=25; tunnels lead to valves MO, YI
Valve NH has flow rate=0; tunnels lead to valves PA, AA
Valve TO has flow rate=3; tunnels lead to valves BT, NT, TX, BN, KS
Valve RL has flow rate=0; tunnels lead to valves PH, JT
Valve FC has flow rate=22; tunnels lead to valves TG, EU
Valve AA has flow rate=0; tunnels lead to valves RN, NH, VJ, JG, KS
Valve XQ has flow rate=0; tunnels lead to valves SV, FS
Valve QG has flow rate=5; tunnels lead to valves TX, JJ, PA, YW, OJ
Valve VJ has flow rate=0; tunnels lead to valves EZ, AA
Valve RM has flow rate=0; tunnels lead to valves NN, BF
Valve NT has flow rate=0; tunnels lead to valves TO, CX
Valve MO has flow rate=0; tunnels lead to valves IF, HV

%% 2022\day16\test.rand.txt
Valve JJ has flow rate=21; tunnel leads to valve II
Valve CC has flow rate=2; tunnels lead to valves DD, BB
Valve BB has flow rate=13; tunnels lead to valves CC, AA
Valve EE has flow rate=3; tunnels lead to valves FF, DD
Valve II has flow rate=0; tunnels lead to valves AA, JJ
Valve AA has flow rate=0; tunnels lead to valves DD, II, BB
Valve FF has flow rate=0; tunnels lead to valves EE, GG
Valve GG has flow rate=0; tunnels lead to valves FF, HH
Valve HH has flow rate=22; tunnel leads to valve GG
Valve DD has flow rate=20; tunnels lead to valves CC, AA, EE

%% 2022\day16\test.txt
Valve AA has flow rate=0; tunnels lead to valves DD, II, BB
Valve BB has flow rate=13; tunnels lead to valves CC, AA
Valve CC has flow rate=2; tunnels lead to valves DD, BB
Valve DD has flow rate=20; tunnels lead to valves CC, AA, EE
Valve EE has flow rate=3; tunnels lead to valves FF, DD
Valve FF has flow rate=0; tunnels lead to valves EE, GG
Valve GG has flow rate=0; tunnels lead to valves FF, HH
Valve HH has flow rate=22; tunnel leads to valve GG
Valve II has flow rate=0; tunnels lead to valves AA, JJ
Valve JJ has flow rate=21; tunnel leads to valve II

%% 2022\day17\day17_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

immutable shapes = [
    ["@@@@"],

    [".@.",
     "@@@",
     ".@."],

    ["..@",
     "..@",
     "@@@"],

    ["@",
     "@",
     "@",
     "@"],

    ["@@",
     "@@"]
    ];

string merge(string src, string dst)
{
    return zip(src, dst).map!((x){
        if (x[1] == '.')
            return x[0];

        return x[0] == '.' || x[0] == '+' ? x[1] : '*';
    }).to!string;
}

unittest
{
    assert(merge("+.@.....+", "+....#..+") == "+.@..#..+");
    assert(merge("+....@..+", "+....#..+") == "+....*..+");
    assert(merge("+.......@", "+....#..+") == "+....#..*");
}

string extend(string src, int posx)
{
    string d = "+";
    if (posx < 0)
    {
        if (src.front != '.')
            d = "*";
        src = src[1..$];
    }

    foreach (i; 0..posx)
        d ~= ".";

    d ~= src;

    foreach (i; 0..8L - d.length)
        d ~= ".";

    if (d.length == 9)
        return d[0..$-1] ~ (d[$-1] == '.' ? "+" : "@");

    return d ~ "+";
}

unittest
{
    assert(extend(".@.", 0)  == "+.@.....+");
    assert(extend(".@.", 2)  == "+...@...+");
    assert(extend(".@.", 5)  == "+......@+");

    assert(extend(".@.", -1) == "+@......+");
    assert(extend("@@@", -1) == "*@@.....+");
}

void main(string[] args)
{
    char[][] field = ["+#######+".dup];

    string jets = readln.strip;

    auto shapes_cycle = shapes.cycle;
    auto jets_cycle = jets.cycle;

    foreach (sn; 0..2022)
    {
        int posx = 2, posy = 0;
        auto shape = shapes_cycle.front;
        shapes_cycle.popFront;

        // grow
        auto top = field.retro.find!(x => x[1..$-1].canFind('#'));
        auto add = 3L + shape.length - field.length + top.length;
        foreach (i; 0..max(0, add))
            field ~= "+.......+".dup;
        if (add < 0)
            posy = -add.to!int;

        foreach (t; sequence!((a,n) => n))
        {
            auto jet = jets_cycle.front.to!char;

            if (t % 2 == 0)
            {
                posx += jet == '>' ? 1 : -1;
                debug writeln("jet ", jet);
            }
            else
            {
                debug writeln("move down");
                posy++;
            }

            debug
            {
                foreach (i; 0..posy)
                    field[$ - 1 - i].writeln;
            }

            bool rest = false;
            foreach (i; 0..shape.length)
            {
                auto m = merge(
                    extend(shape[i], posx),
                    field[$ - 1 - posy - i].to!string
                    );

                if (m.canFind('*'))
                {
                    if (t % 2 == 0)
                    {
                        posx += jet == '<' ? 1 : -1;
                        debug writeln("revert jet");
                    }
                    else
                    {
                        posy--;
                        rest = true;
                        break;
                    }
                }

                debug m.writeln;
            }

            debug
            {
                foreach (i; posy + shape.length..field.length)
                    field[$ - 1 - i].writeln;
            }

            debug writeln;

            if (rest)
            {
                foreach (i; 0..shape.length)
                {
                    auto m = merge(
                        extend(shape[i], posx),
                        field[$ - 1 - posy - i].to!string
                        );
                    m.map!(x => x == '@' ? '#' : x).copy(field[$ - 1 - posy - i]);
                }

                debug writeln("rest");
                break;
            }

            if (t % 2 == 0)
                jets_cycle.popFront;
        }
    }

    field[1..$].filter!(x => x.canFind('#')).walkLength.writeln;

    // // display
    // foreach (row; field.retro)
    //     row.writeln;
}

%% 2022\day17\day17_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

immutable shapes = [
    ["@@@@"],

    [".@.",
     "@@@",
     ".@."],

    ["..@",
     "..@",
     "@@@"],

    ["@",
     "@",
     "@",
     "@"],

    ["@@",
     "@@"]
    ];

string merge(string src, string dst)
{
    return zip(src, dst).map!((x){
        if (x[1] == '.')
            return x[0];

        return x[0] == '.' || x[0] == '+' ? x[1] : '*';
    }).to!string;
}

unittest
{
    assert(merge("+.@.....+", "+....#..+") == "+.@..#..+");
    assert(merge("+....@..+", "+....#..+") == "+....*..+");
    assert(merge("+.......@", "+....#..+") == "+....#..*");
}

string extend(string src, int posx)
{
    string d = "+";
    if (posx < 0)
    {
        if (src.front != '.')
            d = "*";
        src = src[1..$];
    }

    foreach (i; 0..posx)
        d ~= ".";

    d ~= src;

    foreach (i; 0..8L - d.length)
        d ~= ".";

    if (d.length == 9)
        return d[0..$-1] ~ (d[$-1] == '.' ? "+" : "@");

    return d ~ "+";
}

unittest
{
    assert(extend(".@.", 0)  == "+.@.....+");
    assert(extend(".@.", 2)  == "+...@...+");
    assert(extend(".@.", 5)  == "+......@+");

    assert(extend(".@.", -1) == "+@......+");
    assert(extend("@@@", -1) == "*@@.....+");
}

void main(string[] args)
{
    char[][] field = ["+#######+".dup];

    string jets = readln.strip;

    auto shapes_cycle = shapes.cycle;
    auto jets_cycle = jets.cycle;

    int[] ans;

    foreach (sn; 0..20220)
    {
        int posx = 2, posy = 0;
        auto shape = shapes_cycle.front;
        shapes_cycle.popFront;

        // grow
        auto top = field.retro.find!(x => x[1..$-1].canFind('#'));
        auto add = 3L + shape.length - field.length + top.length;
        foreach (i; 0..max(0, add))
            field ~= "+.......+".dup;
        if (add < 0)
            posy = -add.to!int;

        foreach (t; sequence!((a,n) => n))
        {
            auto jet = jets_cycle.front.to!char;

            if (t % 2 == 0)
            {
                posx += jet == '>' ? 1 : -1;
                debug writeln("jet ", jet);
            }
            else
            {
                debug writeln("move down");
                posy++;
            }

            debug
            {
                foreach (i; 0..posy)
                    field[$ - 1 - i].writeln;
            }

            bool rest = false;
            foreach (i; 0..shape.length)
            {
                auto m = merge(
                    extend(shape[i], posx),
                    field[$ - 1 - posy - i].to!string
                    );

                if (m.canFind('*'))
                {
                    if (t % 2 == 0)
                    {
                        posx += jet == '<' ? 1 : -1;
                        debug writeln("revert jet");
                    }
                    else
                    {
                        posy--;
                        rest = true;
                        break;
                    }
                }

                debug m.writeln;
            }

            debug
            {
                foreach (i; posy + shape.length..field.length)
                    field[$ - 1 - i].writeln;
            }

            debug writeln;

            if (rest)
            {
                foreach (i; 0..shape.length)
                {
                    auto m = merge(
                        extend(shape[i], posx),
                        field[$ - 1 - posy - i].to!string
                        );
                    m.map!(x => x == '@' ? '#' : x).copy(field[$ - 1 - posy - i]);
                }

                debug writeln("rest");
                break;
            }

            if (t % 2 == 0)
                jets_cycle.popFront;
        }

        ans ~= field[1..$].filter!(x => x.canFind('#')).walkLength;
    }

    auto diff = zip(ans[0..$-1], ans[1..$]).map!(x => x[1] - x[0]).array;

    int n = diff.length;
    long N = 1_000_000_000_000;
    foreach (int off; 0..n)
    {
        foreach (int cl; 6..n)
        {
            int l = off;
            int r = off + cl;

            int ll = l + cl;
            int rr = r + cl;

            if (
                l < 0  || l >= n  || r < 0  ||  r >= n ||
                ll < 0 || ll >= n || rr < 0 || rr >= n
                )
                break;

            if (equal(
                diff[l..r],
                diff[ll..rr]
                ))
            {
                long d = diff[off..off+cl].sum;
                long k  = (N - off) / cl;
                long r1 = (N - off) % cl;

                long ans2 = k * d + diff[off..(off+r1-1).to!uint].sum + ans[off];
                ans2.writeln;
                return;
            }
        }
    }

    ans[2022 - 1].writeln;
}

%% 2022\day17\floyd.py
def floyd(f, x0):
    # Main phase of algorithm: finding a repetition x_i = x_2i.
    # The hare moves twice as quickly as the tortoise and
    # the distance between them increases by 1 at each step.
    # Eventually they will both be inside the cycle and then,
    # at some point, the distance between them will be
    # divisible by the period λ.
    tortoise = f(x0) # f(x0) is the element/node next to x0.
    hare = f(f(x0))
    while tortoise != hare:
        tortoise = f(tortoise)
        hare = f(f(hare))

    # At this point the tortoise position, ν, which is also equal
    # to the distance between hare and tortoise, is divisible by
    # the period λ. So hare moving in circle one step at a time,
    # and tortoise (reset to x0) moving towards the circle, will
    # intersect at the beginning of the circle. Because the
    # distance between them is constant at 2ν, a multiple of λ,
    # they will agree as soon as the tortoise reaches index μ.

    # Find the position μ of first repetition.
    mu = 0
    tortoise = x0
    while tortoise != hare:
        tortoise = f(tortoise)
        hare = f(hare)   # Hare and tortoise move at same speed
        mu += 1

    # Find the length of the shortest cycle starting from x_μ
    # The hare moves one step at a time while tortoise is still.
    # lam is incremented until λ is found.
    lam = 1
    hare = f(tortoise)
    while tortoise != hare:
        hare = f(hare)
        lam += 1

    return lam, mu

%% 2022\day17\in.txt
>><<<>>>><<<><>>><><<<<>>>><>>>><<<<>><<<<>>>><<<<>>>><<<>>>><<<>><<<<>>><<<<><><<>>><>>>><<<>>><<><<<><<<>>><<>>><<<><<><<>><<>><<<>>>><<<<><<>>>><>><<<>><<>>><<<>>>><<<<>>><<>>><><<<>>><<>>>><>>><<<<>>>><<>><<<<><<<<>><<<<>>><<>>><<<<><>>>><<<><<<<>><>>><<<<><<>>><>><<><><<>>><<<>>><<<<><<>>><><<<>><><<<<>><><<<>><<<>><>><>><<><<<<>>>><<<<>>><><<<><<>>>><<><<>><<>><><<<>>><>><<<>><<<><<><><<>>><<>>>><<<<>>>><<><<>><<<><<>><<<<><>>><>><<>>>><<<<>>><<<>>><<<>>><>>><>>><<<<>>><<<<><<<<>>>><>><<><<>><<<><><>>>><>>>><<<><<<><<<><<>><<<>>><<<>>><<<>>>><<>>><<<>><<<>>><<<<><<<><<>><<<><<>>><<<<>><<<><<<>><<<>><<>>>><<>><>><<<><<<<>>>><><<>><<>>><<><<>>><<>>>><<>>><<><<<<>>><<<>>><><<<>><<><<<><>>>><<>>><<<<>>>><<>>><<<<><<<<>>><<<<>><<><<<<><<><<<><<<<><><<>>>><<>>>><>>><<>>>><<<<>><><<<>>>><<>>><<<>>>><<>><<>><<<<>>><<<>><<>><<<<>>><>>>><<<>>>><<<>><<<<>><<>>><<<>>><<>><<<><<<>>>><<>>><>><<>>>><<>>><>><>><<<<>><<<<>>>><<>><<<>><<<>>><<<>><<>>><<>>>><<>><<>><<><<<<><<<>>>><>><>><<<<>><>><<>>>><<<>><>>><<>><>><>>>><<<<>>><<<>>><>><<<<>>><<<<>>><><<<><<<><<<>>>><<<<><>>>><<><<<>>>><<>>>><>><>>><<<>>>><<<>>>><>>><<<<>>><<<><>>><>>>><<<>><><<<<>>><<<<>><<<><<<<><<<>>><<<<>>><<<<>><<<><>>><<<><<>><<<<>><<<<>>><<>>><<<>>><<<<>>><>><<<>>>><<<<>><<<>><>>><<<>>>><>>>><<><<<>>>><>>>><<<<>>><<<<><<<><<<>>>><<<>><<<<>>>><<<<>>>><<<<><<<>><>>><><<<<>><<<<>>>><<>><<>><<>><<<>>>><<>><<<<><<<<>><>><<<<>>><<<>>><<<>>><<<<><<>><<<<><<>>><<<>>><<<>><><>><<>><<<<>>><<<<>>>><<<>><>>>><<<<><>>>><>>><<<<>><<>>>><<<<>>><<<>>>><>>><<<><<><<<>><>>>><<<>><<<<>>><>>><<<>><>><<<>>>><<<<>>>><<>><<<>>><<<<>>><<<<><>><<<>><<<>><<<>>><>>><<<>><<<<>>><<<<>>><<<<>>><<<<>><<<<>><<<<>>><<<<>>>><<<>><<<>>><<>>>><<>><<<>>>><<<>><<>>>><<<>><<<<>>><<<<><<>>><>><>>>><<>>>><<<<><<<><<><<<><<<<>><><<<><<<>><<<><<>><<<<>>><<<>><<>>>><><<<><><>><>><<<<>><<><>><<<>>><<<>>>><<<><<<>><<>><<>>>><<<<><<>><>><<<>>>><<><<<>>><>>>><<<<>>>><<>>><<>>><<<>>>><<<>>>><<>><<<>>>><<<<>><<<>><<<<>><>><<>><<<>><<<>><<>>>><<<>><<<>><<<<>><<<<>><<<<>>><<<><<<><<<<>>>><<><<<<><<>><>>><<<<>>><<<<><<<<><<<>>><<<><<<>>>><>>><<>>>><>><><<><<<<>>><<<>>><>><<><<<>><<<<>>>><<>>><<<<>><<<><<<>>><<>>><>>>><<>>><<<<>><><<>><<><<>>>><<><<<<>>><<<>>>><>>><<>>><<>>><<>><<<><<<<>><>>>><>>><<<><<<<>>>><<<<>>><>>>><<<<>>><<<><>><><<<<>>><<>>>><<>>><<<>><<>>>><<<>>>><<>>><<>>>><>>><<<<>>>><<<<>>><><<<<>>>><><<<<>><<>>>><<><<>>>><<<><><>>>><><<<<>><<<<>>><<>><>><<<><<<<>>>><<<>>><<<<><<>>>><<<>>>><<<<>>><<<><<<>><<<>>>><<<<>><>>>><<<>><<<>><>>>><<>>>><><<<>>><<<>>>><><<>>><<<><<<><>>>><<>>><<<>>>><><>><><>>>><><<<<><<>><<<>>><>>><<<<>>>><<<<>>>><<<<>>><<><><<>>><<<<>><>>>><<>>><<<>>><<<<>>><<<<>><>><<<<>>>><<>><<>><<<<>><<<<>>>><>>><<<>>>><<<>><<<<>>>><>>>><<>><>>>><>>><<>>>><<<>>>><<<<>><<<<>>>><<<><<<<>>><>>><<<<>><<<<>><>>><>><<<<><<<>><<<><<>><>>>><<<<>><><<<><>>><<<><<>><<<<>>>><<><<<>>><<>><<<><<><<<<>>><<<<><<<><<<>>><>><<<><<<>>>><>>>><<<>>>><<<<>>>><<<>>><><<>>>><<>>>><><<>>><>>>><<<>>><>>>><<<><<<<>><<<>>><<><<><>>>><<<>>><><<<>>><>><>>><<<<>>><<><<<<>>><<<<>>><<>><<>>><<<><<<<>>><<><<<>>>><<<<>>><<<>><>>><<<>><<<>>><>>>><<>><<<<><<>>>><<>>>><<<><<>>>><><>><>>><>><<>><<<<><<><<>>>><>><<<>>><>>><>>>><<<>>>><<<>><<<>><<>><><<<<><<<<>>>><<>>>><<>><<<>><<>><<<<><<<>><>>>><<>>><<<<>><>>><<<<>><<<<>>><<<<><<<>><<<>>>><<<>>><<<>>>><<<<><<<<>>>><<>><<>>><<<><<<>>>><<>>><>><<>>>><<<>>>><<>>>><>>><>>><<>><<<<><<<<>><<<<>>><<<<>><>><<<>><>>>><><<<<>>>><>><<<>>>><<<><<>>><<><><<<>>><>><<><>>><<<<><<>><<<>><<<>>><<>>><<<>>><<<><<>><>>>><>><<<<>><><>>><>>>><>>><<<>>><<>><<<><>>><>>><<>>>><<<><<<<>>><<<<><<>><<<>>>><<<>>><<<><>>>><><<><<<<>>><<<<>><<<<>><<>>><<>>>><>>>><<<><<<><>>>><>><<>>><<>>>><<<<><>><><<<><<<>>><<<<>><<<><<<><>>><<<>>><>>><<<<>>><><>>>><<<<><<<<>>><<>>><<>>>><<<<>>>><>>><><<>>>><><<<>>><<<>>>><>><<>>><<<>>>><>>>><<<<>>>><>><<<>>>><>><>>>><<><>>><<>>><>>>><<<>>>><<<<><<<<>>><<<<>>>><><>><<><<><<<<>>>><<><<>><<>><<<>><<<<>>>><><><<>><>>>><>>><<>>><<>><<<<>><<>><<<<>>>><>>>><<>>>><<<>>>><<<<>>>><<>>><><<<<>>><<>><>>><<>>>><<<<>>><<<<>>><<>>><<><<<<>>><>>>><<<>>>><<<<><>>>><<<<>><<<<>>>><<>><<<>><<<<>>><<<<>><<<>><>>><<<>>>><>>>><<<><<<>>>><<<>>><<<<><<>>><<<>>><<>><><<<<>>>><<><<<>>><<<>>><<<>>><<<<>><<<<>><<<<>>>><<<><>><<><<<<>>>><<<<>><<<>>>><><<<>>><<<><>>>><<>>>><<<<>>>><<<<>>><<>><<<>>><<><<>>><<<>>>><<<<><<<<>>>><<<>>>><<<>>>><<><<<>>><<<>>><>><<>>><<<><<<>>>><<<>>>><<>>>><<<<>>>><<>>><>>><<<<>>><<<<><<<>>><<<><<<<>>>><><<>>><>>>><<>>>><<<>>><>><<<>>><<<>>><<>>>><<<<><<>><<>>>><<<<>><<>>>><>><<<<>>>><<><<<><>>>><<<<><<<>><<>>>><>><<>><<<<>>>><<<<>><<>>>><<>>><><<<<>><><<<<><<<<>>>><><>><<<<>><<<>>><>><<<><<<>><<<<>>>><>>><<<<>>><<<<><<>>><<<<>>><<<<><<<<>>>><>>>><<<>>>><>>><<>>>><<<<>><<><<<>>><<<>>>><<><<<<>>><>><<>>>><<<<>><><>><<><>><>>><<><<<>><<<<><>>><<<<>>><>>><>>>><>>><<>>>><<<<>>>><<<<>><>><<<<><<<<><<<<>><<<>>>><<<><<<>><>>><>>><<>>><<<<><<><<>>><<<>><<<>>><><<>>>><<<<>>><<<>>>><<>><<<>>>><<<<>>><<<<>>><>>><<<>>><<>><<<>>>><>>>><<>>><>><>><<>><<>>><<<<>>>><><><<>>>><<<>>>><<><<<>>>><>><>>><>>><<>><>>>><>><<>>><<<<>>><<<>>><<<>>>><<><<<>><><<>><>>>><<>>>><<<<>>>><>><><<<<>><<>>>><>><><>>><<<>>><>>>><>><<<<>><>><>><<<>>><><<>><>><<>><<<<>>>><><<>>><<<>>>><><<<><<<<>>>><>>><<>>><<<><<<<>><<<>>>><<<>>><<<>><>><<<<><<<<><<<>>>><<<>>><<><<<>>><<<<>>>><<<>>><><<<>><<<><<>>>><><>>><<<><<<>><<>>>><<<>><<<<><<><<<<>>><<>>><<<<>>>><<<>>>><<<<>>><<<<>><>><<>>><<><<<>>>><<<>><<<<><<>>>><<<<>><<<<>><<>>>><><<<<>><<<<>>><<<<>>>><<>>>><>>>><<>><<>>><<<>><<><<<>>>><<>>>><<<>><<<><<>><<><<<>><<<<><<>>>><>>><<>>>><<<><<>>>><<<>>>><<<>><<<<>>>><<<<>><<<<>><>>><>>>><<>>>><<><<>>><<<<><<>>>><>><<>><>>>><<<<>>><<<<>><<<<>>>><<<<><<<<><<><<><><<>>>><>><>>><<<<>><<>>><>>>><><<<><<>><<<>>>><<<<>><<<<><<>><<<><<>><<<>>><>><<<>><<>>>><<>><><><<<>>>><<<><<<>>>><>><<<>>><<<>>>><<>>>><<<<>>>><>><<<>><<<>>>><<<<>>>><>><<<<><<<>>><<<<>>><<>>><>>>><><>>>><<>>><<<>>>><>><<<<>>>><<>>><<><<><<<<>>>><<<><<<<>>>><<>>>><<<><<>>>><<<<>>>><<<<>>>><<<>>><<<<>>><<<><<<><<<>><<>><>>><<><<><<<<>><<<<>>>><<<<><<>>>><<<>><<<>>><<<>>><<<<><<<<>>><<<<>><<<>><>>><<>>><<<<>>><><<><<<>>><>><>>><<<>>>><<<>>><<<<>>>><<<>>><<<><<<><<<>>>><>>>><<<<>>><<>>><<>>>><<<><<<>>><<<>>>><<<<><<<<>>><<>><>>>><<<<><>><>><<>>><<><<<>>>><<<<>><<<<>><<>>>><<<<>>><<<<><>><<<>>>><<<<>>>><<<>>><<>>><<>>><><>>><><<<<><<<<>><<><><<><<<<>><<<>>>><<>>><<<<>><<<>>><<<<>>>><<<<>>>><<<>><<<><<>>><>>><<<<>><<>>><>><<<<>>><<<<>>>><<>><>>>><<<<>>><>><>><<<>>>><<<>>><<<>><<<<>>>><<<>>><<<>>>><<>><>>><<<<>>><<>><<<><<<>><<<>><<<>><<<<>><<<><<>>><><<<>>>><<<<>>><>>><<>>>><<<><<>>><>>>><><<>><<>><<<<>><<<<>>><<<>>>><>>>><<<><><<<<>><<>>>><<<<>>>><<<>>><<<<>>>><<<>>><<>>><<>>>><<>>><>>>><<<>><<<><>><<<><<><>>><>>>><<<>>><<>>>><<>><>><>>>><<<<>><<>>>><<><<>>><>><<<<><<><<<>>>><<<<>>><>>>><<<>>><<<<><<<>>>><<>>>><<<<>>>><<><<<<><><<>>><<<<>><>><<<>><<><>><<>>>><<<<><<<><<<>>><<<><<>>><<>>>><><<>>>><<>><>>>><<<<>>>><>><<><<<<>>>><<<<>>><<<>><<<>>><<>>><<<<><>>><<><>><<<<><>>>><<<>>><<<<><<><>><<<>>>><<><><><<>><<>>>><<<<>>><<<>>>><<<>><>>>><>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><>>>><<>>>><<<>>><<<<>><<<>><<><<>><>>>><<<><<<>>>><<<>>><<<>>>><<<>>>><<<>>>><<<<>><<<<>>><<<>>>><<><<<<><<<<>>>><<<<>><<<<>>>><<<>>><<<<>><<<<>>>><><<<<><<<<><>><<<>><<<><<>><<><<<>><<>><<>>>><<>>><>>><<<<>>><<<<>><<<<>>>><<<>>>><>><>>>><>>>><<>>><<<>><<>>><<<<><<<<>>><<<>>>><<><<>><<<<>><<<><<<>>><><<<<>><<<<>><<<>>>><>>>><<>>><<<<>>><<<<>>><<>>>><<<>>><<<<>>>><<<<>>><<<><><<<>>>><<<>><>>>><<<<>><<><<><<<><<<><>><<>>>><<<><<<<>><>>>><<>>>><>>><<<<>>><<<<>><<>>><<<>>><<<<>><<<<>>>><<<><>>><<<<>><>><<<><<<>>>><>>><<<<>>><<<>><>><>><<<>>>><<>>>><<<><<>>><<<<>>>><<>>><<<>><<<<>>><<>>><<<<><<<<>>>><<>>>><<<<>>>><<<<>>>><<><<<>><<<<>><<<>><<<>><<<<>>><>>><<<><>>>><<<<>>>><<>>>><<<>><<<<><><<<<>>><<<<>>>><<>>><<>>><<<>><<<<>>>><<<<>>>><>><>><<<<>>>><<<>>>><<><<<><<>><<<<>><<<>><<<<>><>>>><<<<>>>><<<<>>>><<<>>>><<<<>>><<>>>><<>>>><><<<>><<<>>><<<><<>>><><<<><>>>><<<<>>><>><>><<>>>><<<<>>>><<<<>>><>><<<<><<>>><>>>><<>><<>>>><<>>><<<<>>><<<>>><>><<<>><<<>>>><<<>><<<>><<>>><>><<<<>>><<<<>><<<><<<>><<<<>>>><<><<<>>><<<<>>><<><<><>>>><<<>>><<<>>>><<<>><<<>><<<<>><<<<>>><<<<>>>><<<>>><<<>><<<<>><<<>>>><><<><<><>><<<>>><<>>><<<<>>>><<<<>>><<<><<>><<<><<<<>><<<<>>><<<<><>>><<<>><<><><<<>>>><<<<><<<>>><<<>>>><<<<>>>><<<>><<<<>>>><<<><<<<>><<>>>><<<>><<>>>><<><<<>>>><><>><<<<>>><><<<>>>><<<><<><<>>><<<<>>><<<>><>><<<><<<>><<<<><<<<>><<<<><<<<>><><><<<><>>><>>><>>>><<<<>>>><<<>>><><>>>><<<<>>><<<>>><<<<>><<<>><<<><<><<><<>>>><><<<>><<><>>><<<<>>><<<<>>><<><<<<>><<<<><<<><<<>>>><<<>><<<>><<<<>><<<<><<<>>>><<<<><<<<>><<<<><<<<>>><<<<>>><>>><<<<>><<>>>><<<>>>><<<<>>><<>><<<<>><>>><>>>><<><<>>>><<>><>>>><>>><>><<>>>><<<<>>>><<<<><<<<><<<>>><<<>><<<<>>><><<<<>><<<<>><><<<<>>><<<<><<><<><<>><<<><>>>><<<<>><>><<>>>><<<>>>><>><>><<>>>><>><><<<>><><>>><<>>><<>><>>><>>>><<<<>><<>>><<>>><>><<<>>>><<<>><<<>>>><<<<>><<<<>>><<<>>>><<<<>>><>>><><<<<>>><>><<<>><<<<><<><<<>><<>>><<><<<<>>><<<>>><<<><>><><<<<>>>><<<><<><>><<>>>><<<>>><<<>>><<<><>><><<>>><<><<>>><><<>>>><>>><<<<>>><<>>><<<<><>><<<><><<<<><<>>><<>>>><<<>>><<<>><<>>>><<<><<<>><<>>>><<>>><<<<>>><<<>>>><<>>>><<<<><<>><<>><<><>>><<><<<<>><<>><<<>><<<<><><<<<>>><>><<<<>>>><<<>>>><<<<>><>>>><>>>><<<<><<>>><<<<>><<<<>><<<>><<<>><><<<<><<><<<><>>>><<<<>>>><>><><>><<<<><<>>>><<><>><<>>><<<<>>>><<<<>>>><>>>><<>>><<<>>>><<>>><<<>>>><<<<>><<<><>>>><<>><<>>><><<>><<<>>>><><<>>>><<<>><<<<>>><><>>><<<><<>>><<<<>><<<>><>><<<>>><<<<>><<<<><<<<>>><<<<>>>><><<<<>><<<<>><<<><<>><<><<<>><<<>><<>>>><>><>><<>>><<><<>>>><>>><<><<<><<>><<>><<><>>>><<>>><<><<<>>>><<<<><<>>>><<><<><<<>>><<><<<>><<<<>><<<<><<>><<<>>><<>>><<<<>>><<>><<<>>>><<<<>>>><>>>><<<<>><<>><<<<>>><<><<<>>>><<<>><<<<>><<<>>>><>><<>>>><<<<>>><<<<>>>><>>>><<<<>><>>>><<<<><<<<>>><<>>><<<<>><<>>>><><<>><<>>><<<>><<<<>><>>><>>>><>>><<<<><>>>><<<>><>>><<<<>><<<>>><<<><<<>>><<<<>>>><<<>>>><>>><<>><<>><<>>><<<<>>>><<<<>>><<<>><<><<<>><>><<<>>>><<<>><<<>><<<>>>><<<><>><<<>>>><<>>>><<>>><<<>>><>>>><<<<><<<<>>>><<>><<<<><<<<>>><<>><<<>><>>><>>>><<<<>>>><<<>><<>>><>>>><<>><<>>><<><<><<>>><<>><<<>>>><<>>>><<<<>>>

%% 2022\day17\test.txt
>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>

%% 2022\day18\day18_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

int main(string[] args)
{
    auto cubes = stdin.byLine.map!(line =>
        line.split(",").map!(x => x.to!int).array
        ).array;

    int s = 0;
    foreach (axes; [[0, 1, 2], [0, 2, 1], [1, 2, 0]])
    {
        int[] mins, maxs;
        foreach (a; axes)
        {
            auto as = cubes.map!(x => x[a]);
            mins ~= as.minElement;
            maxs ~= as.maxElement;
        }

        foreach (cp; cartesianProduct(iota(mins[0], maxs[0] + 1), iota(mins[1], maxs[1] + 1)))
        {
            s +=
            cubes.filter!(x => x[axes[0]] == cp[0] && x[axes[1]] == cp[1])
                 .map!(x => x[axes[2]])
                 .array
                 .sort
                 .splitWhen!((a,b)=>b-a>1)
                 .walkLength
                 * 2;
        }
    }

    writeln(s);

    return 0;
}

%% 2022\day18\day18_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

int surface(int[][] cubes)
{
    int s = 0;
    foreach (axes; [[0, 1, 2], [0, 2, 1], [1, 2, 0]])
    {
        int[] mins, maxs;
        foreach (a; axes)
        {
            auto as = cubes.map!(x => x[a]);
            mins ~= as.minElement;
            maxs ~= as.maxElement;
        }

        foreach (cp; cartesianProduct(iota(mins[0], maxs[0] + 1), iota(mins[1], maxs[1] + 1)))
        {
            s +=
            cubes.filter!(x => x[axes[0]] == cp[0] && x[axes[1]] == cp[1])
                 .map!(x => x[axes[2]])
                 .array
                 .sort
                 .splitWhen!((a,b)=>b-a>1)
                 .walkLength
            * 2;
        }
    }

    return s;
}

int main(string[] args)
{
    auto cubes = stdin.byLine.map!(line =>
        line.split(",").map!(x => x.to!int).array
        ).array;

    int[int[]] pockets;

    int s = 0;
    foreach (axes; [[0, 1, 2], [0, 2, 1], [1, 2, 0]])
    {
        int[] mins, maxs;
        foreach (a; axes)
        {
            auto as = cubes.map!(x => x[a]);
            mins ~= as.minElement;
            maxs ~= as.maxElement;
        }

        foreach (cp; cartesianProduct(iota(mins[0], maxs[0] + 1), iota(mins[1], maxs[1] + 1)))
        {
            auto sorted =
                cubes.filter!(x => x[axes[0]] == cp[0] && x[axes[1]] == cp[1])
                     .array
                     .sort!((a, b) => a[axes[2]] < b[axes[2]]);

            if (!sorted.empty)
            {
                foreach (sign; [1, -1])
                {
                    int idx = 0;
                    foreach (i; iota(sorted[sign == 1 ? 0   : $-1][axes[2]],
                                     sorted[sign == 1 ? $-1 : 0  ][axes[2]],
                                     sign))
                    {
                        if (i == sorted[idx][axes[2]])
                            idx += sign;
                        else
                        {
                            int[] key;
                            key.length = 3;
                            key[axes[0]] = cp[0];
                            key[axes[1]] = cp[1];
                            key[axes[2]] = i;

                            pockets.update(key,
                            () => 1,
                            (ref int old) {
                                old++;
                            });
                        }
                    }
                }
            }
        }
    }

    //writeln(pockets);

    int[][] pocket_cubes;
    pockets.keys.filter!(x => pockets[x] == 6).tee!(key => pocket_cubes ~= key.dup).array;

    bool found = true;
    while (found)
    {
        found = false;
        foreach (i, p; pocket_cubes.enumerate)
        {
            if (found)
                break;

            foreach (off; [
                [0, 0, 1], [0, 0, -1],
                [0, 1, 0], [0, -1, 0],
                [1, 0, 0], [-1, 0, 0]
                ])
            {
                int[] c;
                c.length = 3;
                c[] = p[] + off[];

                if ((!cubes.canFind(c)) && pockets[c] != 6)
                //if (!pocket_cubes.canFind(c))
                {
                    found = true;
                    pocket_cubes = pocket_cubes[0..i] ~ pocket_cubes[i+1..$];
                    break;
                }
            }
        }
    }

    writeln(cubes.surface - pocket_cubes.surface);
    //writeln(pockets);
    //writeln(pocket_cubes);

    // 2052 - correct in task 2!!!
    // 2802 - too high
    // 2040 - too low
    // 3448 - correct in task 1

    return 0;
}

%% 2022\day18\in.txt
13,2,10
3,6,9
11,17,9
7,2,11
14,6,5
13,16,8
9,7,2
3,9,14
8,3,5
3,12,9
7,3,7
13,2,13
4,6,5
13,4,9
4,8,10
15,5,8
17,14,11
13,17,11
13,7,2
11,14,4
8,9,17
14,7,15
4,10,4
9,12,2
8,5,13
14,15,6
15,14,11
8,16,10
2,13,10
8,18,8
14,14,5
3,5,7
18,8,10
13,14,11
6,8,17
14,10,16
15,6,6
16,13,10
14,4,7
5,3,5
10,14,2
4,13,5
12,10,1
6,7,15
5,10,3
6,15,13
14,13,3
13,14,16
9,6,16
10,14,16
13,16,10
4,3,10
2,11,6
9,12,16
8,1,8
9,2,7
16,10,16
5,10,15
16,5,12
5,11,13
7,15,8
5,14,14
3,8,8
5,16,6
5,12,16
11,16,4
3,6,10
8,12,2
9,10,2
4,12,8
9,13,17
7,12,16
5,16,13
12,11,18
4,10,17
5,14,6
5,13,13
3,7,5
6,16,11
3,11,5
15,11,15
4,6,14
5,2,8
5,13,12
14,6,16
3,5,8
15,15,14
15,8,15
16,7,4
10,4,3
17,12,7
7,16,7
6,10,17
9,2,9
10,18,9
15,7,8
16,16,12
3,4,11
16,15,11
13,16,5
13,4,6
13,3,13
15,12,11
14,3,11
9,16,11
3,13,8
13,6,15
6,14,6
12,2,11
3,5,12
7,17,8
5,15,5
8,11,2
14,3,10
11,16,8
4,12,4
10,11,3
16,7,12
5,5,14
2,7,10
13,7,17
16,5,11
15,6,13
8,8,18
3,10,5
2,6,11
10,4,5
12,7,17
3,9,6
17,7,11
10,5,16
17,6,11
10,2,12
7,10,18
8,16,11
11,15,15
16,10,5
10,16,4
4,16,6
15,4,11
2,9,9
3,7,6
5,3,6
10,16,5
13,15,11
3,4,9
3,8,12
6,5,4
2,9,8
2,7,7
16,14,14
15,10,15
16,10,13
9,14,4
2,7,6
13,3,11
17,13,10
12,2,10
8,16,13
16,11,11
12,10,17
6,15,11
10,17,13
6,10,4
8,12,4
3,11,14
9,5,4
15,6,14
6,6,4
14,5,5
17,10,9
18,11,11
5,4,5
15,5,15
12,5,13
3,8,7
13,3,14
13,8,3
3,5,10
10,17,7
15,15,13
14,13,15
5,14,12
12,3,11
14,13,5
13,17,9
5,8,17
8,2,11
10,11,2
9,5,1
11,3,9
14,4,10
11,12,2
10,14,17
17,11,11
11,16,11
9,11,1
5,4,13
17,9,10
2,11,12
10,9,17
12,16,7
16,12,8
11,7,1
12,8,17
18,7,11
10,4,17
5,5,3
2,10,13
8,5,14
3,9,10
6,5,14
7,7,2
8,2,7
15,9,16
10,14,4
5,15,7
14,13,12
17,14,8
16,11,8
15,6,15
3,11,15
10,6,2
11,14,16
10,5,14
2,8,11
12,4,16
9,17,12
4,4,11
12,16,6
2,9,6
15,7,10
7,8,2
11,2,11
5,6,3
11,18,8
4,10,10
12,4,15
2,14,10
7,11,2
13,11,16
2,9,11
4,14,6
12,8,18
4,7,15
8,12,17
3,15,7
15,16,8
3,7,15
10,2,13
12,16,11
15,4,13
14,10,2
12,15,15
5,12,15
12,15,4
9,10,18
9,8,2
14,15,12
3,13,11
13,17,10
2,10,12
6,17,7
15,14,7
8,2,6
11,5,5
7,8,3
4,7,8
9,3,11
13,4,3
14,3,8
13,4,4
14,15,5
4,6,7
6,14,7
6,2,7
6,5,5
11,3,6
10,15,5
6,3,13
13,14,6
13,14,15
3,9,7
14,3,7
8,9,18
14,8,12
13,3,8
15,15,9
7,16,4
6,18,9
10,15,3
6,16,12
9,14,2
12,3,8
9,11,15
4,15,9
8,2,9
8,11,1
14,11,15
11,11,1
1,11,9
14,7,13
6,10,16
15,12,5
12,3,7
15,11,7
12,13,14
12,10,3
5,4,7
12,13,17
6,9,17
14,8,3
2,9,10
17,9,6
4,15,5
4,13,6
10,12,16
3,8,4
11,1,9
2,6,13
2,12,4
11,10,17
13,15,16
9,2,6
6,11,3
3,7,13
8,15,13
15,7,7
3,12,12
17,9,11
13,13,15
12,2,7
5,9,15
7,15,13
9,4,16
9,14,14
11,10,2
16,8,12
10,3,5
11,18,9
11,13,15
3,14,9
8,18,13
8,10,17
6,13,3
5,13,14
7,4,5
15,14,8
8,18,10
4,5,10
16,6,11
15,13,10
12,16,9
9,5,16
4,14,10
11,17,11
12,17,10
17,8,8
15,3,12
14,11,17
16,5,9
11,8,1
5,12,3
9,3,7
14,7,3
16,11,14
15,9,7
14,11,6
11,1,7
2,12,10
6,3,8
3,5,9
10,10,2
4,6,11
4,10,8
6,12,17
13,3,10
8,9,1
4,5,12
3,13,7
14,5,4
10,2,6
3,14,10
17,6,8
15,13,7
9,5,15
10,5,4
11,14,15
16,5,8
8,3,11
4,15,6
16,15,8
16,8,6
13,15,13
2,6,12
3,14,15
16,7,14
5,14,5
10,16,14
17,7,9
14,15,7
4,7,5
14,14,4
6,7,17
0,10,7
6,16,8
17,15,9
4,8,14
14,14,6
5,5,8
13,13,4
3,12,5
7,17,11
13,14,14
15,8,3
3,10,14
8,6,1
7,3,8
6,12,16
17,10,8
11,8,17
17,8,6
14,5,6
7,2,7
12,16,15
14,3,14
17,9,7
12,18,6
3,14,12
15,12,15
14,5,13
17,11,6
7,13,2
3,6,7
17,8,5
14,15,9
13,11,3
16,14,11
8,17,11
13,6,2
10,17,14
12,12,15
5,7,16
7,14,4
7,2,9
5,6,4
15,14,5
16,3,7
14,4,4
4,13,9
9,16,15
8,17,8
15,6,11
11,12,16
14,17,7
5,15,6
16,11,12
5,16,10
12,4,6
3,13,10
1,8,9
7,2,10
7,13,17
19,9,11
6,11,16
9,18,10
16,11,4
13,7,16
10,3,7
15,13,13
8,11,4
5,15,12
17,10,6
14,12,15
17,13,8
6,13,15
7,7,16
10,2,8
4,13,13
9,15,14
9,4,3
6,4,8
5,10,16
4,7,16
13,10,16
5,6,15
8,10,16
7,16,6
7,7,17
3,11,12
12,7,1
16,12,15
6,16,6
10,17,11
7,5,13
10,14,13
16,7,5
11,13,17
7,7,4
6,5,13
9,16,6
4,9,4
13,16,13
5,11,5
5,3,8
11,4,9
17,9,9
6,4,7
15,9,6
8,5,16
3,12,14
12,17,9
3,8,9
6,2,8
15,9,14
2,6,10
18,11,7
4,3,8
12,11,16
17,13,7
2,10,6
1,13,7
16,6,6
6,14,14
12,10,2
3,5,5
15,9,15
15,5,6
3,6,14
9,5,3
11,3,11
7,5,15
13,11,4
7,5,5
13,8,16
15,13,6
2,7,8
16,14,10
6,6,15
15,16,9
10,17,10
8,4,6
6,16,13
17,4,10
5,9,3
9,13,2
6,17,9
9,13,16
7,9,18
9,17,10
11,2,9
17,7,7
7,2,12
8,13,17
16,11,5
18,7,9
12,13,2
9,15,9
9,2,11
13,3,15
1,10,12
3,12,10
14,4,8
13,15,5
7,13,16
3,15,9
15,12,16
12,4,13
10,6,17
11,10,18
6,17,10
14,6,10
12,5,15
7,9,1
7,5,17
5,3,9
13,15,7
4,4,8
7,8,17
3,12,13
17,8,13
9,3,12
1,14,9
4,14,12
9,16,16
10,10,17
5,8,16
6,16,15
11,15,3
12,9,2
2,8,6
6,11,17
7,8,16
6,6,3
3,6,6
6,2,10
7,15,12
9,4,2
11,3,14
16,15,13
13,14,13
16,15,7
14,9,7
6,3,7
15,16,11
5,15,13
2,10,4
5,11,14
15,14,14
7,3,10
12,15,14
7,5,4
14,11,3
7,1,11
13,2,12
5,2,9
10,4,16
9,17,6
6,8,4
15,5,5
12,2,6
3,8,6
7,12,17
12,16,10
16,13,8
15,3,8
17,9,8
10,2,9
12,8,5
16,7,13
14,16,8
4,12,16
8,3,6
7,18,6
12,5,5
10,2,14
17,6,12
7,9,17
5,3,10
15,4,14
14,2,10
12,6,4
7,16,12
6,17,8
15,9,4
15,7,13
7,9,4
6,3,6
2,13,7
3,12,8
3,8,15
8,3,8
7,16,5
12,6,2
3,12,4
6,10,2
17,8,10
11,2,10
6,16,9
8,15,4
9,9,18
17,13,9
3,9,13
9,15,12
12,11,3
18,7,8
12,4,5
9,5,6
10,7,2
2,8,7
2,8,13
10,6,16
9,3,15
3,7,4
1,9,9
13,16,12
11,5,15
4,8,16
14,4,9
5,6,14
11,7,18
12,12,3
17,6,7
16,6,13
14,15,14
11,11,17
15,5,11
7,15,14
10,3,16
15,15,5
2,11,7
13,13,16
5,5,4
7,5,3
12,3,15
14,14,7
8,16,14
4,10,13
5,8,13
17,14,10
16,12,5
5,17,12
2,10,11
10,1,10
16,11,6
11,3,5
18,9,12
16,13,12
15,10,3
13,2,8
2,12,7
8,7,16
6,15,14
15,7,3
16,6,10
12,15,12
9,15,4
10,12,3
3,13,9
8,6,4
8,5,15
5,3,13
16,14,5
4,12,5
18,12,9
16,6,9
16,14,8
8,5,4
10,7,3
13,4,5
6,14,4
8,10,2
12,16,13
12,11,17
10,6,5
4,5,7
18,8,9
17,6,9
9,16,9
17,8,7
6,9,2
10,8,2
4,16,8
8,17,14
8,15,15
14,12,13
16,10,9
8,16,6
2,9,13
2,8,14
5,10,14
7,15,3
10,4,15
5,8,15
4,10,15
14,7,6
15,6,12
9,16,4
13,16,11
5,5,13
12,3,14
10,15,2
8,2,13
13,12,15
3,3,9
4,4,6
14,7,4
6,14,12
14,7,17
5,9,4
13,4,13
8,12,16
8,2,14
3,13,12
10,18,6
17,11,5
13,9,3
14,16,12
2,13,12
11,14,17
8,17,12
4,14,13
14,8,2
11,2,6
8,13,3
9,4,15
10,2,15
12,11,4
2,14,9
4,14,5
15,4,9
7,2,13
9,16,10
9,12,17
13,5,4
16,4,12
11,16,13
7,3,14
7,13,3
12,7,16
14,12,16
9,16,7
11,12,4
11,3,12
13,18,7
16,9,14
16,14,6
1,7,7
16,12,10
16,8,14
14,10,4
15,10,14
14,14,15
15,15,6
12,14,4
11,6,3
16,9,6
17,12,11
5,6,5
8,17,9
17,8,4
5,4,14
17,12,10
6,4,5
4,4,10
15,6,5
18,6,9
4,12,9
12,7,3
8,10,18
16,12,13
9,5,5
5,13,15
14,4,12
4,7,6
10,9,2
1,12,10
12,2,8
7,14,3
8,9,2
3,6,11
17,9,12
6,3,9
4,8,4
16,7,6
4,10,16
5,14,13
5,15,9
12,16,4
6,7,2
12,2,13
8,5,3
9,9,2
10,6,3
12,4,11
11,2,7
9,10,4
11,16,5
13,12,3
11,8,2
1,10,8
9,15,17
7,11,16
5,5,11
11,14,3
11,17,8
12,16,8
4,4,5
10,3,15
8,4,5
1,7,8
4,2,7
3,7,14
11,6,2
13,17,7
15,11,3
13,15,12
6,5,15
1,6,10
4,13,4
6,2,13
8,3,13
5,4,6
15,12,4
9,7,17
14,7,16
8,11,18
14,12,4
7,16,10
13,2,11
12,9,18
10,1,9
18,9,11
14,12,5
9,17,7
17,7,12
5,14,9
13,9,1
10,5,15
16,11,16
4,3,11
3,4,12
4,5,5
14,12,3
10,6,4
12,15,7
2,9,12
8,6,15
3,14,11
9,16,5
17,11,9
7,17,7
3,7,3
13,10,17
2,12,13
7,3,11
13,7,3
3,5,6
11,17,6
16,10,11
13,4,14
6,7,3
11,7,16
3,6,13
9,16,12
13,16,7
9,2,10
9,15,15
6,12,2
11,15,5
5,11,6
5,13,5
16,4,9
13,3,9
16,8,15
13,11,2
9,3,5
8,16,5
14,3,12
4,11,3
9,2,12
2,10,8
3,8,14
5,11,4
6,14,11
16,10,12
9,17,8
4,7,7
7,16,11
10,9,1
6,5,12
12,4,7
15,14,9
8,12,18
14,6,14
8,7,3
8,8,17
8,4,14
2,8,9
14,5,14
4,4,14
13,3,6
2,12,11
6,10,15
14,8,15
16,5,13
11,13,4
16,13,6
1,10,6
17,6,10
5,7,2
8,6,17
11,4,4
15,4,7
13,3,5
13,17,5
13,4,8
13,5,14
8,3,4
8,3,10
10,13,2
8,8,2
17,11,10
14,14,14
11,4,5
14,16,7
3,14,8
8,3,14
9,3,16
15,14,12
12,11,2
15,4,6
7,10,17
5,7,5
5,5,5
16,14,9
11,12,17
8,7,18
9,10,1
11,11,3
11,2,13
9,16,14
6,15,15
11,2,8
9,12,18
3,7,7
14,15,8
4,6,8
4,11,4
7,4,6
13,9,15
6,7,5
7,15,16
12,9,1
10,12,2
2,11,9
13,3,12
3,4,10
3,8,3
16,10,4
10,13,3
4,4,7
3,10,12
9,9,17
7,14,16
6,17,12
6,8,3
7,18,10
2,12,9
8,9,3
2,5,10
9,1,8
17,6,13
12,3,6
2,11,8
2,7,9
8,4,15
17,14,9
16,8,4
17,12,13
12,3,5
10,3,13
2,10,14
7,16,8
5,10,2
14,5,8
9,14,16
11,6,4
17,5,11
16,6,7
16,11,9
13,16,6
7,4,14
5,7,6
10,5,3
3,6,12
14,5,15
3,10,15
12,4,3
8,6,2
9,8,17
6,16,7
12,11,1
4,12,6
7,6,3
12,4,12
8,14,4
2,11,11
14,17,13
8,16,12
13,15,4
6,12,3
9,16,8
10,9,0
7,10,2
15,10,4
16,5,6
12,6,16
16,9,5
17,11,15
5,15,10
3,12,11
15,6,9
6,11,4
13,10,4
14,16,11
12,18,8
13,10,3
15,12,7
11,16,10
4,7,4
13,15,6
10,5,2
11,7,15
7,2,8
17,7,10
10,17,8
14,10,3
15,9,17
18,11,9
6,6,16
13,6,4
6,4,13
8,7,17
7,3,4
2,13,8
12,1,6
5,9,16
13,5,6
10,17,12
13,11,17
7,12,3
14,9,15
11,13,16
14,9,14
14,8,4
12,14,3
16,13,4
11,9,2
2,6,9
4,9,7
16,11,10
17,11,8
3,4,8
5,14,11
3,5,11
4,14,11
14,17,12
3,7,9
5,11,3
11,11,2
11,16,16
9,16,13
5,13,4
15,11,4
13,15,14
14,11,14
10,8,4
11,7,3
6,15,5
11,5,3
15,15,7
11,16,15
16,4,7
7,16,13
6,12,15
3,9,15
9,15,5
9,1,10
10,19,11
14,4,6
6,13,2
18,12,11
3,15,11
12,13,16
9,17,13
16,10,14
8,15,5
6,3,15
9,11,17
14,9,17
12,6,6
4,9,15
7,18,8
9,1,12
1,10,9
11,5,17
17,11,12
12,18,11
11,9,4
14,9,16
2,12,5
5,4,9
17,7,8
3,10,3
14,16,13
6,7,4
17,12,9
8,17,5
10,3,6
13,3,7
7,3,9
8,9,16
4,14,8
10,11,16
10,3,14
5,17,11
1,7,11
0,9,10
4,7,14
4,13,14
8,5,17
17,13,12
4,13,15
17,7,5
8,10,3
6,6,6
7,15,15
6,12,18
11,4,15
4,2,6
19,10,12
11,1,12
4,15,8
13,10,14
15,4,12
15,13,4
8,14,16
11,15,6
4,14,15
16,6,4
17,9,14
12,2,5
12,14,15
11,10,16
4,3,12
12,16,12
16,13,11
10,7,18
12,3,12
5,6,13
13,6,1
13,4,10
5,16,8
15,12,14
13,16,14
10,16,13
16,8,11
7,14,17
9,8,1
15,14,15
7,4,12
15,8,4
11,4,3
11,18,7
4,4,9
5,4,12
8,3,12
6,16,10
1,7,9
4,11,15
4,17,11
4,12,14
13,17,8
2,10,10
12,7,15
18,9,9
8,2,12
14,6,2
3,7,8
9,8,3
5,16,7
13,9,2
0,10,8
13,7,4
18,11,6
5,11,17
3,7,11
8,17,10
10,3,10
1,10,7
7,9,2
12,13,4
15,11,16
9,18,13
13,4,7
11,9,17
10,15,14
16,10,15
7,4,13
12,9,17
4,8,12
10,10,1
5,7,13
14,17,9
14,14,12
15,12,13
5,6,16
18,9,7
18,11,12
12,8,3
4,5,8
6,7,16
11,12,18
16,12,14
9,2,14
12,8,16
2,6,8
6,5,16
7,17,6
8,1,10
1,13,10
10,16,15
2,13,13
9,3,13
14,13,14
14,5,9
15,10,16
14,9,4
5,14,8
6,6,17
18,10,13
15,15,12
3,10,7
11,16,9
10,2,7
8,18,7
14,4,5
8,13,4
7,12,2
7,4,7
16,15,9
10,9,18
14,6,15
11,7,17
17,10,14
14,11,4
14,13,16
10,8,19
4,13,3
11,13,14
2,7,11
13,17,13
14,7,5
10,1,8
5,17,9
3,9,5
9,8,18
7,18,9
11,10,3
2,8,12
14,9,3
10,18,8
1,9,8
15,8,5
4,9,12
4,6,4
11,3,13
15,10,5
1,9,12
3,11,7
8,7,2
17,9,13
9,12,1
3,11,11
7,2,6
4,11,16
5,11,15
12,6,3
7,14,5
15,13,14
5,17,10
12,12,17
3,12,6
13,11,1
8,3,15
10,7,16
3,9,8
3,7,10
12,7,2
5,12,5
4,11,13
11,9,16
6,2,12
11,6,6
10,17,9
6,12,4
9,6,3
3,13,13
3,5,13
7,17,12
11,13,3
3,10,11
16,15,10
2,9,7
11,11,18
2,15,9
17,6,4
3,6,5
12,6,15
14,8,14
2,8,10
10,8,1
10,2,11
5,3,7
5,13,2
12,10,15
9,2,5
4,12,15
2,12,8
16,13,14
6,3,11
16,8,8
16,13,5
4,12,3
15,7,15
5,5,15
17,8,15
10,13,16
8,1,7
7,9,3
9,13,3
13,13,3
5,2,12
13,14,4
13,5,15
9,10,17
11,4,13
9,3,14
7,15,4
13,6,16
3,5,14
11,17,13
2,13,6
7,6,17
11,5,16
2,12,12
16,11,15
16,10,10
4,16,12
16,9,4
8,14,7
7,13,15
11,17,5
10,2,5
16,7,10
13,5,9
15,12,6
12,2,12
4,13,10
6,14,16
9,9,16
12,15,13
2,7,5
10,1,7
12,1,12
7,3,5
13,14,5
7,14,15
16,9,10
16,12,7
2,10,7
4,7,12
4,6,12
3,15,13
5,14,10
7,7,1
12,16,16
18,10,8
4,10,14
2,12,6
12,5,16
5,12,4
11,15,16
17,10,13
11,2,14
3,13,5
17,8,9
13,8,15
10,3,11
1,8,11
3,9,12
4,8,13
4,11,9
4,15,10
7,11,3
15,7,6
14,5,11
8,11,17
15,8,13
10,12,1
16,9,16
10,2,4
17,5,9
14,11,16
5,10,4
17,10,7
10,8,17
15,5,7
15,12,12
11,17,12
16,7,7
14,6,3
8,4,16
8,14,3
4,8,15
10,15,4
15,5,9
18,9,8
15,14,13
7,4,11
12,2,15
6,9,4
15,7,16
10,6,1
16,9,3
14,15,10
8,2,10
6,4,11
12,14,17
10,5,6
10,3,12
16,15,6
14,16,6
5,3,11
16,8,13
9,15,16
12,5,3
10,15,17
12,12,16
9,6,2
8,6,18
12,7,4
15,10,2
1,6,11
5,4,8
15,14,6
6,4,16
10,9,3
4,4,12
16,8,10
11,14,11
8,4,4
12,13,3
15,10,13
6,15,4
17,11,7
1,10,10
14,4,13
7,11,1
11,5,13
10,11,1
1,9,10
5,5,7
2,8,5
9,3,8
10,1,11
15,5,4
11,16,6
6,15,16
12,5,14
8,7,1
9,1,11
14,11,2
8,4,3
13,10,15
14,2,11
5,13,3
5,8,4
12,16,5
6,8,2
17,8,11
6,2,9
1,11,8
13,14,12
13,5,13
8,11,3
6,4,15
4,10,5
13,13,14
7,12,14
3,13,4
8,5,8
4,17,9
10,16,6
17,7,6
7,4,4
9,5,13
6,8,14
10,16,12
15,3,11
17,5,12
4,15,13
9,7,18
11,9,15
18,9,10
4,5,11
15,3,6
15,5,12
3,14,5
13,6,3
9,11,2
6,11,15
10,15,15
14,16,10
3,11,6
4,12,13
14,14,10
7,16,9
10,17,5
8,6,3
6,9,18
1,9,11
11,11,15
16,8,5
2,11,10
13,8,17
6,1,9
5,2,11
0,8,9
11,1,11
6,16,5
17,11,13
12,3,13
4,12,17
18,13,8
6,15,6
2,8,8
14,5,7
6,14,5
13,13,5
1,10,11
12,1,9
15,5,13
11,2,12
4,15,7
10,15,16
13,12,4
16,8,7
5,6,10
14,8,16
9,13,6
10,4,14
14,4,14
9,8,16
12,15,16
14,2,9
15,5,10
10,4,4
7,17,13
8,17,4
11,15,14
7,3,13
14,7,14
10,2,10
2,11,13
15,14,10
10,16,7
9,8,4
8,16,15
4,5,4
5,12,14
14,6,13
16,4,10
16,12,9
15,12,3
6,13,16
11,16,12
13,13,2
5,4,11
18,11,10
16,13,13
6,3,10
17,10,10
14,13,6
16,6,15
15,4,10
17,10,11
6,10,3
10,14,7
12,9,16
4,9,5
11,15,7
11,12,3
11,4,7
9,11,3
11,9,3
16,14,12
13,6,13
15,9,13
9,17,9
9,6,1
1,8,10
7,2,14
6,16,14
7,5,2
5,13,6
14,11,5
7,2,15
11,6,17
4,9,14
14,14,11
8,6,16
3,9,3
8,13,16
16,9,7
6,14,3
4,9,3
3,8,13
15,3,10
11,9,18
3,8,5
17,6,6
4,3,9
6,8,16
13,2,6
17,15,11
14,6,4
4,8,3
10,10,3
2,5,9
9,13,18
12,4,14
6,17,11
2,13,9
9,7,1
5,14,7
8,14,15
10,10,18
11,3,15
3,15,8
11,15,4
13,7,15
14,6,6
6,9,3
13,17,12
8,8,1
10,4,13
6,11,18
12,13,15
3,11,13
16,13,7
10,4,6
7,6,15
10,16,16
5,9,14
1,6,9
7,15,11
7,9,5
4,5,13
6,9,6
12,3,9
7,7,3
17,6,5
14,15,13
9,11,18
4,12,7
6,6,5
14,3,13
7,15,5
6,4,12
4,6,13
6,11,5
7,1,8
11,18,12
5,7,12
16,15,12
3,14,7
9,4,14
3,11,8
5,17,7
12,16,14
9,18,9
10,12,17
14,16,9
6,11,1
17,5,8
11,3,4
10,0,12
8,17,13
9,4,12
4,2,10
7,13,4
14,2,7
18,12,10
3,7,12
14,17,11
11,10,1
6,6,14
7,17,10
13,2,7
11,16,14
10,7,1
7,4,15
12,4,2
12,9,3
3,11,10
11,5,4
5,7,14
16,13,15
13,9,17
4,2,11
7,16,14
4,11,14
15,6,4
16,6,5
15,7,14
12,17,12
5,17,8
1,12,12
14,13,8
10,13,4
7,18,7
17,10,12
5,15,14
17,8,12
10,14,3
7,14,14
9,1,9
10,11,18
5,12,17
7,6,18
16,6,8
6,5,3
16,5,7
9,11,16
11,14,2
3,10,4
3,12,7
6,4,6
7,17,9
9,6,17
5,8,3
7,13,18
4,11,5
6,6,2
17,12,12
6,14,15
11,7,2
4,9,16
17,12,8
5,16,14
12,4,4
13,15,8
9,9,15
4,8,7
10,3,3
13,14,7
11,15,8
14,12,14
13,13,17
10,16,8
1,12,9
12,18,10
15,10,17
13,5,3
7,11,18
8,18,11
12,10,16
14,8,5
4,6,15
6,4,14
6,9,16
18,6,7
6,7,6
16,9,15
16,5,10
16,7,11
9,14,3
14,5,12
13,4,15
16,6,14
15,9,2
3,16,9
17,13,11
16,10,6
4,6,9
10,16,10
14,15,11
6,15,10
7,10,16
8,13,2
8,2,8
2,11,5
4,11,12
6,6,13
6,1,10
13,12,17
8,3,7
3,8,10
16,3,9
15,3,13
5,13,16
1,11,13
15,13,15
15,2,9
13,2,9
14,14,8
13,9,4
3,13,6
13,8,2
7,1,10
11,13,2
14,10,17
3,9,11
6,5,7
4,14,14
8,6,5
14,4,11
7,7,15
12,1,13
12,5,6
16,7,15
15,13,12
8,15,6
4,14,7
9,3,9
3,11,4
10,18,10
9,12,3
13,5,10
15,13,11
12,5,4
14,9,2
15,15,11
5,16,9
4,7,11
17,6,14
12,14,16
6,15,7
2,4,12
11,11,16
4,14,9
2,15,11
4,15,15
10,18,12
7,7,5
9,13,15
18,8,13
10,18,11
11,2,5
15,9,5
5,5,6
7,15,7
1,8,8
11,4,12
16,13,9
11,14,12
11,14,5
9,4,4
16,9,13
15,9,3
15,11,12
15,16,10
4,5,6
1,11,6
8,18,9
9,3,4
4,5,9
5,18,9
4,5,14
8,8,16
15,13,5
5,9,2
10,8,16
8,4,11
4,6,3
3,6,8
13,6,17
10,19,9
14,3,4
14,14,13
9,17,14
6,5,6
0,10,10
16,11,13
11,17,7
16,10,7
4,6,6
11,6,15
8,12,3
11,13,18
12,8,1
1,7,12
15,4,8
16,4,11
14,3,9
13,11,14
11,4,14
17,14,7
12,1,11
8,14,5
18,10,10
2,10,5
4,9,13
6,18,7
16,7,9
15,13,16
17,4,9
15,17,11
8,11,16
9,4,17
12,3,10
3,15,10
11,3,8
4,16,11
8,17,7
4,13,11
13,9,18
10,4,12
16,11,7
3,9,4
15,8,14
6,14,13
13,6,14
2,5,8
6,4,4
6,12,5
5,16,11
10,6,15
11,4,10
11,3,7
18,8,8
5,7,3
3,9,9
18,10,11
14,13,4
16,12,6
4,2,9
7,11,17
11,18,11
9,7,16
7,6,5
13,17,14
6,4,3
3,16,8
7,16,15
8,16,4
7,8,18
10,11,4
7,9,16
2,9,14
9,4,7
10,0,9
15,6,7
13,11,15
12,12,2
9,18,11
8,5,2
10,12,18
4,10,2
4,8,11
13,12,5
15,15,8
13,8,4
3,15,5
5,8,5
7,3,6
5,10,13
8,13,1
17,10,15
9,9,1
9,15,3
8,4,2
7,17,5
11,16,7
10,15,7
6,3,5
11,5,2
13,10,2
6,18,11
6,11,2
4,10,3
8,10,1
13,14,3
3,10,8
10,6,18
11,9,14
5,9,5
8,5,5
14,3,6
1,9,7
5,13,7
10,3,4
8,8,3
5,16,12
4,14,4
8,18,12
6,3,12
18,12,6
9,4,11
4,4,13
3,3,12
1,8,12
15,11,13
13,12,16
5,6,8
18,6,11
6,9,5
15,7,9
2,6,6
12,17,7
4,15,11
6,13,4
12,14,5
3,3,7
9,1,14
14,8,6
7,10,4
2,14,7
14,17,8
3,10,16
12,14,14
10,10,16
4,7,9
14,6,7
8,4,13
16,5,5
12,8,2
6,9,1
11,1,8
1,7,10
5,5,16
13,15,15
3,7,16
7,5,7
7,3,12
4,13,7
9,4,5
14,14,3
8,14,6
10,8,3
5,8,6
9,18,8
13,8,5
13,12,2
5,10,17
18,8,12
9,4,9
3,10,6
10,9,16
9,17,11
12,13,5
15,7,12
8,15,7
17,4,11
3,3,8
8,15,16
5,7,4
4,4,15
13,5,5
13,16,9
16,12,12
10,6,13
7,12,5
18,10,12
9,3,10
10,3,9
5,14,15
6,1,11
17,7,13
18,13,10
12,17,6
10,7,17
17,13,13
2,7,13
6,18,12
15,12,8
12,6,17
8,17,6

%% 2022\day18\test.txt
2,2,2
1,2,2
3,2,2
2,1,2
2,3,2
2,2,1
2,2,3
2,2,4
2,2,6
1,2,5
3,2,5
2,1,5
2,3,5

%% 2022\day18\test2.txt
1,1,1
2,1,1

%% 2022\day18\test3.txt
2,2,2
2,2,4
2,1,3
1,2,3
3,2,3
2,3,3

%% 2022\day19\bench.bat
hyperfine-v1.15.0-x86_64-pc-windows-gnu/hyperfine.exe -r 1 "c:/D/dmd2/windows/bin/rdmd.exe day19_1.d <test.txt" "c:/D/dmd2/windows/bin/rdmd.exe day19_2.d <test.txt"

%% 2022\day19\day19_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

struct Blueprint
{
    int id;
    int ore_ore;
    int clay_ore;
    int obsidian_ore;
    int obsidian_clay;
    int geode_ore;
    int geode_obsidian;
}

struct State
{
    int ore;
    int clay;
    int obsidian;
    int geode;

    int ore_bots;
    int clay_bots;
    int obsidian_bots;
    int geode_bots;
}

// bool useful(string bot, Blueprint bp, State s, int m)
// {
//     if (bot == "ore")
//         return s.ore < max(bp.clay_ore, bp.obsidian_ore, bp.geode_ore) * m;
//     else if (bot == "clay")
//         return s.clay_bots >= bp.obsidian_clay || s.clay >= bp.obsidian_clay * m;
// }

int go(Blueprint bp, State s, int m)
{
    // if (s.geode > 10)
    //     writeln(bp, s, m);
    State ns = s;

    ns.ore      += ns.ore_bots;
    ns.clay     += ns.clay_bots;
    ns.obsidian += ns.obsidian_bots;
    ns.geode    += ns.geode_bots;

    if (m == 1)
        return ns.geode;

    if (s.obsidian >= bp.geode_obsidian && s.ore >= bp.geode_ore)
    {
        ns.geode_bots++;
        ns.obsidian -= bp.geode_obsidian;
        ns.ore -= bp.geode_ore;
        return go(bp, ns, m - 1);
    }

    int[] search;
    if (s.clay >= bp.obsidian_clay && s.ore >= bp.obsidian_ore)
    {
        ns.obsidian_bots++;
        ns.clay -= bp.obsidian_clay;
        ns.ore -= bp.obsidian_ore;

        search ~= go(bp, ns, m - 1);

        ns.obsidian_bots--;
        ns.clay += bp.obsidian_clay;
        ns.ore += bp.obsidian_ore;
    }

    if (s.ore >= bp.clay_ore)
    {
        ns.clay_bots++;
        ns.ore -= bp.clay_ore;

        search ~= go(bp, ns, m - 1);

        ns.clay_bots--;
        ns.ore += bp.clay_ore;
    }

    if (s.ore >= bp.ore_ore)
    {
        ns.ore_bots++;
        ns.ore -= bp.ore_ore;

        search ~= go(bp, ns, m - 1);

        ns.ore_bots--;
        ns.ore += bp.ore_ore;
    }

    if (s.ore < 6)
        search ~= go(bp, ns, m - 1);

    return search.maxElement;

}

int main(string[] args)
{
    auto blueprints = stdin.byLine.map!((x){
        Blueprint a;
        x.formattedRead("Blueprint %d: Each ore robot costs %d ore. Each clay robot costs %d ore. Each obsidian robot costs %d ore and %d clay. Each geode robot costs %d ore and %d obsidian.",
            a.id, a.ore_ore, a.clay_ore, a.obsidian_ore, a.obsidian_clay, a.geode_ore, a.geode_obsidian);
        return a;
    }).array;

    int ans = 0;
    foreach (bp; blueprints)
    {
        State s;
        s.ore_bots = 1;
        int g = go(bp, s, 24);
        ans += bp.id * g;

        writeln(g, " ", bp);
    }

    ans.writeln; // 1323 - too low

    return 0;
}

%% 2022\day19\day19_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

struct Blueprint
{
    int id;
    int ore_ore;
    int clay_ore;
    int obsidian_ore;
    int obsidian_clay;
    int geode_ore;
    int geode_obsidian;
}

struct State
{
    int ore;
    int clay;
    int obsidian;
    int geode;

    int ore_bots;
    int clay_bots;
    int obsidian_bots;
    int geode_bots;
}

bool useless(string bot, Blueprint bp, State s, int m)
{
    if (bot == "ore")
        return s.ore_bots >= max(bp.clay_ore, bp.obsidian_ore, bp.geode_ore) || s.ore >= max(bp.clay_ore, bp.obsidian_ore, bp.geode_ore) * m;
    else if (bot == "clay")
        return s.clay_bots >= bp.obsidian_clay || s.clay >= bp.obsidian_clay * m;
    else if (bot == "obsidian")
        return s.obsidian_bots >= bp.geode_obsidian || s.obsidian >= bp.geode_obsidian * m;

    return false;
}

bool useful(string bot, Blueprint bp, State s, int m)
{
    auto res = useless(bot, bp, s, m);

    // if (res)
    //     writeln(res);

    return !res;
}

int go(Blueprint bp, State s, int m)
{
    // if (s.geode > 10)
    //     writeln(bp, s, m);
    State ns = s;

    ns.ore      += ns.ore_bots;
    ns.clay     += ns.clay_bots;
    ns.obsidian += ns.obsidian_bots;
    ns.geode    += ns.geode_bots;

    if (m == 1)
        return ns.geode;

    if (s.obsidian >= bp.geode_obsidian && s.ore >= bp.geode_ore)
    {
        ns.geode_bots++;
        ns.obsidian -= bp.geode_obsidian;
        ns.ore -= bp.geode_ore;
        return go(bp, ns, m - 1);
    }

    int[] search;
    if (s.clay >= bp.obsidian_clay && s.ore >= bp.obsidian_ore && useful("obsidian", bp, s, m))
    {
        ns.obsidian_bots++;
        ns.clay -= bp.obsidian_clay;
        ns.ore -= bp.obsidian_ore;

        return go(bp, ns, m - 1);
        //search ~= go(bp, ns, m - 1);

        // ns.obsidian_bots--;
        // ns.clay += bp.obsidian_clay;
        // ns.ore += bp.obsidian_ore;
    }

    if (s.ore >= bp.clay_ore && useful("clay", bp, s, m))
    {
        ns.clay_bots++;
        ns.ore -= bp.clay_ore;

        search ~= go(bp, ns, m - 1);

        ns.clay_bots--;
        ns.ore += bp.clay_ore;
    }

    if (s.ore >= bp.ore_ore && useful("ore", bp, s, m))
    {
        ns.ore_bots++;
        ns.ore -= bp.ore_ore;

        search ~= go(bp, ns, m - 1);

        ns.ore_bots--;
        ns.ore += bp.ore_ore;
    }

    if (s.ore < 6)
        search ~= go(bp, ns, m - 1);

    return search.maxElement;

}

int main(string[] args)
{
    auto blueprints = stdin.byLine.map!((x){
        Blueprint a;
        x.formattedRead("Blueprint %d: Each ore robot costs %d ore. Each clay robot costs %d ore. Each obsidian robot costs %d ore and %d clay. Each geode robot costs %d ore and %d obsidian.",
            a.id, a.ore_ore, a.clay_ore, a.obsidian_ore, a.obsidian_clay, a.geode_ore, a.geode_obsidian);
        return a;
    }).array;

    int ans = 1;
    foreach (bp; blueprints[0..min(3, $)])
    {
        State s;
        s.ore_bots = 1;
        int g = go(bp, s, 32);
        ans *= g;

        writeln(g, " ", bp);
    }

    ans.writeln; // 7644 - correct!

    return 0;
}

%% 2022\day19\day19_2a.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

struct Blueprint
{
    int id;
    int ore_ore;
    int clay_ore;
    int obsidian_ore;
    int obsidian_clay;
    int geode_ore;
    int geode_obsidian;
}

struct State
{
    int ore;
    int clay;
    int obsidian;
    int geode;

    int ore_bots;
    int clay_bots;
    int obsidian_bots;
    int geode_bots;
}

bool useless(string bot, Blueprint bp, State s, int m)
{
    if (bot == "ore")
        return s.ore_bots >= max(bp.clay_ore, bp.obsidian_ore, bp.geode_ore) || s.ore >= max(bp.clay_ore, bp.obsidian_ore, bp.geode_ore) * m;
    else if (bot == "clay")
        return s.clay_bots >= bp.obsidian_clay || s.clay >= bp.obsidian_clay * m;
    else if (bot == "obsidian")
        return s.obsidian_bots >= bp.geode_obsidian || s.obsidian >= bp.geode_obsidian * m;

    return false;
}

bool useful(string bot, Blueprint bp, State s, int m)
{
    auto res = useless(bot, bp, s, m);

    // if (res)
    //     writeln(res);

    return !res;
}

int go(Blueprint bp, State s, int m)
{
    // if (s.geode > 10)
    //     writeln(bp, s, m);
    State ns = s;

    ns.ore      += ns.ore_bots;
    ns.clay     += ns.clay_bots;
    ns.obsidian += ns.obsidian_bots;
    ns.geode    += ns.geode_bots;

    if (m == 1)
        return ns.geode;

    if (s.obsidian >= bp.geode_obsidian && s.ore >= bp.geode_ore)
    {
        ns.geode_bots++;
        ns.obsidian -= bp.geode_obsidian;
        ns.ore -= bp.geode_ore;
        return go(bp, ns, m - 1);
    }

    int[] search;
    if (s.clay >= bp.obsidian_clay && s.ore >= bp.obsidian_ore && useful("obsidian", bp, s, m))
    {
        ns.obsidian_bots++;
        ns.clay -= bp.obsidian_clay;
        ns.ore -= bp.obsidian_ore;

        //return go(bp, ns, m - 1);
        search ~= go(bp, ns, m - 1);

        ns.obsidian_bots--;
        ns.clay += bp.obsidian_clay;
        ns.ore += bp.obsidian_ore;
    }

    if (s.ore >= bp.clay_ore && useful("clay", bp, s, m))
    {
        ns.clay_bots++;
        ns.ore -= bp.clay_ore;

        search ~= go(bp, ns, m - 1);

        ns.clay_bots--;
        ns.ore += bp.clay_ore;
    }

    if (s.ore >= bp.ore_ore && useful("ore", bp, s, m))
    {
        ns.ore_bots++;
        ns.ore -= bp.ore_ore;

        search ~= go(bp, ns, m - 1);

        ns.ore_bots--;
        ns.ore += bp.ore_ore;
    }

    if (s.ore < 6)
        search ~= go(bp, ns, m - 1);

    return search.maxElement;

}

int main(string[] args)
{
    auto blueprints = stdin.byLine.map!((x){
        Blueprint a;
        x.formattedRead("Blueprint %d: Each ore robot costs %d ore. Each clay robot costs %d ore. Each obsidian robot costs %d ore and %d clay. Each geode robot costs %d ore and %d obsidian.",
            a.id, a.ore_ore, a.clay_ore, a.obsidian_ore, a.obsidian_clay, a.geode_ore, a.geode_obsidian);
        return a;
    }).array;

    int ans = 1;
    foreach (bp; blueprints[0..min(3, $)])
    {
        State s;
        s.ore_bots = 1;
        int g = go(bp, s, 32);
        ans *= g;

        writeln(g, " ", bp);
    }

    ans.writeln; // 7644 - correct!

    return 0;
}

%% 2022\day19\in.txt
Blueprint 1: Each ore robot costs 4 ore. Each clay robot costs 3 ore. Each obsidian robot costs 2 ore and 14 clay. Each geode robot costs 4 ore and 11 obsidian.
Blueprint 2: Each ore robot costs 3 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 20 clay. Each geode robot costs 2 ore and 12 obsidian.
Blueprint 3: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 20 clay. Each geode robot costs 2 ore and 10 obsidian.
Blueprint 4: Each ore robot costs 4 ore. Each clay robot costs 3 ore. Each obsidian robot costs 4 ore and 16 clay. Each geode robot costs 2 ore and 15 obsidian.
Blueprint 5: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 7 clay. Each geode robot costs 4 ore and 20 obsidian.
Blueprint 6: Each ore robot costs 2 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 19 clay. Each geode robot costs 2 ore and 18 obsidian.
Blueprint 7: Each ore robot costs 2 ore. Each clay robot costs 3 ore. Each obsidian robot costs 2 ore and 14 clay. Each geode robot costs 3 ore and 20 obsidian.
Blueprint 8: Each ore robot costs 2 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 16 clay. Each geode robot costs 4 ore and 17 obsidian.
Blueprint 9: Each ore robot costs 4 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 11 clay. Each geode robot costs 4 ore and 7 obsidian.
Blueprint 10: Each ore robot costs 4 ore. Each clay robot costs 3 ore. Each obsidian robot costs 2 ore and 17 clay. Each geode robot costs 3 ore and 16 obsidian.
Blueprint 11: Each ore robot costs 2 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 19 clay. Each geode robot costs 4 ore and 12 obsidian.
Blueprint 12: Each ore robot costs 3 ore. Each clay robot costs 3 ore. Each obsidian robot costs 2 ore and 16 clay. Each geode robot costs 2 ore and 18 obsidian.
Blueprint 13: Each ore robot costs 2 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 13 clay. Each geode robot costs 2 ore and 20 obsidian.
Blueprint 14: Each ore robot costs 3 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 16 clay. Each geode robot costs 3 ore and 14 obsidian.
Blueprint 15: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 17 clay. Each geode robot costs 4 ore and 16 obsidian.
Blueprint 16: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 8 clay. Each geode robot costs 3 ore and 19 obsidian.
Blueprint 17: Each ore robot costs 3 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 19 clay. Each geode robot costs 3 ore and 19 obsidian.
Blueprint 18: Each ore robot costs 3 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 11 clay. Each geode robot costs 2 ore and 8 obsidian.
Blueprint 19: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 2 ore and 7 clay. Each geode robot costs 3 ore and 10 obsidian.
Blueprint 20: Each ore robot costs 3 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 18 clay. Each geode robot costs 4 ore and 12 obsidian.
Blueprint 21: Each ore robot costs 3 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 19 clay. Each geode robot costs 3 ore and 17 obsidian.
Blueprint 22: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 20 clay. Each geode robot costs 2 ore and 12 obsidian.
Blueprint 23: Each ore robot costs 4 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 7 clay. Each geode robot costs 3 ore and 9 obsidian.
Blueprint 24: Each ore robot costs 2 ore. Each clay robot costs 2 ore. Each obsidian robot costs 2 ore and 17 clay. Each geode robot costs 2 ore and 10 obsidian.
Blueprint 25: Each ore robot costs 4 ore. Each clay robot costs 3 ore. Each obsidian robot costs 2 ore and 15 clay. Each geode robot costs 2 ore and 8 obsidian.
Blueprint 26: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 2 ore and 14 clay. Each geode robot costs 3 ore and 17 obsidian.
Blueprint 27: Each ore robot costs 3 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 19 clay. Each geode robot costs 3 ore and 8 obsidian.
Blueprint 28: Each ore robot costs 3 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 8 clay. Each geode robot costs 2 ore and 12 obsidian.
Blueprint 29: Each ore robot costs 4 ore. Each clay robot costs 3 ore. Each obsidian robot costs 2 ore and 19 clay. Each geode robot costs 3 ore and 13 obsidian.
Blueprint 30: Each ore robot costs 3 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 6 clay. Each geode robot costs 4 ore and 11 obsidian.

%% 2022\day19\solve.py
#! /usr/bin/python3
import re
import sys
import numpy


MINERALS = {'ore': 0, 'clay': 1, 'obsidian': 2, 'geode': 3}
def to_array(blueprint):
    arr = numpy.zeros([4, 4], dtype=numpy.uint32)
    for robot in blueprint:
        i = MINERALS[robot['type']]
        for n, mineral in robot['costs']:
            j = MINERALS[mineral]
            arr[i][j] = n
    return arr


def parse_input(path):
    words = open(path).read().split()
    blueprints = []
    i = 0
    while i < len(words):
        if words[i] == 'Blueprint':
            blueprints.append([])
            i += 2
        elif words[i] == 'Each':
            robot = {'type': words[i + 1], 'costs': []}
            blueprints[-1].append(robot)
            i += 4
        elif words[i] == 'and':
            i += 1
        else:
            assert words[i].isdigit(), (i, words[i])
            quantity = int(words[i])
            mineral = words[i + 1].rstrip('.')
            blueprints[-1][-1]['costs'].append((quantity, mineral))
            i += 2
    return [to_array(blueprint) for blueprint in blueprints]


def prune_states(states, max_costs, time_left):
    states = states.copy()

    # Once we have enough of a reosurce that we can't ever run out, there
    # is no benefit to tracking quantities of the resource above that level,
    # so we cap resource counts to keep state counts down
    for state in states:
        for i in range(3):
            deficit = max_costs[i] - state[i]
            max_useful_quantity = max_costs[i] + deficit * time_left
            if state[i + 4] >= max_useful_quantity:
                state[i + 4] = max_useful_quantity

    for i in range(7, -1, -1):
        idxs = numpy.argsort(states[:, i], kind='stable')
        states = states[idxs]

    new_states = numpy.zeros(states.shape, dtype=states.dtype)
    n = 0

    for i in range(len(states)):
        redundant = numpy.any(numpy.all(states[i] <= states[i+1:], axis=1))
        if not redundant:
            new_states[n] = states[i]
            n += 1

    return new_states[:n]


def simulate(blueprint, duration):
    max_costs = [max(blueprint[i][j] for i in range(4)) for j in range(4)]
    states = numpy.zeros([1, 8], dtype=numpy.uint32)
    states[0][0] = 1

    for i in range(duration):
        new_states = numpy.zeros([0, 8], dtype=numpy.uint32)
        for state in states:
            robots = state[:4]
            resources = state[4:]
            n = len(new_states)
            new_states = numpy.resize(new_states, (n + 1, 8))
            new_states[n] = numpy.append(robots, resources + robots)
            for j, robot_cost in enumerate(blueprint):
                if j < 3 and robots[j] >= max_costs[j]:
                        continue # No benefit to building more robots of this type
                if numpy.all(resources >= robot_cost):
                    new_robots = robots.copy()
                    new_robots[j] += 1
                    new_resources = resources + robots - robot_cost
                    n = len(new_states)
                    new_states = numpy.resize(new_states, (n + 1, 8))
                    new_states[n] = numpy.append(new_robots, new_resources)
        pre_prune = len(new_states)
        states = prune_states(new_states, max_costs, duration - i - 1)

    return  max(states[:, 7])


def main(input_file):
    blueprints = parse_input(input_file)

    quality = 0
    for i, blueprint in enumerate(blueprints):
        n = simulate(blueprints[i], 24)
        quality += (i + 1) * n
    print("Part 1:", quality)

    product = 1
    for i, blueprint in enumerate(blueprints[:3]):
        n = simulate(blueprint, 32)
        product *= n
    print("Part 2:", product)


if __name__ == '__main__':
    main(sys.argv[1])

%% 2022\day19\test.txt
Blueprint 1: Each ore robot costs 4 ore. Each clay robot costs 2 ore. Each obsidian robot costs 3 ore and 14 clay. Each geode robot costs 2 ore and 7 obsidian.
Blueprint 2: Each ore robot costs 2 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 8 clay. Each geode robot costs 3 ore and 12 obsidian.

%% 2022\day19\test2.txt
Blueprint 2: Each ore robot costs 3 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 20 clay. Each geode robot costs 2 ore and 12 obsidian.
Blueprint 3: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 20 clay. Each geode robot costs 2 ore and 10 obsidian.

%% 2022\day20\day20_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

int mod(int x, int m)
{
    return ((x % m) + m) % m;
}

int main(string[] args)
{
    auto a = stdin.byLine.map!(x => x.to!int).enumerate.array;

    auto amin = a.minElement!(x => x.value).value;
    auto amax = a.maxElement!(x => x.value).value;

    int N = amax - amin + 1;
    int[Tuple!(uint, int)] order;

    Tuple!(uint, int) zero;
    foreach (x; a)
    {
        if (x[1] == 0)
            zero = tuple(x[0], x[1] - amin);
        order[tuple(x[0], x[1] - amin)] = x[0];
    }

    //writeln(order);

    foreach (x; a)
    {
        debug {
            int[] ad;
            ad.length = a.length;
            foreach (i, o; order)
                ad[o] = i[1] + amin;
            ad.writeln;
        }

        // debug {
        //     x.writeln;
        //     a.writeln;
        //     auto ad = a.dup;
        //     ad.sort.writeln;
        //     order.writeln;
        //     foreach (i, o; order.enumerate)
        //         if (o >= 0)
        //             ad[o] = i + amin;
        //     ad.writeln;
        // }

        auto oldo = order[tuple(x[0], x[1] - amin)];
        auto newo = order[tuple(x[0], x[1] - amin)] + x[1];
        newo = mod(newo, a.length - 1);

        // if (newo < 0 || newo >= a.length)
        //     newo += x[1].sgn;
        // newo = mod(newo, a.length);

        // debug writeln(oldo, " ", oldo + x, " ", newo);
        // debug writeln;

        if (newo >= oldo)
            order.byValue
                 .filter!(o => o > oldo && o <= newo)
                 .each!((ref o){o = mod(o - 1, a.length);});
        else
            order.byValue
                 .filter!(o => o >= newo && o < oldo)
                 .each!((ref o){o = mod(o + 1, a.length);});

        order[tuple(x[0], x[1] - amin)] = newo;
    }

    debug {
        int[] ad;
        ad.length = a.length;
        foreach (i, o; order)
            ad[o] = i[1] + amin;
        ad.writeln;
    }

    // foreach (k, v; order)
    // {
    //     if (v == mod(order[zero] + 1000, a.length))
    //         writeln(k, " ", v);
    // }

    [1000, 2000, 3000].map!(x =>
        order.byKeyValue
             .find!(o => mod(order[zero] + x, a.length) == o.value)
             .front.key[1].to!int + amin
        ).sum.writeln;

    // 8713 - too high

    return 0;
}

%% 2022\day20\day20_1b.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

int mod(int x, int m)
{
    return ((x % m) + m) % m;
}

int main(string[] args)
{
    auto a = stdin.byLine.map!(x => x.to!int).enumerate.array;
    auto ad = a.dup;

    // int oldo = 5, newo = 3;
    // if (newo >= oldo)
    // {
    //     auto index = chain(iota(oldo), iota(oldo + 1, newo + 1), only(oldo), iota(newo + 1, a.length));
    //     writeln(iota(oldo), iota(oldo + 1, newo + 1), only(oldo), iota(newo + 1, a.length));
    // }
    // else
    // {
    //     auto index = chain(iota(newo), only(oldo), iota(newo, oldo), iota(oldo + 1, a.length));
    //     writeln(iota(newo), only(oldo), iota(newo, oldo), iota(oldo + 1, a.length));
    // }

    // auto index = chain(iota(a.length), iota(0), iota(0), iota(0));
    // auto curr = indexed(ad, index).array;

    auto curr = ad;
    foreach (x; a)
    {
        auto found = curr.find(x);
        int oldo = a.length - found.length;
        int newo = mod(oldo + x[1], a.length - 1);

        // int newo = oldo + x[1];
        // if (newo < 0 || newo >= a.length)
        //     newo += x[1].sgn;
        // newo = mod(newo, a.length);

        curr = indexed(curr, newo >= oldo
            ? chain(iota(oldo), iota(oldo + 1, newo + 1), iota(oldo, oldo + 1), iota(newo + 1, a.length))
            : chain(iota(newo), iota(oldo, oldo + 1), iota(newo, oldo), iota(oldo + 1, a.length))).array;

        debug curr.map!(x => x[1]).writeln;
    }

    auto found = curr.find!(o => o[1] == 0);
    auto zero_idx = curr.length - found.length;

    [1000, 2000, 3000].map!(x => curr[mod(zero_idx + x, curr.length)][1])
                      .sum.writeln;

    return 0;
}

%% 2022\day20\day20_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;

long mod(long x, long m)
{
    return ((x % m) + m) % m;
}

int main(string[] args)
{
    auto a = stdin.byLine.map!(x => x.to!long).enumerate.array;
    auto ad = a.dup;

    enum key = 811589153;

    auto curr = ad;
    foreach(i; 0..10)
    {
        foreach (x; a)
        {
            auto found = curr.find(x);
            int oldo = a.length - found.length;
            int newo = mod(oldo + x[1]*key, a.length - 1).to!int;

            curr = indexed(curr, newo >= oldo
            ? chain(iota(oldo), iota(oldo + 1, newo + 1), iota(oldo, oldo + 1), iota(newo + 1, a.length))
            : chain(iota(newo), iota(oldo, oldo + 1), iota(newo, oldo), iota(oldo + 1, a.length))).array;

            debug curr.map!(x => x[1]).writeln;
        }
    }

    auto found = curr.find!(o => o[1] == 0);
    auto zero_idx = curr.length - found.length;

    [1000, 2000, 3000].map!(x => curr[mod(zero_idx + x, curr.length).to!uint][1] * key)
                      .sum.writeln;

    // 2159638736133 - correct

    return 0;
}

%% 2022\day20\in.txt
8588
-5927
-4142
7093
-9781
7471
-7074
3164
-7581
9891
-8443
3619
-1054
4483
-3173
9606
-75
8989
-7916
-9631
3003
-1455
-4848
-9344
623
-1805
-4118
-9887
2292
-2915
-2876
4568
-2446
8525
-3802
-4322
-6648
499
5272
2559
4527
6082
-6749
-1755
7530
-6485
5926
-7001
3639
5019
-9686
-750
9514
-507
7637
7661
-4273
-3612
8900
5289
6648
-4961
-5984
599
2701
-7245
-2024
-2197
-5689
6970
1510
-6126
3896
-5046
-4575
-9030
-6601
-5980
-6316
6695
-6015
-6908
8033
9422
1047
-7414
-8928
-1253
-2025
-3085
7003
9860
2445
-3486
9085
-2673
5928
5966
4077
-1810
-7739
-1326
-210
-3620
-3152
-9793
-5535
-4236
-6736
8110
-7118
8239
-7059
7653
-3124
-3420
-1645
-6243
2895
-5666
-6813
-6222
4360
-7323
6952
2706
-3624
-9833
2697
-5667
133
7161
1433
-1975
-4817
1202
7731
-853
-5302
2555
-7613
-4917
-6604
5468
3466
-7059
6104
-368
-6195
-9091
9195
1453
-1023
2399
-5589
7375
1985
7042
-5177
-9203
6376
9021
-4393
3965
5499
-7515
-3420
-4022
-1285
2641
6872
7205
-7739
-7128
-5918
-5369
-3626
-789
4379
-9550
-8564
-8928
-404
4722
6790
-3188
7927
-8789
9135
-4237
-1540
3171
6861
-4348
4607
-3729
-7545
-5880
-1726
9879
761
-415
-185
7420
8199
-3076
-8720
-7026
2852
8138
-3138
7375
7661
-3025
-1157
5270
3639
9872
6710
3079
-504
1534
6544
-1695
-5142
8255
-732
7086
753
6036
3662
7840
-8482
5787
-4459
9778
3781
2903
5948
-6839
-5276
771
-2802
9941
-25
508
-6115
-2847
-7314
3054
7382
-1283
-5199
-1689
1338
7653
-9321
9134
6868
-3031
-5560
1459
-4351
-3868
-7566
2680
-4733
-7118
-4729
-2765
9951
-8030
-1984
947
2762
7058
5275
6951
-2993
8872
1282
-8729
8299
-52
-8185
-4838
-4244
-2562
1049
8456
5007
8408
-9858
7057
9923
-9407
2740
-3284
-5147
8857
1966
2914
9990
-4480
-8060
1605
7834
3929
394
4885
-4735
2447
-8344
-9893
1640
-1547
-8827
-7711
437
-7903
-7878
767
-6115
2601
9146
-607
-9327
5430
8106
3944
-5017
1719
-9030
6363
3634
-8812
-156
3459
7751
-5337
9405
8239
4466
-5418
264
-1049
1806
2171
1906
8887
-6212
-9159
1323
-66
-3238
-5731
7642
-4347
-8247
-6406
-9253
1892
1246
-3241
8889
6557
-670
633
1729
107
-4087
9891
5816
-8463
69
861
1021
-9942
1947
8025
2692
2078
7721
9915
-4161
-3074
-9262
7494
4937
-2509
5553
-3231
-6214
1847
-387
-234
8918
2242
-5051
4535
-6102
1372
9177
-8609
1372
-6767
1527
3979
-3905
9968
-9967
7801
7865
-4524
8958
-4248
-7202
-5505
2085
-4652
3434
775
6410
-8772
338
-7958
1723
-1279
-6485
5979
5650
8439
9098
-9676
-8423
-1940
4723
3718
-8186
7268
6762
3349
-1122
-1134
1958
4043
5263
-9084
1338
7314
2336
-5700
-7898
-7913
6199
3355
-9365
-8202
7360
6443
-4734
-4201
2723
1870
8783
-2922
3411
2836
8585
-4400
4555
7547
4216
-6796
7623
3187
-5993
-9848
9363
-5557
2790
-7569
8889
-9811
-165
-9300
7494
623
-9434
-6914
-5542
6912
3586
-2025
-3486
-215
-1489
-8907
8664
-9072
557
-5077
-1110
-6785
3822
-9189
3636
-1174
-4103
7361
9107
3123
-4197
-50
7096
-2224
-2024
1668
-748
-5614
3214
2327
-2240
3117
2827
4059
-9084
1897
758
-9961
-4963
4846
3429
-7508
-9426
7380
7244
2544
121
6748
1694
2510
-2310
-1696
3026
7200
4344
-5911
-3559
2138
8612
-3486
6694
-2428
8416
-3732
-1201
574
7816
8469
-3819
1780
-583
-4494
1978
6831
4802
7056
-7239
-3700
-2001
-3030
1171
-5319
-6648
-4603
-5829
-3853
8149
3054
8235
-6181
-3706
-439
3807
-9488
1820
-1722
2445
8445
-3853
-5080
-6883
-5652
-5880
-9741
5755
-3334
-7858
4288
-7118
7127
5216
1938
-5474
9765
3533
3748
-8553
-1484
-7157
1278
4379
-1127
-6294
3781
7063
1738
-300
9154
7801
9279
-7960
-1191
9644
-2289
-4282
522
-2152
-9027
-6992
-4817
-5182
-8008
6485
9909
-7906
-7435
9926
6347
740
5915
-2224
9398
-368
4722
-6615
-2894
8562
323
-365
-2797
120
653
-3880
9704
-9828
-9617
1403
-3453
-9288
-9951
-1295
-3044
-6346
9490
1663
-1169
9407
1839
-6014
-8364
-8381
-7789
-234
8457
-467
9216
526
-6108
-2541
-3843
-5135
9496
2402
-1407
2994
5087
-7191
3698
158
8544
6594
4906
5787
-4195
2706
3063
9135
8178
-7978
-4005
-9955
1207
-6465
-496
-1520
9968
2903
518
-8344
-1840
951
3116
4942
-7228
3081
1774
-158
-6616
9302
-1295
-3031
6376
3734
8897
-4037
1330
-5705
9746
1453
-7706
7205
-6348
9482
3424
-7239
-9706
-5046
6726
5764
2384
-6218
-7694
-9676
9488
-3044
-280
-382
9229
-7179
3373
1220
6178
-6952
446
-4237
1076
5399
-3759
494
4723
-5711
-8546
-3376
-8609
3168
5344
-250
4361
-6271
2032
-8492
6078
8688
-3542
5830
-2168
-7744
-1323
-4991
1009
1551
-5903
-4123
-9089
5503
3524
-3789
9422
-81
-3493
2714
1891
1125
3249
775
-853
7313
6611
-9433
-4261
9134
461
-5733
-2377
5269
6666
-3469
-3113
-2035
537
4643
-5903
-8546
1047
3230
4438
-5565
-3388
-6346
-6325
2276
-2996
5015
-5937
-5971
-1321
-9542
-1096
-1312
-8095
-9929
-5071
-3112
-6394
2606
7093
-2542
-4671
3562
5784
-2099
-249
790
-8575
-4835
9076
-2024
2203
7474
-9751
-5835
1073
6682
1472
9773
-2373
270
-3095
2030
-2211
2899
-1779
3586
-9542
-3173
-3561
-1537
1203
6563
6029
-5400
-2074
2702
-623
7530
-9751
-4248
8784
-5715
-6717
6436
6434
7194
103
-320
8431
2521
-6857
-9318
-331
-3094
3994
4416
-3398
-9774
-1944
-6611
8529
-681
2135
4844
-8665
-6421
-5116
-9558
7946
5495
3408
-5883
-62
9714
-7850
-5880
643
130
4689
-728
-9552
-492
-3281
-9177
4975
-7013
6156
723
-4148
9098
984
6457
-5517
-4414
6951
-3221
-4348
9578
-4383
9174
-537
1749
2510
-6648
6443
1186
1261
1842
6150
86
1831
6442
5841
-9791
1506
1935
3813
-5352
2654
5744
5818
6213
-570
8494
8488
-9321
-3037
2035
3968
9279
7589
-6252
7244
-8842
7274
6649
-7694
-7789
8467
2098
-8050
1887
-9701
1875
-6397
107
8178
-7434
-82
-5088
9553
8325
419
-8888
8880
-8679
-9614
-663
5751
5971
-4736
-2098
-4140
-1761
-7411
-8618
-4020
-4887
2629
-1160
4941
-7263
-8962
2435
-3945
2310
-5871
-6201
5895
7668
3123
6193
3002
7949
-7816
-564
805
1687
8006
-1701
-8354
-7581
7968
5795
-6613
6783
2686
1609
-9298
8622
9626
2412
-9836
-2304
3216
-5356
-6384
2841
-5017
-6182
4063
-9296
-729
-2375
8900
-4301
-3917
-9302
-2797
3658
-1763
2938
-4460
5960
-5422
-6655
-7624
-7303
-270
9519
8837
-3792
6881
-210
-7086
7019
4523
-2224
-2569
-1170
-2314
1186
5408
2648
-9361
-243
-5440
8588
6203
-6568
486
-4261
5429
1037
9680
4839
-1518
3187
-7013
-3351
-5663
5632
-6516
-5199
7482
-5310
-7326
-7618
-3485
-7965
5873
3434
9813
7369
7768
-691
9883
1667
4135
7549
-9964
9587
-4100
1025
8031
-2506
4857
6941
365
2312
-6197
2405
5677
6103
-161
-9804
4290
2079
7808
4379
7256
-3309
1720
-3373
-8890
-1726
8181
-415
-224
4036
-1772
8658
2405
-6201
8941
5314
9968
6759
2050
7926
7238
8887
-6828
-9542
-2449
-2175
-6094
-8955
7806
-5455
-1366
4885
-8327
-6611
5677
7994
-4998
1595
-2160
-9556
-5182
6830
1965
-5007
8520
6325
8299
1886
9395
-8382
-3510
-1570
4024
-9361
7365
-3958
1506
-1900
-8838
-9332
4893
5671
7026
4834
1701
5674
7029
9154
-5459
-7121
-2542
7091
1125
271
-1421
-7415
718
-3152
-8495
-52
9217
-623
-719
4365
-1852
-570
2425
740
3605
1442
-1800
3816
140
5954
-7644
-5977
4987
7885
-725
9422
5885
-7980
9622
-471
6840
-3379
-4230
-7925
7604
-1510
-9262
-7702
9496
8730
-511
-5760
-3058
-2182
-5930
1438
-4090
43
-6416
-9635
5463
4759
-9793
-9471
-2176
-156
5250
4247
-397
-9864
6900
3485
-681
-7850
-9087
6150
-7739
9982
-4540
-7542
1353
3168
4080
-3374
-5549
1241
3415
4556
-4841
-7233
190
-2383
-5531
6952
2443
-5296
2665
-3296
-5971
-4266
-9289
-9911
-7782
-3142
8799
5047
-3080
-4242
-4373
5718
3813
-3262
6752
-1426
-6703
2298
-5173
1951
-9326
-1721
-3843
52
636
9029
-687
-7448
723
9796
7361
-3095
7118
-9637
-5021
-6126
-4121
-1761
3586
7211
9200
-6870
7003
-2554
8599
-5831
9571
9682
-2598
5430
5797
2121
-1642
2792
-5258
8250
-3752
783
-243
7868
-4878
-7204
2639
-9099
-1068
1730
-9179
-1197
6362
723
-5748
-2010
4995
5735
-7715
-9687
5644
-1091
7691
-3961
4935
2387
-2630
-282
1435
9984
-3616
-69
3155
-491
3828
-7212
9247
-3940
-7514
4361
-1077
-6999
6473
-6999
7093
-5609
-4228
-844
9134
-2193
-8542
3635
-809
-5511
7802
-6126
2626
-7170
6662
9321
-1133
-9261
659
-7564
-7576
-629
5874
4528
3203
4036
3568
-5405
-4548
6073
4600
7366
6170
-9981
-7494
-6860
3867
-4396
-8782
-4986
962
4419
-3196
3481
-7715
4164
-1349
-1723
-9974
-7459
6659
2342
-5053
-9202
-7687
-3526
-2788
2493
-7084
-3824
-9888
-6529
-1421
-7829
9229
-7236
2064
9317
5710
5811
9938
2027
1672
3288
-1566
9206
4203
-7978
6925
-2549
6861
-4297
-7131
9283
-5861
-9087
2348
4253
6037
9827
6623
-719
6401
9138
-8378
-8159
-5927
9094
-1294
-5849
-6153
-7553
-1312
-8273
8882
6860
9035
666
-8792
-3534
-2659
-9597
-4427
9950
2639
7263
6957
3658
5159
-3804
-9435
-5885
7870
-4847
-8665
-3018
-8482
-783
-893
7889
3123
-899
-2401
-2772
9848
4483
-1060
-7566
6542
6525
5388
2361
-280
9872
99
-9747
-4160
8859
912
3117
-439
4073
8467
-7177
6105
-3618
2788
-3223
6666
-7501
1787
8265
-1326
-1088
-7336
-3467
-5523
9829
4623
3003
-1688
1306
3146
-9531
9138
-8461
-9840
5600
-590
-1794
-4838
7973
-8275
4519
31
-5106
4141
7900
574
-1337
-6680
-3071
6487
-4905
7673
-1474
-3040
-9966
5856
-2765
644
-7424
-1852
-5386
-9754
1847
-4375
8630
-4431
2391
-3526
1640
-4812
6546
-8347
-6842
6330
-7263
-7027
-9531
-3431
9090
8002
-2315
-2163
7865
-7261
-6990
6882
2610
386
2124
6249
-3112
-1342
8582
1659
4816
-2139
7918
-8812
-8727
-4005
4647
-7494
-7327
-1501
-1927
-1673
-6526
-3420
1566
-2714
1425
-2891
5416
-2383
2037
-9942
9752
537
8455
-5755
1663
-8429
2544
2240
-5241
-4634
-3835
-1921
8945
-3344
-2918
8012
771
3379
871
-1023
-3630
-2236
4415
6078
-981
5755
2680
-870
8318
4962
-6961
1273
2271
9990
9432
2088
2413
4712
-9132
5601
7718
8457
-6528
-4224
-3204
-7523
6225
-9287
-2220
8075
2010
-3492
2688
-8188
9215
1544
-1915
1408
-9867
7475
-8605
-1615
-5220
-6785
2025
-883
5803
6530
-386
6503
6103
-5781
-854
-6763
-2136
-7181
-2525
7897
-9258
-5575
-2373
-1861
-4297
-8762
-2558
2163
1169
6959
-4347
9600
7688
9003
3189
-788
1292
7220
2926
-4933
-8004
-6535
-4541
7665
-2375
764
8158
-2031
2124
1394
2943
284
7478
3117
-5452
-9946
1428
-322
-8253
-7390
-2266
7152
-137
3080
-920
4305
9028
7432
9477
-9327
-5433
2610
7199
-3344
3415
7542
503
-9332
-6065
-7121
-496
5236
395
6551
5151
6967
-5541
-6904
8141
2870
7623
-2987
-2098
3002
-6069
4540
-7202
-727
-494
2788
740
-8563
-3435
-1975
4124
-8106
2853
6344
-3031
-1101
-8721
-946
9680
-2476
-1623
3214
9035
-7887
-1215
-8587
6335
-9230
7056
3064
-9335
-4472
1780
481
-86
-3868
-8677
-2300
9791
-2802
-2279
-9989
4082
-368
1701
-7169
-5841
-5139
1063
2525
-9047
3478
8869
7649
-3692
-2956
-5216
-9389
8980
-5214
3349
94
-4199
124
-538
-9300
4253
7152
3214
4263
-6968
2686
2158
400
-1003
-3413
-2314
-8567
3965
-7200
-4240
5411
6442
-1316
-2980
4874
8936
9618
-694
-4941
2559
6171
8361
319
5788
6310
1724
2299
-3262
9143
-3948
-6968
-6136
6406
-8551
6140
-6420
386
5482
1107
-4819
-5541
4280
3091
-9194
835
467
9271
-9764
-4612
486
-9597
2942
-2932
1021
8775
-8764
9510
-7879
6641
1181
-6052
-5280
-9195
-3584
8544
7366
-4205
-8623
605
9629
2352
-6114
-880
6341
-4256
4523
-1734
7164
-3417
5453
-5066
-5142
319
9502
-215
5583
5081
7358
-6275
8199
9134
-9388
-4040
4379
-2218
2312
-4079
9278
-9840
-2767
2473
6006
-4237
5437
994
585
7524
-7200
8630
-3069
-7879
-2496
-6505
-5516
9919
-8496
9848
-7390
9423
-3428
-4964
8737
-7202
8031
-9276
-4540
7026
-9207
5353
-2588
-3130
5751
-7059
2056
-596
-5717
6810
5618
9305
8054
1927
7719
8500
7439
3998
9205
-4118
-2441
-1173
5025
9056
-4965
4049
-5825
9891
8684
-1321
-2165
2036
8608
-1686
9217
-397
9806
4378
-2428
-3467
-48
-2987
-8332
4141
-520
9081
5166
-9723
-9301
2682
-1811
-491
-2767
7063
-1519
-8161
-3191
-9615
2534
-3367
-7357
1454
-9042
8112
3386
-7401
7999
-4093
-6443
-4118
8150
-3226
-5422
1738
-5179
8942
5472
1778
-6431
2427
-1924
7665
-3262
-9412
-2985
7869
-4657
-1696
-7828
2505
943
-4819
9389
9276
-1965
4420
2081
-3431
9244
-2784
7891
231
4244
3494
-9128
2186
-2933
5016
-5276
-2311
-9043
9717
7224
-7831
331
-4541
4777
1927
3497
-7566
4955
-8200
452
3907
-7116
3003
2270
5878
1327
-3252
3334
9229
3840
7924
-8873
6925
-4396
7439
-3391
555
-2630
1689
3367
-1551
-4237
1306
9304
9805
-9326
-5401
-4905
6154
7706
5289
3927
-4434
7671
6785
-2119
-5316
-6832
3136
-1707
-6392
7411
383
-5088
2942
-9662
2405
7420
8332
4483
9923
4253
-9679
4390
-6601
7755
-4835
9897
6140
-8494
7317
4063
-663
-6485
-5871
7091
2706
-9250
-5548
-9223
-4454
-1859
8311
5564
6594
-9207
8526
8734
9915
-671
5469
5259
-2448
7810
2145
8628
-5750
7647
-1721
-6218
-3662
9485
7380
121
9385
7285
-8951
-3426
4517
-7155
8721
-8179
-74
5330
7927
-38
9321
2679
-4371
4415
6952
-2663
1619
2756
-7110
-729
6371
-6259
8302
6006
2433
3994
432
5269
-9624
-1809
-3865
-1134
-7059
7801
-5058
7268
4523
6816
4607
-9426
9916
-932
-992
-2664
2216
-7966
4396
9668
1742
4472
644
-4116
-1313
8967
97
9302
903
-7133
-1715
2615
91
2826
-5668
2846
1911
-189
-4286
6611
2844
-4766
-9084
1093
-6049
-1261
8959
-992
-412
-3871
-8987
1624
9279
1636
2421
513
-8768
7069
790
-290
5751
-6072
9916
-2980
-1209
-8415
4518
-4457
-549
1580
-9540
9201
6442
3813
6872
-1942
-5880
-8249
2521
-8779
-3112
-7026
688
6563
-5980
-8150
2463
8989
-6053
-1438
-7446
-2160
2756
6752
8852
5227
9446
-6761
386
1983
-1977
-7228
-2400
-7222
770
-2674
-1104
-4244
-5167
-6197
-2932
6510
9881
8273
-3285
4055
-8781
-6373
760
89
-844
3364
-7213
-7374
5643
4946
4495
4243
6752
-516
4027
-8293
6726
7523
-163
-5886
-464
-3284
-8907
-7770
-8696
-3559
-2678
-7377
2993
4359
3281
9488
4244
-3588
-7231
8416
-8480
5542
2760
1162
-6526
3517
-1200
5499
-9379
-6181
-8804
-1613
-3894
-840
-8054
-502
4722
2314
1049
-7962
-2036
-8971
-5531
1396
-5063
5201
6563
8816
-5284
8145
-1977
-2914
-9260
-6386
6362
1023
-3252
8744
3562
5701
-3777
1009
6748
-8665
-6214
-7130
-5332
3755
4840
967
-6614
8727
-2124
1001
-8047
-8161
9940
1146
-8046
-1826
-5861
-5377
-6127
2790
-5734
-6125
1506
612
-900
-4331
-6763
744
2826
4600
-5632
3566
1442
8068
-2748
-7177
6859
1612
-1970
9684
4093
3149
454
-1912
85
-5092
-1609
-5886
-5065
6016
-6611
-2047
2027
3221
9423
-560
-9207
4207
2673
-4388
-5470
7757
5541
4059
1238
-3484
-5565
-7257
-8112
-8809
-3256
-9288
-4118
9022
-4869
213
7102
8977
-9148
1372
-2570
2783
-2261
-9361
4417
3511
-4427
-858
5417
7092
7606
-2082
-5511
-3278
947
7875
3588
-8823
9496
-6854
-1115
4406
1216
9187
5854
6273
9968
-1789
6040
3061
7457
2373
6594
5621
-9916
9566
9271
-8156
-6558
-2760
-8779
2035
4816
633
4759
-6908
-2990
7965
7990
1952
7034
-2860
-4830
-7726
-8907
-9602
-2158
-4415
1484
-5077
-6860
-1706
9153
626
-9121
-7715
3126
-4280
8240
1156
506
-6165
1337
2732
-1472
-2413
386
-9754
3431
-3420
-2678
396
-880
-8947
-2040
3955
4893
1700
3788
-9316
307
8744
8138
1161
5087
9590
-8951
-4461
-3097
-6856
6073
9029
-1474
6006
5468
579
8143
-3234
676
-8195
7542
1082
-3676
3680
-8625
9415
8479
-2987
9127
-1294
5233
2682
2406
9629
-8018
9081
-4721
8737
-1912
6734
6118
-5388
7204
3123
-6
-5079
-825
-9117
-3415
-2998
8714
-4998
3109
-2861
6626
-4121
3755
-9707
1700
-4794
-4943
1524
8608
6775
-2182
-9754
-1842
8988
3059
-7128
4663
-5652
-3441
-7197
-7157
6008
-6126
-9118
6167
-5196
-3254
-9288
365
5343
6428
2768
8185
9022
-8665
4322
-3350
-4680
-185
-7157
4379
9267
-5851
8426
-4246
-7498
9382
-8293
6042
2208
-9189
6003
-8987
9629
8737
-8778
3856
7873
-8381
-4057
349
-7726
2779
-4137
-2621
-5308
9796
-1160
-7966
-563
-6263
-171
-5466
9267
-249
4623
3681
-7941
-6982
1086
8746
9352
-2987
-6217
-4099
-7248
-7092
5588
-1722
-9987
3484
9344
-7647
8110
-1467
-8171
26
-2619
518
-9947
7457
-9288
2002
355
-5017
7454
451
-1573
-9353
-3592
9736
-4001
-1197
-6854
9500
-7191
5441
-5849
-4149
-4835
-5514
-9288
6785
5817
8097
-7501
4107
-6802
-9083
-2235
2032
-7715
7559
8467
444
-1702
-7599
450
9657
3638
-1283
7647
-742
5873
5148
1741
8173
-126
-4398
-3612
-1121
-6038
-9015
2948
-5980
-5928
4280
-8414
-4368
-697
-8765
-502
9984
5697
2109
994
8141
7677
9143
6443
9277
-8618
-4594
1654
-2329
-7714
-5319
8492
-7128
5884
9022
-8996
5159
-8127
-6396
7045
-2235
8592
-4897
1654
-2066
-1091
8482
85
-4106
2627
2697
-4282
515
2270
7952
-2664
7423
-1540
-652
-6209
9590
-4757
4946
-9171
-9160
-1496
6410
8628
1707
-9656
-7401
-7960
-9452
2742
2790
3888
-3161
-1742
-5803
3362
5135
-9751
1371
-8512
-9957
-7837
-5665
2663
6504
6594
-5322
-252
-8891
2165
-8990
-9635
-9138
-5129
-3391
5798
6367
-7264
-7903
-4616
-3640
2311
6775
8041
-4203
1726
6594
-8091
-9385
9276
4798
-2562
7313
5137
5843
7952
-4784
3620
-9451
3367
-9836
7968
-8354
-4628
-3517
5277
-4210
1180
-1342
7628
-5211
-6014
-8286
1946
-9805
-2257
5265
-6854
8719
8891
-7518
840
-8201
-3410
-7130
9649
1171
-8679
7801
-792
-8971
-6928
-601
9983
-8008
8240
-6939
6865
-5377
8199
-3139
196
5569
5023
-8057
-5432
9639
-8562
3687
2176
-331
6611
7757
-7609
6439
-4757
5717
1825
2639
-7539
-1429
-8480
6293
-160
4765
3193
-5802
-684
-4149
7154
5966
332
-3827
-8127
-3265
2314
5563
-5824
-2652
9044
-9467
311
-4239
1139
-8259
1338
-3072
6831
-3156
5186
5396
4838
8181
-6705
1593
6775
-5019
-4112
3808
-8349
-9086
5151
-1902
-4998
7090
1038
628
-4410
7539
8040
7340
6536
1093
-8911
9172
3605
5411
8442
618
2447
734
5371
6666
1709
-38
-2980
-264
-9552
-158
-328
4263
8332
7624
-4895
-1451
-8127
8933
8340
6426
-840
-7842
-3181
-4418
2475
-6883
-3175
-6509
-2035
2430
8872
-7397
3715
-2175
-1537
-5342
3014
-6708
-7855
-5541
1610
-5244
-6644
-2137
1074
1538
-2373
-4007
-8218
-8990
7240
-5337
-125
3172
2475
8608
4946
9732
-4333
6297
-7200
-3231
-2377
7229
8491
8588
3535
4529
2729
-4431
6775
6933
7881
5174
7683
6775
-7372
9352
2433
2473
7367
-5342
-282
-9614
9868
-6448
-4948
9855
5228
5717
-1057
5116
2447
7661
7264
5960
-1335
-7298
-9400
2242
-9078
-2163
5445
-5107
5680
-8060
-5525
2914
-549
-7029
-454
-4199
1749
8136
2098
-8687
-9248
-2315
7313
973
-421
767
5907
7136
6581
2849
-8017
-7545
4979
-3732
-6
-1035
-1811
5290
-4087
9471
886
3423
-2448
-5085
7716
-5322
-5174
-7257
7398
-1316
-8074
7628
-8363
-792
4073
-6553
-1434
-4348
2752
-7566
956
5435
-741
3709
3023
-7675
3781
-5615
-1944
-5699
-7110
-4886
7361
914
-127
1442
-4375
-2205
6464
-3520
-3243
-4916
-8535
8808
7127
12
-2244
-2540
-7754
8775
5751
1390
-5253
3485
9578
5515
-4483
-8954
5152
4112
-6068
8231
4246
7445
5183
9415
1927
6676
-397
1146
-2664
-6702
-5554
4593
5383
-9219
-8782
-5476
-1970
983
6402
-5532
4425
-1353
8734
9407
8087
-5351
2578
5019
8366
4207
1578
-4861
7628
-8499
-8361
7394
7990
-6318
513
8719
2163
-3025
8425
-1365
-7231
9915
-8898
2437
-4187
1338
8120
3070
7198
2131
-7756
6001
1983
-5095
2266
-3289
9915
-2059
6924
-5137
-2119
7552
-2918
2405
3734
6710
6
-161
9461
3462
-8803
-4273
-7855
576
-5054
-8234
-2098
-7755
-4764
4175
5227
8900
-4037
3651
-5614
5830
-7130
-4828
-9976
-6597
-9705
-7781
1290
-5159
1870
6442
6669
7670
1733
438
-6706
-4917
1484
5270
-9542
9851
4305
2948
-8233
6924
2721
-7972
-6219
9022
-443
-3517
-8894
104
-8833
-1977
2396
-1157
-8841
6933
5700
-3386
5045
-2040
5537
-1605
-4689
8799
4092
7159
-496
8063
9630
-1494
7086
-824
8500
2130
-4945
586
-6789
6867
-4517
979
2611
-1826
-4211
7139
2968
-2031
-5356
-3752
-3071
-7494
-870
1597
-6856
578
509
-6974
5388
-9680
9583
686
-2497
-1159
-497
-765
-782
-7247
-7879
-9705
1839
5135
7194
7808
-8951
-3420
-5526
-8951
-2586
-3574
89
7753
9276
-8030
-498
2689
-3448
7677
3533
7811
-9093
1278
7821
-9416
3221
-7852
-8662
8978
8799
-6535
7387
842
1867
8012
-6126
-6392
7134
-3156
-4566
-3526
5873
1431
-4090
5602
-8740
-8419
-5801
2742
9249
1767
-4307
-1114
-9461
9030
-3317
-6091
-5652
6239
4946
-3230
-4406
2656
-1546
2788
-1175
-5214
-8898
-1808
-6201
3681
6443
3402
-1407
6294
-4320
-1396
-7552
-6123
2132
-3156
859
3156
8181
-2996
-2663
-266
487
2657
9106
5277
-7559
2316
1667
1263
1089
2867
4223
3453
-7176
44
-1810
6754
-7608
418
1376
-5792
1257
1717
-4434
-114
-1864
-997
1767
-7120
231
-410
3270
7685
-1902
-3742
2070
4102
-7485
-7013
-4196
-5874
7628
-1261
8834
5902
723
-7897
2875
8854
3073
-8969
-544
649
-6897
-6431
-992
-2060
8040
6594
2935
-6919
-6648
1619
9752
7361
-7059
-5139
-4112
-3191
-3250
4600
4289
-1833
9015
-2205
-5669
-9347
8978
903
6273
4100
1408
2435
942
-3960
-8562
9581
8588
5895
-7128
-9575
-1818
-3349
-2084
1847
4322
-5325
-3030
9504
6365
1657
9950
-7862
-2874
9093
-8705
-4604
-159
3588
-4162
9307
-2625
9074
-4119
1181
-5284
798
5573
3718
1467
5650
-844
7088
-4996
-3696
-8105
-1215
-608
-175
3929
3828
-8727
1656
3947
2596
8709
-570
3757
-4780
-1288
1868
8187
8371
-5383
-1053
112
8065
-3744
-3572
2951
7869
-6797
-9435
-2848
-706
-4861
9814
-516
1981
-1017
6757
425
7544
8243
4365
8658
9668
2665
7152
-2779
-4545
7279
6969
8136
8519
6875
-1312
-2344
8723
-9289
6079
7661
-6994
5783
-9624
-8763
1907
-104
8500
2460
-1304
-8665
5608
-6321
-5401
461
-9635
7984
73
-7509
-10000
-4297
-2937
8118
4663
5250
5787
8906
-5507
835
-9176
1905
6611
6581
525
998
-5682
793
4708
-7906
-6604
-9527
-3559
3998
-9189
-7448
5525
612
6598
-2548
8184
-9122
8734
5355
6333
-9357
-8869
5760
250
-9636
-1601
-7280
942
-3723
-1052
1565
4201
2324
9937
4623
-4396
9463
-2343
517
6347
6446
-2318
4420
5299
721
-9542
8658
-4280
3483
-5614
-9593
-3278
-8415
4211
-9635
-900
5148
2844
5758
3745
7055
-4022
8229
-8435
7683
-8187
4135
-6934
-2748
-2152
-1134
-2031
-5159
-3783
-5932
-8582
-1551
2626
7328
-389
9387
1832
-6981
-3868
8109
-4459
-1678
9079
-2959
-7539
-127
-1152
2759
-6393
8161
8691
5627
8169
6567
-8665
3341
-8546
8734
3381
-9566
-3626
-8232
4916
7397
-891
6508
-9347
1140
3054
6247
-397
-2640
513
-105
6727
-7450
2694
-5718
-8354
-6856
6759
-9344
3311
3404
9979
-7026
-5175
5601
-4348
-3696
-9865
6488
-1353
-9332
1392
9943
770
1657
3813
-5603
6729
-9830
-9183
8881
-5019
-4440
6226
5182
-8760
3957
-1410
-455
7090
-2831
-8711
-3631
-2066
-9793
8623
513
-7471
-8050
-6568
2768
-5294
9249
9098
-7377
-4734
4627
7831
2087
461
1672
-1363
-2632
-4161
-9662
-6153
-6312
2122
-5310
4034
6040
-4735
-9310
6261
-3076
-7407
1167
-9162
-5145
-9785
-3686
-5603
-9370
-2540
-8871
98
-6526
6443
-2462
5764
1181
-5663
4510
7670
-5591
1891
7386
-8553
-5277
2403
3084
-1964
-3172
8134
8462
2965
9877
316
-9840
-748
7483
-1802
8601
553
623
-4498
-4193
-4566
8711
9352
-2687
-5161
-645
-4936
3698
5330
-4257
-4680
7053
-415
-3752
-3995
-3653
-6372
-3756
-2745
4784
386
9498
-3503
4305
-6566
-9135
-6125
4416
-1955
-5512
5668
-5445
9614
-161
2961
-2748
4314
-8407
8221
-4848
-3097
-2828
9463
-504
-3578
794
-288
5
-9762
8065
-2560
-8837
-6730
-9947
-3828
-3531
9497
-3917
6245
-4905
9030
-4112
-6553
-656
1672
-1527
761
-9433
4107
9273
-728
-9957
9312
4382
8972
4509
-5278
4712
-928
4782
-6919
8074
-3043
-1940
-1965
-7147
885
7689
-155
8065
-3414
-6827
6727
797
8309
-9805
-6397
4358
-5835
-1405
-5627
-5066
6665
5087
6194
-1133
8646
4212
-9087
-3120
-9350
-7401
3462
388
4838
9429
-3531
2707
9140
6206
-5167
2447
4207
-5243
-9769
7956
-8456
-4388
1385
-3711
-8708
-5294
3330
6861
1510
9659
-327
-1058
-2136
5619
1858
-813
4468
5988
-7083
-963
-3700
-5531
-3223
-2355
1299
480
2648
-5633
6521
-5979
-355
-1868
-9156
8910
2940
-9701
-3795
-760
-2082
-5303
-1538
9199
-4781
-7597
-8545
9205
6457
-891
-3901
7748
4523
-5588
8125
9946
2836
-9439
6195
-6979
-9326
7452
-8271
-7455
4401
8366
-548
-3332
5335
-6102
4874
8411
7881
-2987
-8951
3307
4891
3269
-1915
-7654
-4297
3965
6312
5234
2754
1922
5404
-6920
-1426
-3998
-3068
9537
-8408
-8684
730
8955
-1878
-3094
-3973
580
7782
7877
8419
1213
-2538
898
-9342
1440
2246
9177
896
3380
-2596
7200
-1454
7481
4946
-9547
9320
1266
1985
6552
-2160
9993
6142
7223
100
8566
3123
-2802
3548
807
-4180
9566
-7891
-5216
3003
-5820
153
-8479
5
-415
-103
-8873
2994
-7644
1902
-6107
-2009
-6726
2760
2510
-6511
-7112
4223
1273
7328
886
4613
6201
9840
-9793
-7756
-1549
4800
1167
7220
9076
-99
-2133
-4571
4037
4650
7047
2359
-3813
3011
-5142
203
1654
8688
-3427
9915
-2704
9496
-5496
-1970
-2911
1922
-7901
-7507
-1111
-8127
3502
2052
4319
1113
4863
-1424
-7947
-3765
-6629
-7577
2606
-4040
-4320
-1610
4123
3358
9840
1839
753
-4824
-8741
-1546
8597
5336
-2168
9463
4306
4594
-2448
-2373
5644
2378
7670
6859
-4297
3364
-6636
-8642
5628
6574
2779
-744
4655
-6466
-1880
-5711
-5788
694
3331
-1796
-575
-8776
-7744
7869
3816
-3752
-5259
-370
1878
-9823
-4371
3046
-7362
-2329
1770
6451
3554
5417
-932
-7599
-6289
-9491
-4972
-7668
4277
5334
732
-9496
-9781
3589
6592
-9901
-9179
240
-6406
807
5676
-9028
-2484
8799
4600
8867
-9788
1504
4875
-9003
-3313
-1615
4181
-8184
9793
9555
1630
-8376
-2465
-8074
4570
6890
4420
-6125
-125
-8990
-9302
-8808
-4607
9263
6405
7328
-4514
8417
-827
-4347
-4090
-3656
6788
5236
-4772
-4057
-4694
-1809
-1606
3091
-9194
2027
2583
969
7711
627
3731
5519
-728
1394
8783
-6209
3409
-6797
-6888
9940
1023
-9709
-9769
7352
1282
8015
4632
-5506
4432
1958
5787
-9253
-5801
-4998
438
9220
1371
-7100
8545
-7769
-1134
7355
-9938
1283
1173
9337
-714
-9644
-9865
-759
4092
-7852
1433
842
8324
886
-2996
2248
-9712
-1061
-4301
7388
-2130
-6813
-6058
-2177
-7270
3362
97
5629
1831
-748
-9682
4336
-7507
-3448
6273
7877
-9189
-7231
-3133
-9479
6464
-2428
-856
-950
-2888
-3223
2681
-6236
-815
-2361
7653
3270
9346
1173
-505
8159
-2983
-8514
4723
3212
8181
1439
-9540
3884
-4593
9317
-1076
-4711
97
3070
4689
-979
5384
9578
-9169
7456
-8954
6144
-3709
5754
-3559
-9083
9901
2510
5288
7440
-724
7244
1067
-9356
-2220
-1196
1169
-167
7987
-903
-4055
-689
-259
5591
-3431
9360
6525
8344
-6658
-7128
4819
-3302
2679
4779
-8485
-7009
-5576
-2442
-3704
2163
-9602
1356
-9542
-3382
6171
1593
-6968
2596
-9415
-9783
-5639
-6919
3494
8566
9604
-5268
-4437
4593
-7139
5259
-6438
3404
-7411
6709
-5883
7552
-4091
-2802
-9388
-4106
2935
-7391
-9705
-7893
4990
-4151
-4203
3820
942
9914
6266
-9079
2920
-6390
8726
-2160
-4841
-5759
8276
5430
1619
6488
-1313
-8363
-3257
-417
-6935
3644
5507
8988
7732
-1726
-5053
8475
-3830
-7032
9884
-5292
2663
2706
-8824
3226
6862
6866
-2042
4470
2437
-3384
-6777
-109
6524
7605
4102
-8564
9993
-7259
5334
-4420
-5588
-3094
-6054
-1438
-1290
-1533
7916
-8273
3589
9145
-8947
5252
-4094
9735
7577
-1778
-8014
7382
-6396
-5021
8646
-9080
-1267
-9568
5674
-6735
2460
-7572
1524
-4922
2088
7124
3873
-8210
-4289
4306
-9148
-5993
-9186
1352
-4705
-2362
-1251
-7448
-5588
-3476
7544
-8185
-9072
-7390
-2542
-7086
-6416
7091
-3172
-9202
-6014
4712
720
-2346
-6
9486
3307
-1218
-9793
1923
3374
-7083
-9301
4580
-4882
-8711
5735
-5400
-8138
-9117
-3188
7313
-6401
2384
5499
9033
-290
-5315
-8510
2439
-230
-3044
-5878
-4996
-4607
2025
6464
109
-2765
307
-1088
1992
-8047
1283
1390
4838
5673
-9600
-3351
-1025
4033
-4253
-2305
4730
6676
9668
3241
9382
-643
-5285
6294
6699
8372
-6564
6552
-5474
-9598
-4197
-3819
-5474
-6420
1396
-9588
8321
-1811
-8880
1272
5039
-62
-2799
-3868
-1446
3979
2190
-9117
-4051
158
2968
7816
-2390
4132
6002
8809
-2428
-5482
7661
6611
-8871
5340
-7831
-651
-9253
5608
-4945
-1197
8928
7375
-161
-8873
8302
622
-7969
5725
6831
5203
7056
4390
2447
231
-1975
6666
-4360
7210
1559
-9656
5111
1171
-9676
-1707
2035
-5854
1015
-3752
2342
-8983
-7112
-3690
-1420
7677
1012
-3355
626
7931
5054
-4757
-962
3586
5394
-5088
-3017
1710
951
-1426
-5258
5387
4600
1276
645
-8127
-7125
-1312
-60
2626
-8127
39
-3449
-4368
-8609
-1467
-9326
-1664
3040
-341
-354
8170
5718
104
-382
-3254
-135
8649
8425
-9187
-697
9295
5588
5069
1086
1456
-2282
-8339
-1308
8087
-1312
-6981
9933
-5523
-467
-445
-7714
4929
5626
7380
8220
-5693
-4066
-9709
5007
-7766
8714
-514
2298
6445
-6592
-7336
-7911
8837
869
4643
9645
-9719
7244
4578
-2772
-9348
493
-3896
4193
194
5950
1992
-5788
5863
3570
121
-3845
-3751
7949
5734
-6436
7628
2926
1729
-7905
-2648
-465
-7747
0
-7323
7328
7119
-8471
-5226
9451
-9981
3861
7653
-9929
1758
-5977
-6161
-7264
3093
2789
2433
-8954
-7869
-4688
-3843
-1191
3478
-9865
3054
909

%% 2022\day20\test.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.variant;

int main(string[] args)
{
    auto a = [3, 6, 2, 1, 5, 4, 0];

    auto indicies = iota(3);
    auto ai = indexed(a, indicies);
    ai = indexed(ai, iota(2));

    // auto indicies = iota(3);
    // RandomAccessFinite!int ai = indexed(a, indicies).inputRangeObject;
    // ai = indexed(ai, iota(2)).inputRangeObject;

    // auto ai = indexed(a, indicies);
    // //ai = indexed(ai, iota(2));
    // ai = indexed(ai.source, indexed(ai.indices, iota(2)));

    writeln(ai);

    return 0;
}

// int main(string[] args)
// {
//     auto a = [3, 6, 2, 1, 5, 4, 0];

//     auto indicies = iota(3);
//     Variant ai;
//     ai = indexed(a, indicies);
//     ai = indexed(ai, iota(2));

//     writeln(ai);

//     return 0;
// }

%% 2022\day20\test.txt
1
2
-3
3
-2
0
4

%% 2022\day20\test2.txt
3
0
3
-3

%% 2022\day21\day21_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.ascii;

struct Monkey
{
    string name;
    bool knows;
    long number;
    string left, right, op;
}

Monkey[string] monkeys;

long get(string name)
{
    auto m = monkeys[name];
    if (m.knows)
        return m.number;

    long left = get(m.left);
    long right = get(m.right);

    if (m.op.front == '+')
        m.number = left + right;
    else if (m.op.front == '-')
        m.number = left - right;
    else if (m.op.front == '*')
        m.number = left * right;
    else if (m.op.front == '/')
        m.number = left / right;
    else
        assert(0);

    m.knows = true;
    return m.number;
}

int main(string[] args)
{
    foreach (line; stdin.byLineCopy)
    {
        Monkey m;
        m.name = line[0..4];
        if (line[6].isDigit)
        {
            m.number = line[6..$].to!long;
            m.knows = true;
        }
        else
        {
            m.left = line[6..10];
            m.op = line[11..12];
            m.right = line[13..$];
        }

        monkeys[m.name] = m;
    }

    get("root").writeln;

    return 0;
}

%% 2022\day21\day21_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.array;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.ascii;
import std.random;
import std.parallelism;

struct Monkey
{
    string name;
    bool knows;
    long number;
    string left, right, op;
}

long get(Monkey[string] monkeys, string name, bool precalc = false)
{
    if (precalc && name == "humn")
        return long.min;

    auto m = monkeys[name];
    if (m.knows)
        return m.number;

    long left = get(monkeys, m.left, precalc);
    // writeln("left = ", left);
    if (precalc && left == long.min)
        return long.min;

    long right = get(monkeys, m.right, precalc);
    // writeln("right = ", right);
    if (precalc && right == long.min)
        return long.min;

    if (m.op.front == '+')
        m.number = left + right;
    else if (m.op.front == '-')
        m.number = left - right;
    else if (m.op.front == '*')
        m.number = left * right;
    else if (m.op.front == '/')
        m.number = left / right;
    else
        assert(0);

    // writeln("m.number = ", m.number);

    m.knows = true;
    monkeys[name] = m;
    return m.number;
}

int main(string[] args)
{
    Monkey[string] monkeys;

    foreach (line; stdin.byLineCopy)
    {
        Monkey m;
        m.name = line[0..4];
        if (line[6].isDigit)
        {
            m.number = line[6..$].to!long;
            m.knows = true;
        }
        else
        {
            m.left = line[6..10];
            m.op = line[11..12];
            m.right = line[13..$];
        }

        monkeys[m.name] = m;
    }


    auto root = monkeys["root"];

    auto begin = 3_916_491_050_000; // just observed that "right" is constant, and "left" is close to linear. no idea why
    foreach (guess; begin..begin+100000)
    {
        auto md = monkeys.dup;
        md["humn"].number = guess;

        auto left = get(md, root.left);
        auto right = get(md, root.right);

        if (left == right)
        {
            guess.writeln;
            return 0;
        }
    }


    return 0;
}

%% 2022\day21\in.txt
gdnq: 2
snmj: lncs * jrrn
rcfv: 4
mcpm: 4
fvdp: 2
hldt: lcvn * bbbb
jzvz: hhgs + dpzm
vtww: 3
vjqg: 2
jtrj: hsmh * qfsv
gdbg: 10
sqdv: 2
jrfv: swzv * gnsj
vvwj: 9
vjdz: 2
lzbv: rsgt * jmzq
plng: ttjj / lqhz
szts: 2
zzpm: 8
jnjm: crlq + ldrh
qvrl: 2
ltrc: 3
rhsw: 1
gbsj: bhpj - qmqt
qsdd: 2
sfwh: sqbv - ftmm
pmvt: ltdp / vlwl
nzzn: grmr + hhdh
hjhv: cqzd + fblr
plbh: fmnv / gqcz
dtzr: nmnj + wqfn
hmsn: 3
fnsh: sdgj * cqlh
jtsw: 2
bvsg: tqhh * lsvq
vbsf: 5
hsqj: 1
hmwj: hhtq * nhzd
lbdf: pjfm * cghz
fcbn: rhmt * wgff
frhm: swqt + tztc
qlgt: pcqt - hwvf
dhdf: jgvq / sbls
rhfw: 2
qnfh: tcnh * jqdq
fjwf: 4
rqwr: 4
qmfm: mjhw + dwrd
dmfj: wgvf + jclc
wfpw: 4
pdbq: 2
dgfs: 4
qrts: 4
mhdc: dwpg * hzwc
humn: 3967
bshs: bdqm + grhp
vpmb: 2
mtbt: 3
gzwr: cvll * gvqq
vdlp: 2
hnbc: hczp + fbhm
rwnd: 4
dsvz: 19
ncqs: 4
wmzn: dtqf + ncsp
nrfn: 16
vflb: gqpt + mmjz
pwjv: 3
rdww: 2
chgz: 7
jwwj: wtgc * wvzp
rssn: 2
nscp: bgqr * mjqb
jhsd: 3
hjmz: 14
brfr: 3
dstd: dqcj * ffdq
nmgg: vvfm * gtbs
vpfl: 15
gzdz: 3
pwbt: qhps + bgbr
mzhc: qhpt * lfct
llfz: 2
sbsj: 3
dfhs: 5
cnwd: cwhf * cggl
swps: drvc + pllb
bvhn: lbqr + tdjw
wfdd: 4
rdwl: mrdt + gmfz
npqv: rwqz + nmzt
dnnm: sjsc * lwzr
gvpn: jdwp + vhmm
rztl: jfww * pbgb
rzft: zhrd - trtl
wvrc: 5
hggs: 2
vcrr: 12
nfgb: 2
nfvq: zdws * zhvb
dwrd: 10
lwsb: jlgf * nlgr
vmfl: gjrd * qptd
sdjs: 2
rhjq: 8
wspp: svtn + qqfq
pwbf: dzcc + qmsq
sbls: 2
dwhg: 7
jvbs: 3
bpgz: mgnt - gpdv
prfv: 5
bdqm: hvdf + jczv
ftfj: qwqf * pqgd
mndw: 3
vhhw: 2
rnml: tmgn * ttnt
jtbj: rcqm * vnql
hbnd: rrwv / gzls
sslh: 2
bqnt: mgqz * rjwq
hhzz: 2
gnwj: bgsh / cggh
rfvc: 5
tscm: gcfs + lzzg
bgdh: 3
dwfp: tfdj - jpjl
qgjf: 18
dwpg: 2
trzm: 8
qhpt: zlwz + pfcm
fmnv: ptmd * qzzz
rqbq: vdvz * fhzq
mgfn: gfst * thjj
zwjw: 1
cvtg: 4
tfnr: jdjn + hqlb
lbtr: nmgg * mnlb
tcnh: 4
hfsv: 7
wbhd: 2
lmnh: cgzf / bjrp
llfv: 1
mvfp: 6
cvhv: rcfn * gwst
bthh: 3
trnf: 3
tvwz: 2
ssds: psdq * rsmp
pdgt: 9
fmnm: 17
rjjl: 19
bgwm: 2
mjhw: 7
wrzv: htgs + cdlc
gpzp: 4
lrtm: ddfh + prbj
bbbb: 9
rrwv: srzl * psvr
thjj: 5
mpwp: jmqw - nzqh
wjfg: 14
zhrd: znfm * hrfs
dsmm: sdrf + vwzb
gpnf: lsbt * ngjn
jqdq: 7
tsgh: cgzq + pmbm
scqv: 4
pjjr: 8
wjzz: qcdr * zbbn
pccz: 5
csfq: 2
rrfn: llzw + mglh
mppf: trgf + sjqj
vlzg: 14
gzdn: 6
nvhl: qdtq * swps
djzp: 3
btnd: 2
njvd: 2
dnpd: sbcf / qznf
dpdw: vsnl - pwjv
mjbl: 10
wvbj: 2
hbwq: fznh + gdpn
bqvt: qbns / gdnq
dcjt: stnd + ljmm
mptv: cbsq + stss
hswb: 7
rmsr: 3
dmgv: 2
gtls: bdns / sqgm
ngjj: 3
hzmr: wlsq * qlgl
nhsh: chgz + njjg
qvcz: vmfl + wscq
blgw: 17
nrsp: 3
gdsz: 2
gsmv: 14
cqmq: ntsj * wfsb
chqg: 2
fpzf: qsdd * jmvs
tfsv: ngrl + ftlc
psdb: 2
fhrs: rrmg / vnfq
zvvm: vsfm * slwp
hhgs: cbbm * wvbj
tmhh: nvfs / prqg
rsgm: dcdj * zffw
znlr: 11
nhmr: tbmt / clqc
cpcs: 5
ffdq: 4
crzz: wjtr + dbgl
djfn: scqc * fqht
bbzg: rlnp * ncfj
rjwq: 5
tzlh: zrvd + dbhb
qrjh: nfsf / dmvc
gtzn: 8
dbhb: 9
wnmn: drft / nqcc
cnpp: jtbj / zzdp
bgdd: vpnv * tzmw
ffnz: wnch + zjrg
zjrg: tfhr * sqdv
wbzz: 2
bbsc: 8
cbsq: pwsj + schs
szdb: 9
mqtp: dtvq + djfn
tfzd: qmbs * gfhs
vnql: 2
fztg: zcpt * plqf
ltpv: qmcj / mwvq
cldh: 4
zljf: 2
bpng: 7
dtvq: twqw * zdlt
gtvg: 3
tsdf: 6
wtvn: 5
mvrm: 12
hcmg: 8
sjzz: bltv * wcnw
ncrd: 2
wcnw: 3
fdgz: 1
frqd: 2
wsvh: 3
rmmt: 4
ljcb: 4
pfcm: nmlf / vjdz
vhwt: nmvr * sfvh
zwjz: hwhg + tnbd
zdgh: crjn * gpbj
zqpg: 3
bpcz: ncpc * dhmb
ssnv: 2
mlgl: lvzh + zzjd
wmhp: zmzq * cwqh
tnrb: hpfr * nfvq
wvlt: dqmh - pfjh
cvmv: pscm * hphf
sgzt: 2
bvtr: 4
rfts: thnw * rpbn
nbmn: hgnd / spjb
hshr: 3
hsmh: mlnh + dwfz
njsj: cwfm * jjcm
pdmw: 3
gvlb: spcv + zfcv
lhbt: 2
ppwf: bjqg * svzb
tvgq: rwqb + tsgh
jgcd: 2
btgd: ltdn * dmvh
nmtl: 11
wwgj: bbzg + jzdr
qwzb: 1
swnt: vchd / jrfh
lcfq: llfc * gdsz
jqcb: jgdn + mhbt
hpfr: 2
zlvq: 3
vhsg: 8
qrlh: 3
hqcm: 8
dtps: 5
fzfb: 2
mpjw: zwch * hfsv
vnwb: fsrd + hldt
lftd: 17
fqmj: 2
fscv: 17
zffj: wtcg * lhbt
mrfv: nqql / prfv
dblz: mznw + dvqd
dzpl: bddr - rfvc
zbbn: 3
mhbt: 6
sgfl: 2
jczv: 12
lzzg: 4
qrdv: 3
bqvw: 4
cvpn: ntcv * brsn
nvrq: zvvm + hsvh
jgqp: fgtm - rrlr
nrgg: 2
sgrr: crsn * cgff
frrw: vlhb * nrsp
jdfp: qlbs * lvcz
zbsj: nhvv + pwbf
cwvb: jqcb + wnmn
zvlw: bpjq * lqrr
zdnm: swnt * zwjz
cprn: 20
gpbj: bzlb + tgbn
lzvj: vnjs / bgwm
hmlm: 5
qmcj: frfd - wndh
vpgp: 3
mgnt: 12
gbjz: 16
nnqz: plpf + zfjb
pvvn: 3
zvjr: nqpn * bztv
msjq: 2
pllb: 3
nnrq: jnjm + smmt
pqsf: 1
qrpg: 2
dwqq: qnfh * zhpz
mmlq: vqdr * pcwz
hwgf: wpdb * vqvj
dzjw: 7
gbzs: 2
nrtd: zlqj * cpcs
pjzr: 6
rbdt: 4
hfpr: 16
mgcs: plzr + hjmz
sstp: 12
tcmj: 5
bljf: mhdc / wjdj
dvwb: bbbc + frqm
dbgl: 1
rrsj: mnnw + vctg
lphr: tdwz * jsdz
tzvv: fqhj + hcqj
jqwb: rnbs + tswl
vnsp: bjjb * gtvg
jwjc: 3
zdjb: 3
vfsc: brdl * fvsz
lprf: qgvm - vlcp
rhtv: nvvs + prfq
rvhc: gsjw + dtgn
trwb: lfrz * hmwr
jclc: vflb + fpqg
vvpc: wspp * wzmr
wlrl: ltpv / nwzf
ftlc: vmrh + rjjl
mspq: rbrw * sbqh
chpd: jwjc + mhgt
ggbg: 3
mlhv: 4
chjt: qscm * gwjv
swqp: hpsn + svqp
qdcn: 2
wpsc: 3
hdtz: 7
wcln: dpqd * lzqs
dwws: 2
cbjq: dndq + nrgg
tvcr: 2
qnjc: lrwh + fjsn
plgn: wnls * mgfn
crhc: 4
jgdn: gcpt * rwsq
rpqs: hgss + ghrr
jlgf: njsj / tjwf
ltfh: 9
plpf: tmtw * dvpn
njjg: 4
wmbm: 3
dqcj: mnmb - ggwc
vbhg: 3
wdpj: pglm * cbjq
fcpn: 17
smmq: 2
ccrv: 2
mgqz: 5
plbr: 6
qfzq: ftfj * vzbp
wjcl: 3
rqff: 3
rhrs: dwbd * pwbt
lrmw: zftv / dtps
qnmm: 5
gfcr: 5
nnfm: 5
tfmd: cdtz * tnqz
nwvj: zghp + gtcm
twqw: vdth + tqjn
gvdf: 2
thwn: 18
zffw: jqwb + qtfr
dnhq: thbh * tdcn
jpjl: nshc * zlwg
dmvd: 5
djhb: ppwf / vhhw
wcrg: 5
zjzh: 2
rnvz: 4
jzbt: lrht + hsmm
mllr: wrjc * fbwl
nqwb: wmcb + bfvs
mbsm: 2
bjhb: dqrr + vmgp
wtgf: mfhb * vqpl
qsfc: gfnb + sdmd
jgwn: tnwd * rmlv
htgs: 19
jmbf: 3
qwpm: 5
zfcj: 16
grgn: wfvd + nrtn
rwpn: qwpj + nvhl
psdq: 4
qhps: 5
vtnn: lzhq + tbtp
bbtj: jsdc * gszn
zldh: hblg * fgfn
fnwd: bqvt * qljc
svmj: 3
jqrq: pdbc / bzcb
zzsl: 10
hmnw: 1
fmjf: hbwq * dszt
gfnc: 3
pscp: tpwq * gmjr
fdcl: zcjz * rjdb
wwrd: wtqh * hwdc
ncfj: 3
bhgz: mtvn * tzjv
gqpt: 9
mldg: nhhr + zrsl
zrsl: zshd + qztp
pjtg: rhcv - fwfv
ftdd: 7
ghfj: 2
djws: 4
smld: 3
szss: 2
qljc: 2
mcjp: dpms * pmvt
cghz: 3
nmvd: 15
brdl: ggtv + wczv
brsn: 7
tzwf: rrfn - hfpr
rbss: bqnl + psmp
nmnj: 5
fvrf: 11
qmcm: rpjd * ddsz
fslc: hdwd + frtm
cbtf: phzj / ghgj
pcgq: 5
ssng: dpdw * pnlg
fnvh: 15
rmbv: 2
ftmm: qcvj + ngjj
vqqq: 5
bvjb: wcnt - zhzr
wfdc: hggs * clsd
dlpt: 4
vmdc: 2
wtcz: glfd + hpgh
mbdd: 5
rnnd: 5
ntpq: wchh * zjzh
czdl: 2
ngrl: 15
fqpn: jgcd * wsnc
hqlb: lbvt + qbgt
sqlt: 3
sbsm: 2
lqjc: 3
ccbr: 5
mfrp: 2
nqcc: 2
hwhg: wtqt + hvqz
bwvv: lqgr / nllp
tnbl: fjzf + ngzh
grmr: nvrq + zfcj
rmct: nrtd + wtgf
nhcq: qfpz * rsgz
rpgq: 2
qjcb: cpgf * nmjw
gzls: 2
zrsq: srsn + qmft
fbbq: cjns - dwzv
phrg: 16
qwpj: hzmr - sllr
qcvj: wcfv * qrpg
fwwf: wfwj + ntmg
prfq: nrwj * bvtr
qlbs: 7
gzcr: grzd * wsbw
hzwc: cnwd + lbbs
zgcl: pdgt * dsmh
qptd: 5
psjs: nvsd + tfsv
vqdp: cqwj + bbpn
gvgj: zgfc + cdbb
fbwl: 2
mczl: 16
bqrp: 2
szzc: nnfm + bbnq
bfvs: spjt * qhns
gnlt: tcww + qlsp
rmlv: jndn - csfq
wfnj: 4
ddfh: gbsj / mvzh
cjns: fggz - qnsd
rgft: tvgq * rcct
prsm: 3
qpjc: 2
svvc: sfdq * dmnz
hvnn: 15
fblq: zhgn * sfdj
tssz: 3
zfpl: 7
trlc: bbsc * fbfh
tsrr: 7
gfnb: 3
cqlh: 7
grhp: tzsj + wwgj
gdpn: lqgw * fscv
tfhj: ccbr + jbfm
wcgv: cpcn + wtmn
vbsn: mmpp * hwgf
cgzf: 14
prpw: 3
zfzq: 3
tcgq: gnwj - rhms
grzd: 2
ldhv: fgct * tmbm
zscf: 20
cggh: 3
sgcz: 2
ccgh: 3
mbbj: fwwf * vpfl
hfcb: 3
phfl: 3
fvbd: rmmt * vhdd
cnvb: fvsf + fmfm
rcqm: 7
twvl: 2
qhjs: ldqg + qftt
lccz: bnct / tsft
zzpp: hbnd + sptb
zqmr: 3
qvvd: 5
jrzh: rsgm - jfcv
vbph: 2
dtgn: 6
svdf: 2
nzrv: vpps + ndmr
wbtl: gvjd + qrhr
crzr: 11
ljmm: tlrm * mrsn
hpsn: sjzz - pswc
tsft: 4
mqwj: pfjg * ggnc
qrlc: 4
lncs: 3
mrdt: 1
vwzb: 13
bbpn: fcpm + ghwf
hrfs: 2
jjdm: 14
pntp: 2
wtqt: gvgj * bqsj
jfgw: tvcr * lpvc
plzr: ctwj / frqt
vccq: lmgb + qblm
tdwz: hsqj + zzhh
rfhn: ghvv + pjzr
fpsn: pjtg * rwrz
zwwz: 2
grls: rjbl + wflw
mnlb: pnlj * smpn
blqd: chpd + jlps
hrjz: bpgz * bwvv
lndm: 2
vbqj: nzrv - qstc
tgbt: 2
jvfw: nljr - rgft
ctwj: tlvs + nvqf
tswp: 2
rjbl: pdjj + chjt
dpss: 5
nntd: 5
hsst: mggp / hvml
lhft: qwnb * zrsq
jgvq: fbbq + cwrj
zclh: 3
zvdq: 1
jbmq: tjnr + bgdh
srrz: fbrw / gddl
mnlz: 3
dfpr: zpvb + hqtr
jqvw: znsm * mhnh
hgtn: 2
wchh: 13
hlld: nchb * ndsr
wdjq: 2
cvwb: 11
vjnw: llvr * vzph
hppg: rsmb * dgjb
zmzq: 10
tccm: 5
vmrh: mmnh + wlzm
gjqs: 17
bqsj: 5
gwjv: 3
dlgr: wrpr + vlnn
bbmz: mgcs + gnhm
fqnm: rdjw + szgr
smpn: 3
cggl: 4
flgv: rvwf + hjmp
vdpl: 15
jmvs: 3
jhzq: 11
zzcw: 2
wlgv: 3
ntcr: 5
zpvb: fgsj * dzvd
jjcm: qbtj + cnvb
brrb: vmdr * wdjq
jfww: 3
spfj: wfdc + plbr
qbtj: 12
psdv: 2
dlmg: 2
whwd: vszs + rnnd
pdvr: 2
hdlp: 3
tmjd: 3
hmgp: jgfj * pzjg
prbj: 2
zcdd: vbqj * mcpm
vdtj: tfzd * rwcb
cpcn: 1
hqgv: vcrc + sqct
nbmf: tvtn + bbhq
nhhm: vrns * hqgv
pqgd: nljt + fjwf
dwpp: wnbc - vctq
rsrw: 3
qncw: wcmv + plbh
rsmp: lgpp * sqlt
hdph: jjdz + wrzv
rzbc: zgcl + tvvg
wdlt: 5
jgfj: 3
pgwv: gscv * qnfr
jfzt: 4
dltm: 2
cmfn: 18
tjnr: 3
ltrl: 2
mhgt: 5
zgnz: srrz - cgtq
jbfm: gpnf + ppzz
rtbz: dntq + wlgv
tdcn: jgvr * pvvn
trtl: 14
gsjw: qrts + fbbb
nfwb: nrnv + zzcw
vdqg: wcrg * qbpf
clsd: mtbt * sbsj
mwvq: 2
fdmd: 15
qlwj: 5
cqzd: 16
mlfj: wbzz * nfwb
gvlq: 2
fbrw: zffj + vfsc
bqps: 2
mfnh: 4
ncts: 2
vvqj: bqvw * gtch
fqlw: vvdb + lprf
qhns: 2
qnzf: 3
tslr: 4
rhms: zcjf + sbjw
hshd: tfhj - bncq
vdth: 11
gpdv: 1
sdzq: gbcb + mmbl
mnmb: zcnc / zmqh
mbmg: gtzn * gwfs
nllp: 2
rhrl: 6
qftt: 13
ggtv: 8
pmwb: bwhj + bgdd
fspf: psfs + gbhq
twdl: 18
lnrp: cczl * nfgb
lqzb: 3
rljs: 3
tzmw: 17
gwst: dhww - dstd
bzzc: plgn + sfwh
jqrd: drgr * wdlt
cwzn: ffqf * nhsh
cgzq: 3
wtmn: fztg * sqrm
bjrp: 2
vqpl: 3
csvd: 12
fptl: jdfp * bvjr
zcls: jflc * lqjc
rchp: 3
nvfp: flfr + vzrz
ncpc: 4
bgcb: pgwv / jnpz
hgss: 5
jdqm: qhjs + pscp
zwdf: wdpp + bzzc
ncft: 1
nvzd: 2
gdfb: 5
cdlc: hmlm * rgrj
qhhr: 3
spjt: 5
bwlv: 6
vphj: tzlh + nsrq
ncls: 4
fgtm: jdcb + rwdh
nbcz: nscp + lnnm
cbvh: lbdf + hpdc
lfct: 2
dggd: 3
dhdn: ljrp * djtc
nljr: lmmr * bcmp
wfwj: ctbd * rssn
pcmb: zrqg * rqff
ltdn: 7
dntq: pdvr * rnvz
wlrb: 2
pszh: 4
rjbw: psbn + hmnw
sdlt: cprn + cbtf
zwtb: fbpd - wsbp
lphw: sbsm * rhrs
fblr: 11
rrlr: 1
bvjr: 5
wdtz: cjvm - bshs
chwv: 3
vcpd: 5
mlnh: 2
bzcb: 5
wtcg: cjtb + gtls
mrsn: 2
lqgw: rvrs * zbpq
tzsj: mspq - zscf
tfcs: 6
qdrc: 3
pwpg: 5
sbjw: qvvd * pmwb
lzbh: 3
tpzh: 3
sqrw: 5
lcqs: 2
dgjb: 4
lbmr: fqzl * rcsv
jgwf: qhcs * dpss
vqtm: 16
vlgg: 5
vnjs: qdmp * hblw
wlzm: 1
pcjf: 4
dzvd: 7
pwqw: wdpj + rhtv
wbtv: 4
zdgj: 3
qztp: mhmz * qncg
qznf: 2
wlsq: 2
lnnt: fdgz + rjbw
hjmp: 14
gpcc: dtzr + rbss
fbql: 12
cgmw: cvqs + vlgg
ntbv: 2
qdmp: 12
dwbd: 5
crlq: 2
hmcd: 19
ncsp: btvq + rtss
gzfn: rqfs * lndm
hwtf: 3
bjjb: 5
ttvd: dmqf + wjjp
vnsv: sfsc * cnpp
dqrr: wbnz + vhwq
hsdg: bmbv * rsrw
tllz: vdpl + tlvn
gzrh: tzwf - fwdd
hsvh: 5
hbjn: 3
nfsf: lwmr - drtr
ltzq: tzvv * zzsl
hsmm: 10
dvpn: 2
wptg: fqjn + zlzw
hvgf: vjnw + gzwr
rbrw: lfzw + qbms
hqtf: pjjr + zcls
zlwg: gcnv + wwrd
jdjn: nzfr * fprf
wcrp: 2
hmfs: nrqj - jfgw
nwzt: 3
rvtr: qfzq - hlld
tqhh: 2
qstn: 7
vqzw: cdwv + ftdd
hjbs: wlnq * vdnq
hdsd: znvl * qstn
ffjb: wwrr * bpcz
hpmn: 3
srtz: 3
cdtz: ftnn * mvhl
clbb: nnrq + wldc
mczg: 13
llfc: nwvj + zbsj
stss: vjqg * qpsc
vtrs: lphr / zztm
csrr: sbwm + rpgq
dgfg: 13
ndps: mbbg + mbnh
trsj: 3
nsct: msjq * wlvj
llmn: rmct * dhqt
svqp: 2
tnng: 10
hqtr: 1
nqgt: bcmm * dlmg
hdwl: jrzh - swch
lbbs: hrjz + tzpz
prvp: 14
cnrh: tgbt * rvhc
zcjr: wccz + szdb
dvqd: czlg * gtmm
dgvm: tcbh * vfcs
tcbh: 8
jwsj: 2
jndn: 9
dvlq: 7
thdl: dzqw + bfcn
tqgg: 8
dmvh: 4
gmjr: 14
rgmb: 4
shrw: 2
ndpp: 4
lwtm: pvms * dvwb
nqpn: 4
psvs: lddd * lggw
tlvn: 8
znsm: 13
dwgf: twcw + fpsn
dlnj: ljps * hdlp
qzzz: 5
wwrr: tzbv * hpmh
rwdh: 2
stnd: qghb + qtrb
dcdj: 3
ljlb: jtgd * bvhn
bztv: wpsc * rdwl
snwz: 2
tzbv: 2
tnms: twtf * nntd
gwfs: 4
wdlm: 2
dbcm: vbzw * jgrp
bgqr: gcns + nhhm
nrqj: zlvq * vttl
jmcr: gfjr + fptl
llvr: djvf + grls
qghb: chwv * tnwr
ntmg: wcgv * lrrq
vhdd: cvmv / sqvv
ghzd: 5
pfjh: twdl + vdqg
qjzz: mlgc * gzrh
zfnp: 2
qtqw: sscg * wqrh
fswd: lzbv / czbf
tdqj: bmvb * wtbw
pnvt: 4
wfsb: 5
hljt: 6
gcfs: 3
sqvv: 7
nbgw: 2
lzqs: 2
bcmm: gzzh + twhl
fmcv: hmgr + rwpn
pqjg: 2
vlnd: 2
cshc: qcgq * szss
lggw: prjf * dwws
fzjq: 2
gtbs: 3
phzj: bthh * jjdm
dszt: swht / qdtp
jtlm: rstr + gdfb
jjnh: jqrq - vtrs
fgct: 2
nnfd: vfzp - cpqj
zzhn: hgdc + dgfg
trfg: 5
swch: vcpd + zcjr
ppdv: 4
nljt: 5
tnbd: 18
drtr: rcvq + rjmj
gcnv: jftw - cnrh
wmcb: 20
wpdb: 3
sctz: mcdt + wbtv
sgmg: 1
jzdr: lhwf / nhvb
fzsh: hvnn - pncp
lfhw: 2
vlnn: fwzl * zwhj
zshd: 5
clqc: 2
bnbg: 2
zlqg: mrgs + nbcz
rqfs: 7
cmmw: 2
vpgl: vgdq * jhzq
psfs: 3
bpdb: 9
gfhs: dgvm + mdmn
dmvc: 3
pgct: 4
lmnb: 5
jhmj: 2
smdj: 6
nhzd: qtqw + sfll
scqc: 5
psmw: tftz + swwg
vfzp: vjzq + cqwr
vpwp: 4
bjqg: 2
jjdz: mvnw * jqvw
tljc: fhrs + rmqn
lqrr: 2
spsq: 6
znvl: 3
jhmh: 6
sgmc: wvtg + qmcm
nhvb: 5
pscm: 11
vbzw: 3
mmbl: fmjb / sslh
jwhh: mjbl + hccf
lwml: gjvg * zmwh
gvqq: 4
jpqq: 9
nlcj: 20
vmnh: 2
pcqt: lvtf + pwbq
rzdf: 2
shnq: gdmt * qncw
pzjg: 5
wtgj: 1
tvvg: 4
qhsb: 2
tgbn: rhjq + qdrc
cgvl: 3
gzjv: 17
vcjc: 9
qfbg: 4
dndq: 5
ljqt: jzvz + svdf
hmwr: 5
vltw: vqqq * lwmb
wgrv: 4
zhhd: thwn + pjnn
hflv: 2
sscg: 3
tggm: gjqs * bvvs
tzpz: rjcz * pnvt
fznh: nmtl + gvjm
msfp: 20
swqt: 2
wnls: 5
bqnl: 6
njnf: fzrm - tpzh
rvrs: 2
fwqz: gpzp + vgfw
hbcr: lwnq + vhrg
vpdd: 3
lvvg: 3
dhmb: 2
swwg: jqzj * nqgt
zzjd: 6
ghgj: 2
cdwv: pwjl + nqwb
fwzl: 15
srcl: bfwc * cwhp
bnsf: 2
zhpz: 10
czqw: zlrw + bmqg
mjqb: 2
vsnl: vjqs + gdbg
fgnh: rqwr * llfz
wjtr: ndpp * sbhl
nczq: bnzc * nlqc
hvnq: 4
tdjw: pfjq * ccrv
bgsh: lvnc + tnms
rbsp: rcjq / nrfd
nqql: sdjv + vrvs
mpzr: 4
chbs: nhmr * dltm
dmch: 4
zdws: 2
sphq: tljc + jgwf
jdcb: rchp + nhhn
hczp: 9
fmmc: 5
fgjp: sstp + zwsv
zhwc: 1
rsgt: wmtq * zqmr
wmtq: 6
zwjm: 2
vctg: csst * ljlb
rdfg: nwtl - hgqw
zfvl: qhhr * qjcb
vcgr: lwml - zvdq
ghvv: 4
bwhj: 9
gjdn: jwgw + cpct
lbqr: qtmv / ccgh
bltv: wmbm * vbwh
jjlr: swqp * wdzs
mbbg: mlhv * nmfb
lnjr: dnhz - cvtg
lsrf: 5
sqct: mpjw + fqrn
ctbd: 8
fbpd: 14
hnsf: 2
nlsg: frrw + fmnm
ltdp: mppr * cvwp
jlps: gjdn * drnb
cpgf: 2
vpnr: rzft + cbld
nnnv: lsqf * qnmm
wcnt: 11
zftv: dhdf - btwp
vnfq: 7
jsbq: hgtn * hvgf
zghp: 1
qpsc: zwjw + lmnb
bhpj: jqmv + rwzg
cwfm: 2
vlhb: 5
plqf: 2
qbns: wdlm * wmzn
psmp: 15
nchb: rczr + dszz
ntwj: 3
flfr: 4
dzcc: mmsz * qdnm
pswc: smmq * ntcr
jjpf: rdww + qwpm
cfdt: 4
jbcj: dsdm / mvhr
rgrj: 14
jwtg: szzc * cgmw
hvcb: 2
gjvz: sgmg + grtf
zwch: 2
nwcm: 3
bgbr: cmmw * fsls
vjwb: rwnd * zfzq
pjrt: 2
mhmz: 2
fsls: ldhv / shwn
tfdj: qrlh * fslc
drgr: 2
qtrb: sjlq + qrdv
hccf: vpwp + fqpn
wgqr: 3
tnwd: 3
grhr: 2
jdwp: 3
gnnq: dsmm + rrsj
wscq: ljcb * wfnj
sqbv: crzz * wfpw
wmwn: 2
tmbm: zldr / nwcm
hwvb: qrjh - mbbj
bfsl: 3
cdqn: 3
clcf: 17
bhcm: qrjl + jqpb
lbvz: 1
bbnq: 2
zztm: 4
nzfr: brnq / mnvb
vrns: 2
vjqs: trzm + mbmg
hhtr: hmfs + zfvl
qlsp: sgzt * cwzn
mtwb: jbcj + vcgr
vzbp: lrmw + ssds
fvsf: 1
cbvj: 6
snrb: 2
tldf: 4
ndlt: 4
cwrq: 3
hblg: 2
nbnw: 6
rwsq: 17
szdh: 2
nlgr: 2
jvll: wmhp / brfr
cvqs: 1
hvml: 8
zjlv: 15
fbbb: 4
srzl: 2
nglw: 3
vzrd: bgfd * msfp
mglh: zqpg * fzsh
rwqz: 5
fhdq: 2
drvc: 6
ljrp: wlrl + psjs
ztqc: 5
fcpm: hhpp + bqnt
bzhg: trnf * mfrp
zzhh: hvnq + gvvg
wqrh: lvvf + bgtp
lgsq: jgqp * ltrc
bmcm: 2
tqjn: 2
fbfh: zzpp / wfrn
zggm: 2
qmbs: 7
dttw: vtnn + dfms
dzqw: cnzt + dmfj
czfb: jwsj * gbcl
pjfm: 3
zzbg: 8
hwvf: 4
lrrg: pwqw + gwpl
cdbz: 6
pjnn: npqv * sqtf
dqmh: lrrg / mmlq
root: lccz + pttp
nmjw: 3
wplc: qwzb + jqrd
zlwz: ghzw * sgfl
zhzr: 3
pwbq: smld * lvpd
vvfm: 3
vbwh: 5
vfdn: 11
slwp: fztb + mcfn
vpps: 1
qclr: 2
vzsb: wvrc * bvbs
hgdc: tnbl / bzzj
gwpl: jjnh * nnjv
rdnt: 5
jsdz: qclr * ffhj
jnmq: 4
tjwf: 2
hgqw: rvcv * lszt
ctwh: jgwn * sqpb
qwqf: 2
mnnw: qbrg * hjbs
lclm: mlgl + hmgp
btvq: 5
dpvw: 3
ffqf: 11
rpjd: rzbc + wtgj
sdmd: cqnp * hqcm
tbmt: snwz * qsfc
tmgn: fqnm * tcgv
lwzr: ltfh + hndh
gzzh: 19
lnsr: 3
tftz: qzff * ngnl
rnbs: grgn / fpjw
wtbw: bwlv + llfv
qnfr: jfzt + qnzf
sgvt: bjhb - nnnv
gcns: gvpn + vccq
vtvt: gzdz * psdv
gfst: pfts + dnhl
qcgq: 17
szcj: ntwj * bnwr
nrfd: 2
hvdf: 8
qcdr: 2
vjzq: dblz / wsfs
mvlm: dfpr * hrvp
ngvj: 6
bgln: rnml - phvm
lwmr: chqg * mndp
nhhr: rfts * gfpt
gtmm: mdnm * gbzs
lpqv: 6
wqmf: cpjl - rzfc
qfjq: nvzd * ztmp
bfcl: 2
gqcz: 2
jqpb: dsjp + fgjp
pvsr: zdnm * zwdf
hzrr: pcmb - pmcd
svzb: zvlw + fcpn
gscv: 5
bmbv: 2
rrgf: qldj - fcbn
smmh: 5
rpbn: 3
rppj: tggm * vnwb
wvzp: 20
hqjn: qrgh + tnng
qfsv: 2
lvzh: 1
nbwg: rmsc * ncrd
sfjw: pvsn + spfj
sswm: 10
twtf: sdsp + lnrp
bmvb: vcjc + cqmq
crjn: 2
rllh: 2
svtn: pcgq * gfcr
zfcv: 3
svsv: 3
vzph: 3
rsmb: vzsb - zrzv
dhww: mppf * dmph
jmzq: 6
vdlq: hnsf * jqjd
ggqm: nczq - cbvj
pcpc: ftvc + ljqt
mfcq: nrfn * pcfn
lrbd: 1
pnsd: jzbt * ghfj
zmwh: 19
vmdr: 13
lmmr: blsd + wcln
grpt: 9
qbpf: 12
nbbb: thdl - plfc
qbms: 13
wsnv: vdfv + dlcb
hbtg: 5
bbbc: 15
tlvj: hbtg + wbfq
wzmr: 2
lqgr: gjvz * qhsb
jvgz: vjps + srrq
jqdv: rrgf / dcwt
rcjq: dwqq + ljjz
cqnp: 5
pdbc: lhft - hdwl
wczv: 3
jcjj: 9
pcfn: 2
zcpt: 3
wrpr: sdlt + wgwh
djtc: 5
wgvf: 1
rltt: 5
hblw: wfwp * frqd
gbcb: bwrw * ttjs
ccpf: 6
hhjs: vltw + cmfn
qfwn: vfdn + rhfw
pvzw: qpzc + qgjf
bvvs: 2
ftnn: 7
pvsq: zcdd - cdmt
qjcw: ppfh + qjzz
cvwp: lbtr + mpcr
gwlr: 2
rzfc: 5
qqfn: mjfp + hcbt
zrvd: pwbc * sgvt
vzrz: pfhh + qtmq
bmqg: 4
fqzl: rjnj + mczl
lhwf: rbsp + lzvj
wfrn: 3
hjrc: hbjn * njnf
tqgh: ltzq + cbtg
bpwj: zffn + ntpq
lfzw: 2
hphf: 7
zcjf: zfgc + chbs
vszs: 4
rcfn: 2
wlgp: hqjn * pwpg
vpnv: 2
qljm: nvgw + hmwj
fgsj: 4
zrqg: fnvs + vdlq
bfwc: 2
qwnb: 2
trgf: lmnh * vjbm
sdgj: 3
shwn: 4
jghd: bqps * bpwj
hbtv: 19
cwhp: mvfp * qvrl
lvnc: qjcw / mgbm
hgnd: mqtp * vdnr
bgfd: 4
lsbt: 2
wndh: 1
hlnd: 2
jmqw: tlvj * tsrr
lvvf: prsm * vtww
fbhf: 4
lrrq: 3
tvtn: bhjz - nzdn
mcfn: 5
pfhh: 6
nbfh: tnrb + wrtg
dpzm: 5
bpjq: mfcq + hsst
sltd: 2
qqmz: 2
wgff: 3
cwmw: 11
shcw: hsdg * hjdm
wbfq: 2
vqvj: 3
lgpp: 17
znrt: 4
gwwt: vcrr * plpn
zlrw: wqmf * ngvj
wgtn: qcvv * hdtz
pfjq: lpgl - svwh
vlwl: 3
drnb: 16
fjsn: 3
sdrf: sltd * vnsp
znhm: gvlb + jtrj
sqrm: 2
dwzv: 11
fwfv: 5
cczl: dttw - lmrt
qhvd: ncls + frhm
jqzj: 2
cjvm: mpzr * sdzq
gdmt: 4
gvjm: lwsb * cdqn
gsjg: nbgw * wptg
cbtg: bpdb * qgqw
qdtq: 14
sjpc: dhdn * zwjm
vgdq: 5
lfrz: 2
vctq: dlnj * lvvg
gvjd: 2
wcmv: jrcq / lcqs
zzdp: 2
sfqm: 9
rwqb: bswq - cspr
cbbm: 3
ppzv: fndh + zvjr
fgfn: 3
fqhj: 1
fdtj: wzdm + shnq
mclw: 3
pnlg: 2
fggz: vqtm * nhcq
wccz: jtsw * rpqs
wvdl: tcmj * tjgm
mzmd: 5
ngnl: bfsl * tscm
rghm: 3
cshq: 3
zcjz: rhsw + tsdf
jgrp: 2
qtpb: hshd + spgr
nmzt: 2
ngjn: gzcr + qrls
spvr: ltrl * dpvw
gtwb: 14
pwgq: 3
npdg: 5
scmm: jmcr * pccz
hhpt: jzcn * jflg
nwzf: 2
rcsv: 8
ddsz: rqss - gnnq
mcdt: 15
jgvr: 2
vhmm: 10
qhcs: srtz + dlmm
fztb: 5
zmqh: 3
fsrd: nsct - svsv
tcmp: 1
dhqt: rbjh + svvc
prjf: cnbp / mvlp
fvsz: pttn / wmjh
dfbw: 3
cspr: fdcl / dzjw
prqg: 2
gtfb: 2
zrzv: 4
nrtn: zltm + fmcv
sjlq: 7
hnjc: hlnd * wplc
cqwr: btgd + dsvz
lpvc: 5
lwmb: shph * ffwh
fnss: lqzb * pqvd
ftvc: gtwb + hppg
tvjp: 2
rlpc: 3
stls: ppbp * scmm
zhgn: trwb + dfnj
sbqh: 4
mdrs: hswb + zzwt
rfbt: qnlp + fnvh
dnhl: 2
vdvz: 5
bvbs: 3
nqwd: 2
qmft: pjrt * zdgh
gfpt: vmdc * jhsd
sjsc: 8
qdtp: 2
qrls: 1
wfwp: 14
ppzz: rptp + fcqb
rstr: 18
vfcs: 4
schs: 4
mtvn: 6
smmt: qgcd / vbph
sdjv: fgnh * jclb
ljjz: zwwz * mvlm
thbh: 3
lddd: 5
prfz: ndfs + zmzr
qscm: 2
bnzc: 3
lmrt: gsjg / szdh
cpbz: hbcr * snrb
gwnf: 2
sprp: gnrf * wgqr
hdwd: wtpc / snrp
hbqq: 4
sbhl: 7
bqtj: nzzn + fvbd
tpwq: 2
fmfm: 10
bgtp: 2
jbbj: 1
qtfr: jpqq * mnlz
brhd: wgzq - mlfj
sfdj: 7
ttnt: ncft + nbnw
wsbp: 3
rhmt: pvfc * bmcm
vcrc: flph + ffjb
mbnh: 3
wvtg: jvgz * jwwj
wjdj: 2
tswl: drjz * gsmv
gnzs: 2
pjcq: vvpc * znlr
gbhq: dggd * plng
ldrh: 8
jrfh: 2
tcww: dcjt * qpjc
nvsd: 20
dfnj: djzp * sdlp
nrnv: wvdl - tcmp
bjnl: 4
qdnm: tvwz * fwqz
mmnh: 6
pppd: bprj - bjnl
gcpt: 3
pncp: 4
vbjf: rqdf * hpng
zmbf: 3
wlnq: 3
dlcb: vqzw + crzr
jtgd: 3
cjtb: rbtg * nvfp
rjmj: fbql + mvrm
nmbl: 4
ldjp: fdtj / qcqt
srrq: nbwg + gnlt
mpcr: sldj + zldh
pgqd: lmbt * nwzt
swht: qlgt * gpbb
ttjj: hnfs * bnbg
brnq: zdgj * sphq
pvfc: 5
mgbm: 2
lrwh: ggqm * jmbf
fmjb: cjjl + sjpc
qnsd: pzrz + hnjc
gbcl: 7
fhzg: 3
wdzs: 2
gddl: 3
dtqf: dtgd * pszh
hhpp: lpqv * jcjj
zbpq: 3
twcw: vlzg * pgqd
rznq: 2
sptb: dssg + mndw
vhwq: svmj * bsfp
gtcm: hmcd * zljf
vqdr: 3
gfpw: 3
lbqt: lzbh * zfnp
ghzw: 3
pdjj: 1
pnlj: bsrp * rmbv
rfwq: 1
lbvt: vpnr + lbvz
qnlp: grpt + bfjw
phvm: dnpd + fpvv
bpjh: cldr * zdjb
wlbl: wtcz * czdl
cpjl: tldf * rbdt
tnqz: 2
spcv: 5
lvpd: 3
qrhr: 5
hwdc: npzr * cwmw
mvnw: 2
nsrq: tmhh * mrpj
wzdm: cbvh * jhmj
pwjl: mqwj + nrjg
mmjz: 14
jzcn: 3
crsn: pfrv / fzfb
zfjb: jjpf + rdnt
njdc: dmgv * zgnz
vgrt: fmjf + rppj
qbsm: wdtz / zclh
jsdc: 13
sqgm: 3
qfpz: pqsf + wjzz
nlqc: 7
frfd: rdmp - rfdf
srsn: trsj * tcgq
hpmh: 4
rfmm: 6
jrrn: 3
wdpp: dwpp * wjpj
gszn: 2
cdbb: lrss * fbhf
cnbp: vphj - sdrc
drft: ssnv * pppd
ltbn: 13
lqhz: 2
rmqn: shrw * rcfv
qlgl: qfwn * twvl
jwgw: wvlt / zmbf
fqvl: nwrm / ncts
pttn: flgv * rznq
cldr: 2
mrgs: mldg * cvwb
czlg: 4
sqtf: 5
wrjc: 5
qtmv: trpm * fnss
nvqf: lwtm + jtlm
qldj: wbhd * blqd
bcmb: 5
gnhm: 6
swzv: 3
jqjd: 3
srtt: 7
sfdq: ssng - zcfv
rwll: wbtl + rfhn
lvcz: 5
dsjp: 16
bzlb: 2
flph: bvjb + nmbl
rjcz: 8
nzdn: hcmg * cgvl
mdmn: cnjt + lmhv
pvsn: lwwm + ppdv
dlmm: 4
zfgc: 3
sbwm: 5
lszt: csrr * dhnq
lmhv: nbmf / fhzg
nshc: 5
rcvq: hbtv * pvsq
ffwh: 4
nwld: fvdp * wfdd
vjps: bqgh * mjtl
bfjw: 13
wsnc: 9
mdnm: 4
dssg: 4
qrjl: cfdt * srtt
jghp: zwtb * prpw
sldj: 5
czbf: 4
lrht: 9
qbgt: 3
blsd: nnfd * hqtf
fqrn: 11
rwcb: psdb * bgln
dtgd: 2
jfcb: 1
qgvm: tcmr * qqfn
ngjq: 17
sdrc: dzpl * qmfm
lsqf: 12
cwhf: wjfg / qltp
vrvs: wgtn + nnqz
qtmq: 1
pbgb: 7
cqwj: zhhd + fnsh
qltp: 2
nvfs: cnzm * bqrp
zmzr: 4
rczr: nwld + bpjh
blsq: 12
bzzj: 3
spjb: 5
cgff: 2
jhzr: rjfj + bbtj
dmph: dwgf * sgmc
gvvg: zzpm - jfcb
cvdw: 5
bphz: vvqj + fhdq
tslj: sswm + znhm
fprf: 3
snrp: 4
pttp: rdfg * pvsr
hpgh: hzrr * ztqc
qljt: hhtr * dlqh
lpgl: lgsq + wjmh
rvwf: 3
hvqz: gwlr * gzfn
fpvv: wjcl * qlwj
sbcf: fzjq * bljf
ghrr: dbjf + zhwc
vdfv: dnnm + hjrc
hpdc: 4
bqgh: sfqm * rlpc
ntsj: 14
tmtw: 9
mhnh: 3
hmgr: fqvl / cshq
dwfz: mclw * tssz
zwsv: vnsv - vhsg
mppr: 3
wsbw: 3
fqht: pdmw + ncqs
lmgb: lclm * ptgf
vttl: 11
ghwf: vztv * gtfb
jplg: dnth * ltbn
dpms: 2
cpct: pwgq * nbbb
qzff: 5
vmgp: snsz + nmvd
dpqd: zqvj + trlc
znfm: hljt + rwll
cbld: ndps + bjhw
sllr: 9
zpws: fblq + wsnv
llzw: ttvd * zvbl
gfjr: mcjp * hfcb
rhcv: crhc * cdbz
mzrl: cwvb / qfjq
hmmm: 1
zlqj: tfmd + bgtl
rtss: 16
jfcv: rttl / rltt
qgcd: bphz * nqwd
twms: 2
dmnz: 3
nmlf: dvlq + zfpl
bwrw: 3
rhdg: 2
plfc: dmch * rmsr
pfts: 4
mfhb: fwhn * cldh
pvms: 2
vjbm: llmn + qljm
wcfv: zzbg - szts
wmnf: 2
hjdm: 3
rptp: dwhg + dgst
rdjw: bfcl * qhvd
hrvp: 13
rfdf: hvjz * fmmc
mgmt: pdbq * ppzv
rsgz: 3
cnzt: whwd + hvcv
lvtf: 4
ttjs: cvdw + jghd
sfll: lphw + jvbs
frtm: vbsn * vvwj
tjgm: 2
rbjh: mtwb - srcl
vrtt: 7
qcqt: 2
dnth: 2
gtch: 5
rjdb: 7
szgr: gpcc / scqv
wtpc: jqdv - vqdp
fzrm: fvrf * tswp
bswq: lrgn * shmp
vgfw: hmsn + tslr
qvzz: nlcj / fqmj
sfsc: wgrv + nglw
shmp: 13
twhl: 4
nhvv: rhgn + jbmq
csst: 5
qrgh: 3
ggwc: pjcq - fqlw
mrpj: 2
rqdf: 15
vztv: 14
jclb: 13
rlnp: qqmz * dfhs
dsdm: ldjp + pcpc
zwhj: 5
fcqb: nlsg / qdcn
sfvh: 7
vdnq: 2
prbw: 2
fbhm: 4
snsz: djhb - hrhj
hcbt: 10
qgqw: gfpw + rgmb
wjjp: 1
zltm: sgrr / mmhj
qpzc: sfjw + fnsb
mznw: pqjg * qfbg
frqt: 2
rmsc: hhpt + jvll
fjzf: 2
wfvd: cpbz * prfz
vmqv: 5
bbhq: rtbz + czfb
vhrg: 1
tlvs: ghzd * wtvn
qqfq: gprj * ntbv
zcfv: 5
pmcd: 2
rhgn: cvpn + shcw
dlqh: 4
fwdd: 9
bprj: hpmn * wlgp
rrmg: ctwh / lbqt
ndsr: 5
hplt: mllr - rghm
mmsz: 2
pglm: 13
nnjv: 3
pqvd: 3
hvjz: gvdf + ndlt
lsnc: 14
ljps: 3
tcgv: 3
zhvb: 11
dszz: 17
ppfh: tfnr * mpvb
vglc: 6
mpvb: 2
dnhr: 7
wjmh: 4
gprj: 3
hndh: 14
mmhj: 2
pwsj: 9
ggnc: 3
zlzw: 1
psvr: lnnt + fnwd
btwp: jsbq - cshc
bjhw: ggbg * bzhg
pmbm: dnhr * lnsr
frqm: 8
svwh: gbjz / sgcz
dsmh: 2
pfjg: 2
rqss: jghp * hdph
jchm: 2
hhdh: 2
hjjl: lnjr + sqrw
dfms: 4
tzjv: qrlc * rllh
rwrz: plfl + zjlv
nmfb: 4
hcqj: dfbw * dlpt
rtph: tvjp * vrtt
jnpz: 5
gjrd: 17
qbrg: vqqn + rfwq
cdmt: gnzs + fdmd
jflg: smdj + gzjv
hhpq: vjwb * grhr
bcmp: 2
vlcp: mzrl + lftd
bbhj: wmwn * hshr
shph: 2
zffn: zgfj / mbdd
grtf: 6
wsfs: 2
nmvr: 4
qblm: npdg * hvcb
bgtl: 15
plfl: 4
pwbc: 2
lrss: sdjs + vmqv
vvdb: fvlc * wcms
nrjg: jbbj + vtvt
gnsj: 2
qcqf: mgmt + lbmr
nwrm: qnjc * hdsd
pzrz: vpdd * fswd
cpqj: dnhq - djws
wldc: vhwt + brhd
ptmd: jhmh * gvlq
lmbt: 3
cnzm: jwtg + jhzr
wnbc: zzhn * rhdg
bnwr: vbjf + pnsd
rvcv: qcqf + jvfw
rwzg: 13
wgwh: hjhv + sctz
lsvq: 5
hvcv: fpzf * mfnh
ndfs: 2
trpm: jplg / rzps
tztc: 5
wcms: jdqm - wsvh
sdsp: 12
ppbp: 2
ldqg: 5
zvbl: 3
lnnm: rljs * bqtj
zgfc: 1
hhtq: szcj + vzrd
tnwr: blgw + btnd
nzqh: znrt + hwtf
bncq: 2
mjfp: 13
mnvb: 3
nhhn: bcmb + wcrp
lmdh: spsq * bbhj
wrtg: 3
fwhn: 4
wjvr: 3
nwtl: zlqg * vgrt
lwnq: 5
vdnr: qtpb + plhg
wtqh: 2
gmfh: spvr * vpgp
lcvn: 2
wgzq: dlgr + qvcz
hrhj: czqw - gmfh
fndh: mdrs + mzhc
bddr: jwhh / vlnd
lzhq: phrg + vpgl
lsdn: clcf * wlrb
qcvv: 13
wbnz: lsrf * hplt
mjtl: tmjd + mczg
jflc: 5
bdns: rvtr + jjlr
fpqg: blsq + lrbd
bnct: cvhv + wlbl
qmsq: 7
lwwm: 9
gmfz: vbsf * vpmb
mvhr: 2
mvlp: 2
bhjz: lmdh + ffnz
smtb: 1
dhnq: rqbq + hhjs
spgr: cwrq + tccm
thnw: 2
mvhl: 2
djvf: 5
lrgn: 2
plvs: 5
tlrm: rzdf * dgfs
fvlc: 2
rdmp: ngjq * bgcb
nrwj: 3
jqmv: hjjl * pntp
vsfm: 4
rttl: hcbw + bhcm
hcbw: mpwp * hhpq
vchd: vdlp * lrtm
zgfj: nbfh * plvs
dbjf: 7
pcwz: 3
npzr: 5
dcwt: 2
fqjn: 18
ffhj: lcfq / wmnf
zcnc: njdc + tdqj
sqpb: csvd * pgct
gjvg: 2
qmqt: 18
mmpp: 7
glfd: dbcm * prvp
wmjh: 2
cwqh: pcjf * rhrl
ngzh: bhgz + tslj
ntcv: 7
cgtq: cfhc - hbqq
mndp: qbsm + zpbd
rvsn: clbb + smtb
cnjt: 1
wqfn: 2
zpbd: tqgh + zpws
mvzh: nzrh - hmmm
qncg: 17
bfcn: gwwt / jnmq
nvvs: 11
sjqj: vdtj - stls
tcmr: rtph / prbw
bsfp: 10
wlvj: fspf / tfcs
cwrj: hwvb * twms
mlgc: humn - sprp
dnhz: vglc + lsdn
vqqn: hflv * qvzz
zqvj: pvzw + rvsn
jrcq: gwnf * bpng
rzps: 2
cfhc: lsnc * bvsg
psbn: hnbc - jchm
sjrt: 2
fpjw: gfnc + lqvh
plhg: jrfv * ccpf
tfhr: 11
zdlt: 2
fnsb: 4
zzwt: tllz * mbsm
plpn: 13
rjfj: bbmz * wjvr
rcct: snmj + sjrt
ptgf: 2
cjjl: dwfp * lfhw
rbtg: brrb + mrfv
qstc: 1
gnrf: mptv * dmvd
zldr: gzdn * rfmm
ndmr: 17
gpbb: vmnh * mzmd
pfrv: hhzz * psmw
nvgw: nbmn + psvs
sdlp: 3
ztmp: 4
dmqf: bnsf * vbhg
rjnj: 15
mggp: njvd * qljt
hpng: 3
bsrp: 3
sqvz: 3
tbtp: 5
dgst: sqvz * zggm
lqvh: 3
nzrh: 8
cvll: 4
fhzq: 3
drjz: 9
jftw: phfl * rfbt
fnvs: 1
wnch: smmh * trfg
wjpj: 4
wtgc: 2
hnfs: 13
wflw: tqgg + rztl

%% 2022\day21\test.txt
root: pppw + sjmn
dbpl: 5
cczh: sllz + lgvd
zczc: 2
ptdq: humn - dvpt
dvpt: 3
lfqf: 4
humn: 5
ljgn: 2
sjmn: drzm * dbpl
sllz: 4
pppw: cczh / lfqf
lgvd: ljgn * ptdq
drzm: hmdt - zczc
hmdt: 32

%% 2022\day22\cand.txt
0 163 0
76 0 1
0 182 0
54 0 1
99 109 2
149 38 2
99 118 2
49 171 2
59 149 3
149 7 2
99 142 2
149 7 2
99 142 2
149 9 2
99 136 2
149 15 2
99 51 2
100 49 3
0 100 0
50 53 0
0 139 0
55 149 3
69 149 3
49 164 2
49 185 2
82 149 3
49 173 2
76 0 1
0 160 0
72 0 1
0 172 0
109 0 1
0 130 0
0 131 0
0 131 0
0 131 0
0 131 0
0 172 0
81 0 1
85 0 1
0 184 0
85 0 1
0 177 0
0 177 0
0 177 0
0 177 0
0 177 0
0 177 0
0 177 0
0 177 0
0 177 0
0 177 0
0 177 0
0 177 0
0 172 0
50 17 0
50 17 0
50 82 0
29 100 1
50 66 0
8 100 1
50 48 0
0 105 0
92 149 3
138 0 1
1 199 3
88 0 1
6 199 3
76 0 1
0 182 0
83 0 1
0 173 0
66 0 1
0 163 0
73 149 3
49 152 2
74 149 3
49 182 2
144 0 1
99 148 2
99 147 2
149 2 2
99 134 2
34 100 1
50 58 0
9 100 1
50 49 0
29 100 1
50 82 0
123 49 3
20 199 3
72 0 1
0 144 0
146 0 1
99 147 2
149 2 2
45 199 3
52 149 3
60 149 3
49 173 2
73 149 3
49 159 2
144 0 1
99 148 2
49 199 3
96 149 3
149 31 2
99 89 2
144 49 3
144 49 3
144 49 3
115 49 3
0 104 0
50 51 0
3 100 1
50 40 0
0 112 0
50 73 0
131 49 3
99 72 2
128 49 3
99 118 2
149 40 2
99 93 2
149 45 2
99 85 2
143 49 3
99 104 2
115 49 3
115 49 3
119 49 3
99 64 2
120 49 3
99 98 2
119 49 3
10 100 1
50 38 0
0 177 0
0 177 0
0 172 0
120 0 1
21 199 3
144 0 1
99 148 2
49 199 3
96 149 3
149 0 2
42 199 3
132 0 1
99 134 2
32 100 1
54 149 3
49 190 2
144 0 1
49 199 3
96 149 3
149 0 2
37 199 3
80 149 3
49 175 2
50 14 0
0 158 0
81 0 1
60 0 1
0 160 0
53 149 3
57 149 3
52 149 3
50 82 0
29 100 1
50 66 0
8 100 1
50 12 0
0 170 0
50 11 0
0 144 0
50 0 1
0 158 0
119 49 3
99 70 2
19 100 1
50 77 0
8 100 1
50 73 0
32 100 1
50 85 0
140 49 3
99 119 2
149 29 2
99 117 2
149 49 2
99 104 2
149 23 2
99 127 2
149 40 2
99 93 2

%% 2022\day22\day22_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.ascii;
import std.process;

int mod(int x, int m)
{
    return ((x % m) + m) % m;
}

void main(string[] args)
{
    auto input = stdin.byLine.map!(x => x.dup).array.splitter("");

    char[][] field = input.front;
    input.popFront;
    auto route = input.front[0].splitWhen!((a, b) => a.isAlpha || b.isAlpha);

    // // extend
    // int M = field.map!(x => x.length).maxElement;
    // foreach (line; field)
    // {
    //     if (line.length < M)
    //     {
    //         int l = line.length;
    //         line.length = M;
    //         line[l..M] = ' ';
    //     }
    // }

    // create display
    char[][] display;
    //display = field.length;
    foreach (line; field)
        display ~= line.dup;

    // find start
    int[] pos = [0, 0];
    while(field[pos[1]][pos[0]] != '.')
    {
        if (++pos[0] == field[pos[1]].length)
        {
            pos[0] = 0;
            pos[1]++;
        }
    }

    int f = 0;
    enum display_f = ['>', 'v', '<', '^'];
    enum off = [[1, 0], [0, 1], [-1, 0], [0, -1]];

    int[] npos;
    npos.length = 2;

    int pivot = 20;
    foreach (move; route)
    {
        debug writeln(move);
        debug writeln(pos, " ", display_f[f]);
        void show()
        {
            if (pivot > 0)
                pivot--;
            debug
            {
                spawnShell("cls").wait;
                writeln(display.join("\n"));
                writeln(move);
                //spawnShell("ping -n 5 127.0.0.1").wait;
                //writeln("pivot", pivot);
                if (pivot == 0)
                    spawnShell("start /wait timeout /t -1").wait;
            }
        }
        if (pivot == 0)
            show();

        if (move.front.isAlpha)
        {
            // handle rotation
            if (move.front == 'R')
                f = mod(f + 1, 4);
            else
                f = mod(f - 1, 4);

            display[pos[1]][pos[0]] = display_f[f];
        }
        else
        {

            // handle movement
            foreach (step; 0..move.to!int)
            {
                display[pos[1]][pos[0]] = display_f[f];

                npos[] = pos[] + off[f][];

                if (npos[1] == field.length || (off[f][1] > 0 && (npos[0] >= field[npos[1]].length || field[npos[1]][npos[0]] == ' ')))
                {
                    show();

                    npos[1] = 0;
                    while (npos[0] >= field[npos[1]].length || field[npos[1]][npos[0]] == ' ')
                        npos[1]++;
                }
                else if (npos[1] == -1 || (off[f][1] < 0 && (npos[0] >= field[npos[1]].length || field[npos[1]][npos[0]] == ' ')))
                {
                    show();

                    npos[1] = field.length - 1;
                    while (npos[0] >= field[npos[1]].length || field[npos[1]][npos[0]] == ' ')
                        npos[1]--;
                }
                else if (npos[0] == field[npos[1]].length || (off[f][0] > 0 && field[npos[1]][npos[0]] == ' '))
                {
                    show();

                    npos[0] = 0;
                    while (field[npos[1]][npos[0]] == ' ')
                        npos[0]++;
                }
                else if (npos[0] == -1 || (off[f][0] < 0 && field[npos[1]][npos[0]] == ' '))
                {
                    show();

                    npos[0] = field[npos[1]].length - 1;
                    while (field[npos[1]][npos[0]] == ' ')
                        npos[0]--;
                }

                debug writeln(pos, " ", npos, " ", display_f[f]);
                if (field[npos[1]][npos[0]] == '.')
                    pos[] = npos[];
                else
                    break;
            }
        }
    }

    display[pos[1]][pos[0]] = '*';
    writeln(display.join("\n"));
    writeln(pos);

    pos[] += [1, 1];

    writeln(pos[1] * 1000 + pos[0] * 4 + f);

    // suspicious - after R7L18 goes R1 - need to check
    // 89224 -- correct!
    // 145248 -- too high
    // 167048 -- too high
}

%% 2022\day22\day22_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.ascii;
import std.process;

int mod(int x, int m)
{
    return ((x % m) + m) % m;
}

int convert(int[] pos, int[] npos, int src_face, int f)
{
    //writeln("src = ", src_face);

    if (src_face == 1)
    {
        if (f == 2) // left - ok
        {
            npos[0] = 0;
            npos[1] = 100 + (49 - pos[1]);

            return 0; // right
        }
        else if (f == 3) // up - ok - validated
        {
            npos[0] = 0;
            npos[1] = 150 + (pos[0] - 50);

            return 0; // right
        }
        else
            assert(0);
    }
    else if (src_face == 2)
    {
        if (f == 2) // left - ok
        {
            npos[0] = (pos[1] - 150) + 50;
            npos[1] = 0;
            return 1; // down
        }
        else if (f == 0) // right - ok
        {
            npos[0] = (pos[1] - 150) + 50;
            npos[1] = 149;
            return 3; // up
        }
        else if (f == 1) // down - ok
        {
            npos[0] = pos[0] + 100;
            npos[1] = 0;
            return 1; // down
        }
        else
            assert(0);
    }
    else if (src_face == 3)
    {
        if (f == 2) // left - ok
        {
            npos[0] = 50;
            npos[1] = 49 - (pos[1] - 100);

            return 0; // right
        }
        else if (f == 3) // up - ok
        {
            npos[0] = 50;
            npos[1] = pos[0] + 50;

            return 0; // right
        }
        else
            assert(0);
    }
    else if (src_face == 4)
    {
        if (f == 2) // left - ok
        {
            npos[0] = pos[1] - 50;
            npos[1] = 100;

            return 1; // down
        }
        else if (f == 0) // right - ok
        {
            npos[0] = 100 + pos[1] - 50;
            npos[1] = 49;

            return 3; // up
        }
        else
            assert(0);
    }
    else if (src_face == 5)
    {
        if (f == 0) // right - ok
        {
            npos[0] = 149;
            npos[1] = 49 - (pos[1] - 100);

            return 2; // left
        }
        else if (f == 1) // down - ok
        {
            npos[0] = 49;
            npos[1] = 150 + pos[0] - 50;

            return 2; // left
        }
        else
            assert(0);
    }
    else if (src_face == 6)
    {
        if (f == 0) // right - ok
        {
            npos[0] = 99;
            npos[1] = 149 - pos[1];

            return 2; // left
        }
        else if (f == 1) // down - ok
        {
            npos[0] = 99;
            npos[1] = pos[0] - 100 + 50;

            return 2; // left
        }
        else if (f == 3) // up - ok
        {
            npos[0] = pos[0] - 100;
            npos[1] = 199;

            return 3; // up
        }
        else
            assert(0);
    }

    assert(0);
}

void main(string[] args)
{
    auto input = stdin.byLine.map!(x => x.dup).array.splitter("");

    char[][] field = input.front;
    input.popFront;
    auto route = input.front[0].splitWhen!((a, b) => a.isAlpha || b.isAlpha);

    // // extend
    // int M = field.map!(x => x.length).maxElement;
    // foreach (line; field)
    // {
    //     if (line.length < M)
    //     {
    //         int l = line.length;
    //         line.length = M;
    //         line[l..M] = ' ';
    //     }
    // }

    char[][] mask = File("in.mask").byLine.map!(x => x.dup).array;
    writeln(mask.join("\n"));

    // create display
    char[][] display;
    //display = field.length;
    foreach (line; field)
        display ~= line.dup;

    // find start
    int[] pos = [0, 0];
    while(field[pos[1]][pos[0]] != '.')
    {
        if (++pos[0] == field[pos[1]].length)
        {
            pos[0] = 0;
            pos[1]++;
        }
    }

    int f = 0;
    enum display_f = ['>', 'v', '<', '^'];
    enum off = [[1, 0], [0, 1], [-1, 0], [0, -1]];

    int[] npos;
    npos.length = 2;

    int pivot = 0;
    int old_f = f;
    foreach (move; route)
    {
        debug writeln(move);
        debug writeln(pos, " ", display_f[f]);
        void show()
        {
            if (pivot > 0)
                pivot--;
            debug
            {
                spawnShell("cls").wait;
                writeln(display.join("\n"));
                writeln(move);
                writeln(mask[pos[1]][pos[0]], " ", pos, " ", display_f[old_f], " ", npos, " ", display_f[f]);
                //spawnShell("ping -n 5 127.0.0.1").wait;
                //writeln("pivot", pivot);
                if (pivot == 0)
                    spawnShell("start /wait timeout /t -1").wait;
            }
        }
        // if (pivot == 0)
        //     show();

        if (move.front.isAlpha)
        {
            // handle rotation
            if (move.front == 'R')
                f = mod(f + 1, 4);
            else
                f = mod(f - 1, 4);

            display[pos[1]][pos[0]] = display_f[f];
        }
        else
        {

            // handle movement
            foreach (step; 0..move.to!int)
            {
                display[pos[1]][pos[0]] = display_f[f];

                npos[] = pos[] + off[f][];

                if (npos[1] == field.length || (off[f][1] > 0 && (npos[0] >= field[npos[1]].length || field[npos[1]][npos[0]] == ' ')))
                {
                    old_f = f;
                    f = convert(pos, npos, mask[pos[1]][pos[0]] - '0', f);
                    if (field[npos[1]][npos[0]] == '#')
                        f = old_f;

                    show();
                    writeln(npos ~ f);
                }
                else if (npos[1] == -1 || (off[f][1] < 0 && (npos[0] >= field[npos[1]].length || field[npos[1]][npos[0]] == ' ')))
                {
                    old_f = f;
                    f = convert(pos, npos, mask[pos[1]][pos[0]] - '0', f);
                    if (field[npos[1]][npos[0]] == '#')
                        f = old_f;

                    show();
                    writeln(npos ~ f);
                }
                else if (npos[0] == field[npos[1]].length || (off[f][0] > 0 && field[npos[1]][npos[0]] == ' '))
                {
                    old_f = f;
                    f = convert(pos, npos, mask[pos[1]][pos[0]] - '0', f);
                    if (field[npos[1]][npos[0]] == '#')
                        f = old_f;

                    show();
                    writeln(npos ~ f);
                }
                else if (npos[0] == -1 || (off[f][0] < 0 && field[npos[1]][npos[0]] == ' '))
                {
                    old_f = f;
                    f = convert(pos, npos, mask[pos[1]][pos[0]] - '0', f);
                    if (field[npos[1]][npos[0]] == '#')
                        f = old_f;

                    show();
                    writeln(npos ~ f);
                }

                if (field[npos[1]][npos[0]] == '.')
                {
                    pos[] = npos[];
                }
                else
                {
                    //f = old_f;
                    break;
                }
            }
        }
    }

    display[pos[1]][pos[0]] = '*';
    writeln(display.join("\n"));
    writeln(pos);

    pos[] += [1, 1];

    writeln(pos[1] * 1000 + pos[0] * 4 + f);

    // 9585 -- too low
    // 146037 -- too high
}

%% 2022\day22\empty.txt
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ....................................................................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
                                                  ..................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................

1R55R300

%% 2022\day22\general_part2.py
#!/usr/bin/env python3

import re

SIZE = 50
DIRS = ((1, 0), (0, 1), (-1, 0), (0, -1))
RIGHT, DOWN, LEFT, UP, OPP, SELF = range(6)
# fmt: off
MAPPING = {
    SELF: {
        RIGHT: (RIGHT, 0),
        LEFT: (LEFT, 0),
        UP: (UP, 0),
        DOWN: (DOWN, 0),
    },
    RIGHT: {
        RIGHT: (OPP, 2),
        LEFT: (SELF, 0),
        UP: (UP, 3),
        DOWN: (DOWN, 1),
    },
    LEFT: {
        RIGHT: (SELF, 0),
        LEFT: (OPP, 2),
        UP: (UP, 1),
        DOWN: (DOWN, 3),
    },
    UP: {
        RIGHT: (RIGHT, 1),
        LEFT: (LEFT, 3),
        UP: (OPP, 0),
        DOWN: (SELF, 0),
    },
    DOWN: {
        RIGHT: (RIGHT, 3),
        LEFT: (LEFT, 1),
        UP: (SELF, 0),
        DOWN: (OPP, 0),
    },
    # rotation 0 is up/down == down/up, right/left == right/left as reached by up+up or down+down
    OPP: {
        RIGHT: (RIGHT, 2),
        LEFT: (LEFT, 2),
        UP: (DOWN, 0),
        DOWN: (UP, 0),
    },
}
# fmt: on

#    D
#   LOR
#  U U U
# ROLSROL
#  D D D
#   LOR
#    U


def find_face(face, target_rel):
    visited = {face}
    todo = [(face, SELF, 0)]

    while todo:
        (fx, fy), rel, rot = todo.pop()
        # if face == (0, 150) and target_rel == 2:
        #     print(fx, fy, rel, rot)
        for d, (dx, dy) in enumerate(DIRS):
            new_face = fx + dx * 50, fy + dy * 50
            if new_face not in faces or new_face in visited:
                continue
            visited.add(new_face)
            new_rel, new_rot = MAPPING[rel][(d + rot) % 4]
            new_rot = (new_rot + rot) % 4
            if new_rel == target_rel:
                return new_face, new_rot
            todo.append((new_face, new_rel, new_rot))
    assert False, (face, target_rel)


with open("input.txt") as f:
    lines = f.read().splitlines()

grid = {}
faces = set()
path = re.findall("\d+|L|R", lines[-1])

for y, line in enumerate(lines[:-2]):
    for x, c in enumerate(line):
        if c != " ":
            if x % 50 == 0 and y % 50 == 0:
                faces.add((x, y))
            grid[x, y] = c

mx = min(x for x, y in grid if y == 0)
my = 0
d = 0

for p in path:
    if p == "L":
        d = (d - 1) % 4
        continue
    if p == "R":
        d = (d + 1) % 4
        continue
    for _ in range(int(p)):
        dx, dy = DIRS[d]
        nd = d
        nx, ny = mx + dx, my + dy

        if (nx, ny) not in grid:
            fx, fy = mx % 50, my % 50
            nface, rot = find_face((mx - fx, my - fy), d)
            nd = (d - rot) % 4
            if d == RIGHT:
                nx, ny = 0, fy
            elif d == LEFT:
                nx, ny = 49, fy
            elif d == DOWN:
                nx, ny = fx, 0
            else:
                nx, ny = fx, 49
            if rot == 1:
                nx, ny = ny, 49 - nx
            elif rot == 2:
                nx, ny = 49 - nx, 49 - ny
            elif rot == 3:
                nx, ny = 49 - ny, nx
            nx += nface[0]
            ny += nface[1]
            print(nx, ny, nd)

        if grid[nx, ny] == "#":
            break

        mx, my = nx, ny
        d = nd

print(1000 * (my + 1) + 4 * (mx + 1) + d)

%% 2022\day22\general_part2b.py
#!/usr/bin/env python3

import re

SIZE = 50
DIRS = ((1, 0), (0, 1), (-1, 0), (0, -1))
RIGHT, DOWN, LEFT, UP, OPP, SELF = range(6)
# fmt: off
MAPPING = {
    SELF: {
        RIGHT: (RIGHT, 0),
        LEFT: (LEFT, 0),
        UP: (UP, 0),
        DOWN: (DOWN, 0),
    },
    RIGHT: {
        RIGHT: (OPP, 2),
        LEFT: (SELF, 0),
        UP: (UP, 3),
        DOWN: (DOWN, 1),
    },
    LEFT: {
        RIGHT: (SELF, 0),
        LEFT: (OPP, 2),
        UP: (UP, 1),
        DOWN: (DOWN, 3),
    },
    UP: {
        RIGHT: (RIGHT, 1),
        LEFT: (LEFT, 3),
        UP: (OPP, 0),
        DOWN: (SELF, 0),
    },
    DOWN: {
        RIGHT: (RIGHT, 3),
        LEFT: (LEFT, 1),
        UP: (SELF, 0),
        DOWN: (OPP, 0),
    },
    # rotation 0 is up/down == down/up, right/left == right/left as reached by up+up or down+down
    OPP: {
        RIGHT: (RIGHT, 2),
        LEFT: (LEFT, 2),
        UP: (DOWN, 0),
        DOWN: (UP, 0),
    },
}
# fmt: on

#    D
#   LOR
#  U U U
# ROLSROL
#  D D D
#   LOR
#    U


def find_face(face, target_rel):
    visited = {face}
    todo = [(face, SELF, 0)]

    while todo:
        (fx, fy), rel, rot = todo.pop()
        # if face == (0, 150) and target_rel == 2:
        #     print(fx, fy, rel, rot)
        for d, (dx, dy) in enumerate(DIRS):
            new_face = fx + dx * 50, fy + dy * 50
            if new_face not in faces or new_face in visited:
                continue
            visited.add(new_face)
            new_rel, new_rot = MAPPING[rel][(d + rot) % 4]
            new_rot = (new_rot + rot) % 4
            if new_rel == target_rel:
                return new_face, new_rot
            todo.append((new_face, new_rel, new_rot))
    assert False, (face, target_rel)


with open("input.txt") as f:
    lines = f.read().splitlines()

grid = {}
faces = set()
path = re.findall("\d+|L|R", lines[-1])

for y, line in enumerate(lines[:-2]):
    for x, c in enumerate(line):
        if c != " ":
            if x % 50 == 0 and y % 50 == 0:
                faces.add((x, y))
            grid[x, y] = c

mx = min(x for x, y in grid if y == 0)
my = 0
d = 0

for p in path:
    #print (p)
    if p == "L":
        d = (d - 1) % 4
        continue
    if p == "R":
        d = (d + 1) % 4
        continue
    for _ in range(int(p)):
        dx, dy = DIRS[d]
        nd = d
        nx, ny = mx + dx, my + dy

        #print(mx, my, d, ' -> ', nx, ny, nd)

        if (nx, ny) not in grid:
            fx, fy = mx % 50, my % 50
            nface, rot = find_face((mx - fx, my - fy), d)
            nd = (d - rot) % 4
            if d == RIGHT:
                nx, ny = 0, fy
            elif d == LEFT:
                nx, ny = 49, fy
            elif d == DOWN:
                nx, ny = fx, 0
            else:
                nx, ny = fx, 49
            if rot == 1:
                nx, ny = ny, 49 - nx
            elif rot == 2:
                nx, ny = 49 - nx, 49 - ny
            elif rot == 3:
                nx, ny = 49 - ny, nx
            nx += nface[0]
            ny += nface[1]
            print(mx, my, d, ' -> ', nx, ny, nd)

        if grid[nx, ny] == "#":
            break

        mx, my = nx, ny
        d = nd

print(1000 * (my + 1) + 4 * (mx + 1) + d)

%% 2022\day22\gt.txt
63 0 3  ->  0 163 0
0 176 2  ->  76 0 1
82 0 3  ->  0 182 0
0 154 2  ->  54 0 1
149 40 0  ->  99 109 2
99 111 0  ->  149 38 2
149 31 0  ->  99 118 2
71 149 1  ->  49 171 2
49 159 0  ->  59 149 3
99 142 0  ->  149 7 2
149 7 0  ->  99 142 2
99 142 0  ->  149 7 2
149 7 0  ->  99 142 2
99 140 0  ->  149 9 2
149 13 0  ->  99 136 2
99 134 0  ->  149 15 2
101 49 1  ->  99 51 2
99 50 0  ->  100 49 3
50 49 2  ->  0 100 0
3 100 3  ->  50 53 0
50 10 2  ->  0 139 0
49 155 0  ->  55 149 3
49 169 0  ->  69 149 3
64 149 1  ->  49 164 2
85 149 1  ->  49 185 2
49 182 0  ->  82 149 3
73 149 1  ->  49 173 2
0 176 2  ->  76 0 1
60 0 3  ->  0 160 0
0 172 2  ->  72 0 1
72 0 3  ->  0 172 0
9 199 1  ->  109 0 1
50 19 2  ->  0 130 0
50 6 2  ->  0 143 0
0 149 2  ->  50 0 0
122 0 3  ->  22 199 3
25 199 1  ->  125 0 1
122 0 3  ->  22 199 3
49 180 0  ->  80 149 3
87 149 1  ->  49 187 2
49 192 0  ->  92 149 3
49 194 0  ->  94 149 3
97 149 1  ->  49 197 2
40 199 1  ->  140 0 1
142 0 3  ->  42 199 3
0 190 2  ->  90 0 1
72 0 3  ->  0 172 0
49 152 0  ->  52 149 3
99 81 0  ->  131 49 3
135 49 1  ->  99 85 2
99 93 0  ->  143 49 3
149 25 0  ->  99 124 2
99 124 0  ->  149 25 2
149 19 0  ->  99 130 2
50 34 2  ->  0 115 0
30 100 3  ->  50 80 0
50 79 2  ->  29 100 1
16 100 3  ->  50 66 0
50 58 2  ->  8 100 1
24 100 3  ->  50 74 0
47 100 3  ->  50 97 0
99 109 0  ->  149 40 2
149 31 0  ->  99 118 2
99 104 0  ->  149 45 2
106 49 1  ->  99 56 2
112 49 1  ->  99 62 2
99 62 0  ->  112 49 3
109 49 1  ->  99 59 2
101 49 1  ->  99 51 2
99 69 0  ->  119 49 3
107 0 3  ->  7 199 3
0 199 2  ->  99 0 1
0 180 2  ->  80 0 1
67 0 3  ->  0 167 0
0 168 2  ->  68 0 1
77 0 3  ->  0 177 0
80 0 3  ->  0 180 0
49 198 0  ->  98 149 3
99 134 0  ->  149 15 2
149 15 0  ->  99 134 2
99 141 0  ->  149 8 2
149 11 0  ->  99 138 2
98 149 1  ->  49 198 2
44 199 1  ->  144 0 1
144 0 3  ->  44 199 3
49 189 0  ->  89 149 3
49 178 0  ->  78 149 3
59 149 1  ->  49 159 2
0 132 2  ->  50 17 0
0 181 2  ->  81 0 1
0 191 2  ->  91 0 1
86 0 3  ->  0 186 0
0 187 2  ->  87 0 1
86 0 3  ->  0 186 0
0 187 2  ->  87 0 1
74 0 3  ->  0 174 0
62 0 3  ->  0 162 0
49 180 0  ->  80 149 3
75 149 1  ->  49 175 2
49 174 0  ->  74 149 3
82 149 1  ->  49 182 2
49 165 0  ->  65 149 3
73 149 1  ->  49 173 2
0 153 2  ->  53 0 1
58 0 3  ->  0 158 0
0 185 2  ->  85 0 1
90 0 3  ->  0 190 0
21 199 1  ->  121 0 1
122 0 3  ->  22 199 3
19 199 1  ->  119 0 1
120 0 3  ->  20 199 3
0 183 2  ->  83 0 1
84 0 3  ->  0 184 0
0 185 2  ->  85 0 1
99 65 0  ->  115 49 3
99 73 0  ->  123 49 3
128 0 3  ->  28 199 3
0 185 2  ->  85 0 1
74 0 3  ->  0 174 0
58 0 3  ->  0 158 0
0 149 2  ->  50 0 0
50 6 2  ->  0 143 0
0 149 2  ->  50 0 0
63 0 3  ->  0 163 0
0 164 2  ->  64 0 1
0 156 2  ->  56 0 1
50 12 2  ->  0 137 0
0 137 2  ->  50 12 0
50 6 2  ->  0 143 0
0 172 2  ->  72 0 1
82 0 3  ->  0 182 0
0 154 2  ->  54 0 1
50 15 2  ->  0 134 0
50 5 2  ->  0 144 0
49 152 0  ->  52 149 3
37 100 3  ->  50 87 0
50 56 2  ->  6 100 1
0 102 2  ->  50 47 0
50 48 2  ->  0 101 0
39 100 3  ->  50 89 0
90 149 1  ->  49 190 2
44 199 1  ->  144 0 1
149 1 0  ->  99 148 2
149 2 0  ->  99 147 2
99 147 0  ->  149 2 2
149 15 0  ->  99 134 2
79 149 1  ->  49 179 2
49 183 0  ->  83 149 3
46 199 1  ->  146 0 1
145 0 3  ->  45 199 3
49 189 0  ->  89 149 3
48 199 1  ->  148 0 1
147 0 3  ->  47 199 3
0 190 2  ->  90 0 1
77 0 3  ->  0 177 0
80 0 3  ->  0 180 0
49 173 0  ->  73 149 3
66 149 1  ->  49 166 2
49 159 0  ->  59 149 3
49 155 0  ->  55 149 3
0 160 2  ->  60 0 1
50 19 2  ->  0 130 0
50 19 2  ->  0 130 0
50 19 2  ->  0 130 0
50 18 2  ->  0 131 0
50 18 2  ->  0 131 0
50 19 2  ->  0 130 0
60 0 3  ->  0 160 0
49 154 0  ->  54 149 3
0 183 2  ->  83 0 1
79 0 3  ->  0 179 0
0 140 2  ->  50 9 0
55 0 3  ->  0 155 0
50 0 2  ->  0 149 0
0 150 2  ->  50 0 1
50 3 2  ->  0 146 0
0 154 2  ->  54 0 1
50 15 2  ->  0 134 0
50 49 2  ->  0 100 0
0 104 2  ->  50 45 0
50 34 2  ->  0 115 0
0 111 2  ->  50 38 0
50 40 2  ->  0 109 0
3 100 3  ->  50 53 0
50 44 2  ->  0 105 0
0 100 3  ->  50 50 0
50 50 2  ->  0 100 1
0 107 2  ->  50 42 0
0 132 2  ->  50 17 0
0 132 2  ->  50 17 0
0 132 2  ->  50 17 0
0 132 2  ->  50 17 0
136182

%% 2022\day22\in.mask
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  111111111111111111111111111111111111111111111111116666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
                                                  44444444444444444444444444444444444444444444444444
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
3333333333333333333333333333333333333333333333333355555555555555555555555555555555555555555555555555
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222
22222222222222222222222222222222222222222222222222

%% 2022\day22\in.txt
                                                  ..............#....#...........#.................#....##..#...........................#.............
                                                  ..............#....#.#......#......#.........................#....#...................#......#......
                                                  .......#...........................#...#.....#..............#................#.......#.......##.....
                                                  .........#.......................#.#.#.....#.........#....#.......#.#....#................#.....#..#
                                                  #..........#..............#...........##................#.#.....#....#.............##....#........#.
                                                  ........##.....#..#........#.........#................#.#..........#........##.......#...........#..
                                                  ............#......##....#....##.........##......#..#......................................#........
                                                  ..#....#...............#.....................#.#...................................#....##.#.....#..
                                                  .#.................#......##...........................#........#..#.....#.......#...#......#.....#.
                                                  ........#.....#...........#..........#.....#..#..............#...............#............#..##...#.
                                                  ..........#............#.#..#.......#......#..#...............#......#..............................
                                                  .#......##........................#............#....................#................#..#...........
                                                  ..........................#..#.........##.........................#......#..#....#..............#...
                                                  ..........#..........#...............##..........................#....##.....#.............#..#.#...
                                                  ...#...............#.#.........#....#............#...#.....##.............#...#.#...#........#.....#
                                                  .........#.............#.........................................#...#...#..................#.#.....
                                                  ....#.......................#.........#.....#....#.............................................#....
                                                  #...#......................##.....#....#.......#......#..........#.................#.....#.....#....
                                                  .............#..#.....#..........#................#.......#..#.......#.........#.....#...#...#..#...
                                                  .....................#...........#.........#....#..........#................#.....#.................
                                                  #.#........#......#.......................#...............#..#.............##.......#..#...#........
                                                  ....................#.................#.....#......#.............#..................#.............##
                                                  .#......#.........#.....#..............................#..............#..............##..........#..
                                                  ..................#..##........#..................#...#.......#...#..#...#..........#...........##..
                                                  ....#...#......#...#...#.......#.#........#..#...#.............#......#....##....#.#.....##........#
                                                  ....#...............#.....###............#...............................#.............#............
                                                  .....#...#..........#..........#.....#.................#....................#...#.#....#...##.......
                                                  ...........#.#...#..............#...............#.......#.....................#...#.................
                                                  #...##.............................#..............#.....#.....#.....#.......#..........#....#...#...
                                                  .#..#......................#...#........##........................#.##...........#............#.#...
                                                  ...........#.......#..........#......#...............#.............#......##...#.#........#.#.......
                                                  ....#..............#....#.........................#......#..........................................
                                                  .........#.#.............##..........#..........#...........#.......................#...#.#..#.#.#..
                                                  ......#......#.........#.........#..........##..........#..................#..........#....#........
                                                  ...................................#.......................................##.............#.........
                                                  .........................#...#.............#..#.....#......................##.......#........#......
                                                  ....#...#.........................................#.......#.....................#.......#........#..
                                                  ......#........................#......#............#..........................#...#.................
                                                  ...........#..#....#...............#..........................#.......................#.............
                                                  ......#..............#...#.#............................................#...............#.....#.....
                                                  .....#.....#........#.......#..........#.......#......#...#..#..#............#...##.....#...#.......
                                                  .#.......................................#.....#.##...#...........#..#....#......#......#...#.......
                                                  #.....#....#.....#.............................#....##......#..#.......#................#...........
                                                  ...................#................#.......................#..............................#.......#
                                                  ....................................#....#...................##...............#....#................
                                                  ..................#.........#...#..#...................#.##.....#...................................
                                                  .#.......##.......#........................#........#............#.....#.....##..........#..........
                                                  ......##.........#.#........#.....###...................#......#....#..#....#...#.........##........
                                                  .......................#......#.........#.............##.......................#..#..............#..
                                                  ...#.........................#........#........................#.#..........##.........#......##.#..
                                                  ..#.............#...#....#........................
                                                  .##...............#.#.........#.................#.
                                                  ...#....#...................................#..#..
                                                  ............#.#.#....#............................
                                                  .......#.................#......................#.
                                                  .............#........#.......#.......#....#......
                                                  ....................#.......##..........#........#
                                                  .###....#..........#....#..............#........#.
                                                  ...#..#.#.......................#.#...............
                                                  .....#.#...#............#....#..........#...##....
                                                  ......#....................#............#..#.#....
                                                  ......#................#................#.#.#.....
                                                  ....#.#.......#.....#..#....#...................#.
                                                  ......#...............#.....................#....#
                                                  ......#......#.....................#.....####.....
                                                  ....#...........................#.................
                                                  ..#...#...............#.....#....#.....#..........
                                                  .....#........#........#....#..........#..........
                                                  .................#...#.....#...........##...#.....
                                                  .....................#..##..#...#.................
                                                  ...#.....##................#..#...#...............
                                                  ............#..............#....#................#
                                                  ...........##...#....#....#........#..............
                                                  ........#.#........................#..............
                                                  #.#.....#...........#.#..#....#..............#.#..
                                                  .........##..#......#...#.................#.......
                                                  ....###...............#......................#....
                                                  ..###......#.........#...........#........#....#..
                                                  ........##...............#..#.....#...............
                                                  ......................#...................#...#..#
                                                  ..........##........#.......#.....#..#.......#....
                                                  ##........................#............#.#..#.....
                                                  ..........##......#.....#.......#.........#.......
                                                  ...#...#.......#.#............................#...
                                                  .......................#...#..#.....#.......#....#
                                                  ....#.........................#..#................
                                                  ....#.#......#..............#..............#..#...
                                                  ...............#....#....#......................#.
                                                  ..........#....#....##..........#..............#..
                                                  .#...........#...........#.#...........#..........
                                                  ..#..............#.......#........................
                                                  ...##....#......#........#.#..............#.......
                                                  ...#.....##......#.............#.....#...##.......
                                                  .#......#...#...#...#..............#..............
                                                  .##...............#............#......#....#......
                                                  .......................................#..#.#.....
                                                  ............................#..........#..........
                                                  ................#..........#...#......##......#...
                                                  .................#........#...#.....#.#..#........
                                                  .#..#..#............#.......#.....................
.....................#......................................#..#...#.......................#........
.........#................#.........#...........#.......##.............................#..#...#.....
.............###......................#......#........#.....#................###.#.................#
............................##...........#..#................................#..............#...#...
..#..............#.#..#.............#...........................#.....#.............................
.#...........#.#..##...............##.............................................#..#......##......
..........#.#....................####..........#......#.....##.#........................#......#....
......#..#......##.................#....#............#......#.....#......##.#..........#.......#....
.......#...#...................#....#....#....................#.....................#..#.......#....
....###...............#.................#.............#..#......#..#........#.....#.................
.#.#....#................#.................#.......................#......#.....#..#....#....#......
.............#......#.............#.................#...........#..................#.....#..#.......
..#..#...........#.#......##.........#.............#........#..........#.........................#..
..#...............#...........##........#.......#....##..#......#..#............#......##..###......
.................##..............#...#................#.....#........##.........................#...
....#..............................................#...........#........#........#.........#..#.....
...#.........#.#.....#......#....................................##....##........#..................
..#....#...................#...............#...#.....#...........##.............................#.#.
..........#....#..#.......................................#.....#.......#.....#........#............
.#.....#..............##......#...........#.....................#..#.....................#.......##.
..............#.#..........................#....................#.....................#..#..........
......#..................................#................................................#........#
#...##.........................#.....#.............#....#........#.......#..#..........#.........#..
..#.##..##.......#.........#.........#..........#............#...............#.#.#.......#..........
..............#........................##....#..........#...............................#........#..
.........#............................#...............#..............#.........##.#.....#.###.#...#.
.........#.........##..........#........................#............#............#.................
#.#.................#..##..#.......##........................#..#....#....#...........#......#......
............#.............................#....#..#....#..#.....##....#.................#...........
#.......#...#.#.............#....#...#.#..#..........#................#........#.#........#.........
#...##.............#...........................#..#...............#.#..................#...........#
#...#......................###.......#....##......#....##.........#.....#.........................##
............................................###......#.......#..#..............#.........##.........
##.......#...........#.......................#..#...................................#.............#.
#.#.....................##.....#...#...............#..#..#.#.......#...#....#....#..................
.....#.........#...#.#......#..#....................#...........#..#.........#.....#.............#..
...#..........#.......#.#.#..#...........#....#..#.....#...#......#....#....##.#........#...........
....#......#......#....#..#..........#..#....#....#...............#............#...#..........##.#..
..........#...............#......##..................#...#....................#...#.....#...#....#..
.......##.#....................#...#.....#......#........#.................#.......#...#.........#..
...............#...................#.#......###...##.##...#..#..................#...................
..........#......#.................##.#..............................#..............#.....##........
...#..#...#............###............#........#......#.....#..#......#...............#.............
.....#.......................##...#...................##.#..............#.....#........#............
............##........#.....#...................#.............#...#..................#......#.......
#....#....#........#..#...#............#......#....#......####.....##...........#.....#.............
.#.........#........#....#..........#...#..........#......................#.............#...#.#.....
.........#.........#.#........#...................##....#.#.#......#....##.................#........
.....#.........#..#.................#....#................#...............#...#..##.#.......#...#..#
............#..................#...#....................................#..........#.....#.##.......
....#.#...#...##....##............................
..#..........##.....#.............................
.#.....#..........................................
........#.....#...#...#...........................
.......#..........................................
#.....#...#..#...........#........................
.#...#..................##........................
.........#....#....#.......................#......
............................#.....#.............#.
....#...............##.......#.............#......
................................#.#...............
....##...#....#.....#.......##......#.........#...
..#..........#.................#...............#..
.......#............#......................###....
............#.#....#..........#..........#........
#.....#................#..........................
..#...........#....#..#.#....#.............#......
.........#............##....................##....
...........#..........#.#.......#..#...........#..
.....#.............#......#.......#.#.#...........
..#.....#........#.........#................#....#
..#.............#..........#.###..##...#.....##...
.......................#....#..........#....#.....
.#....###...#...#.....#...........................
#.........#.#...#....#....#..#....................
.#...#...................................##.......
.....................................##.....#...#.
#....#.........#..#........................#..#..#
..............#....#.....##.......#............#..
..........#.#......#....##....#...............#...
.........................###..#....#.....#........
.................#......#....#...............#..#.
....#..#.....#...............#...#.......#........
.................#...........#....................
....#....#.........#..#........................#..
....................................##...#......#.
...#.....#.............#..............#......#....
....#..#........##...##...............#.#.........
....#.........................#..#..#...#....#..#.
..#...........#........#............#.............
............................#..............#......
................#..........#....#........#.#......
#..............................#.....#............
#........#.........#..#..............#..........#.
..#..#.#..........#................#...........#..
...#....#.......#...........#..........#.......#.#
....#..#.......#..#...........#...................
..#.......#......................#..#..#..........
.......#...#....#.........#....#..........##......
........#.........................................



%% 2022\day22\input.txt
                                                  ..............#....#...........#.................#....##..#...........................#.............
                                                  ..............#....#.#......#......#.........................#....#...................#......#......
                                                  .......#...........................#...#.....#..............#................#.......#.......##.....
                                                  .........#.......................#.#.#.....#.........#....#.......#.#....#................#.....#..#
                                                  #..........#..............#...........##................#.#.....#....#.............##....#........#.
                                                  ........##.....#..#........#.........#................#.#..........#........##.......#...........#..
                                                  ............#......##....#....##.........##......#..#......................................#........
                                                  ..#....#...............#.....................#.#...................................#....##.#.....#..
                                                  .#.................#......##...........................#........#..#.....#.......#...#......#.....#.
                                                  ........#.....#...........#..........#.....#..#..............#...............#............#..##...#.
                                                  ..........#............#.#..#.......#......#..#...............#......#..............................
                                                  .#......##........................#............#....................#................#..#...........
                                                  ..........................#..#.........##.........................#......#..#....#..............#...
                                                  ..........#..........#...............##..........................#....##.....#.............#..#.#...
                                                  ...#...............#.#.........#....#............#...#.....##.............#...#.#...#........#.....#
                                                  .........#.............#.........................................#...#...#..................#.#.....
                                                  ....#.......................#.........#.....#....#.............................................#....
                                                  #...#......................##.....#....#.......#......#..........#.................#.....#.....#....
                                                  .............#..#.....#..........#................#.......#..#.......#.........#.....#...#...#..#...
                                                  .....................#...........#.........#....#..........#................#.....#.................
                                                  #.#........#......#.......................#...............#..#.............##.......#..#...#........
                                                  ....................#.................#.....#......#.............#..................#.............##
                                                  .#......#.........#.....#..............................#..............#..............##..........#..
                                                  ..................#..##........#..................#...#.......#...#..#...#..........#...........##..
                                                  ....#...#......#...#...#.......#.#........#..#...#.............#......#....##....#.#.....##........#
                                                  ....#...............#.....###............#...............................#.............#............
                                                  .....#...#..........#..........#.....#.................#....................#...#.#....#...##.......
                                                  ...........#.#...#..............#...............#.......#.....................#...#.................
                                                  #...##.............................#..............#.....#.....#.....#.......#..........#....#...#...
                                                  .#..#......................#...#........##........................#.##...........#............#.#...
                                                  ...........#.......#..........#......#...............#.............#......##...#.#........#.#.......
                                                  ....#..............#....#.........................#......#..........................................
                                                  .........#.#.............##..........#..........#...........#.......................#...#.#..#.#.#..
                                                  ......#......#.........#.........#..........##..........#..................#..........#....#........
                                                  ...................................#.......................................##.............#.........
                                                  .........................#...#.............#..#.....#......................##.......#........#......
                                                  ....#...#.........................................#.......#.....................#.......#........#..
                                                  ......#........................#......#............#..........................#...#.................
                                                  ...........#..#....#...............#..........................#.......................#.............
                                                  ......#..............#...#.#............................................#...............#.....#.....
                                                  .....#.....#........#.......#..........#.......#......#...#..#..#............#...##.....#...#.......
                                                  .#.......................................#.....#.##...#...........#..#....#......#......#...#.......
                                                  #.....#....#.....#.............................#....##......#..#.......#................#...........
                                                  ...................#................#.......................#..............................#.......#
                                                  ....................................#....#...................##...............#....#................
                                                  ..................#.........#...#..#...................#.##.....#...................................
                                                  .#.......##.......#........................#........#............#.....#.....##..........#..........
                                                  ......##.........#.#........#.....###...................#......#....#..#....#...#.........##........
                                                  .......................#......#.........#.............##.......................#..#..............#..
                                                  ...#.........................#........#........................#.#..........##.........#......##.#..
                                                  ..#.............#...#....#........................
                                                  .##...............#.#.........#.................#.
                                                  ...#....#...................................#..#..
                                                  ............#.#.#....#............................
                                                  .......#.................#......................#.
                                                  .............#........#.......#.......#....#......
                                                  ....................#.......##..........#........#
                                                  .###....#..........#....#..............#........#.
                                                  ...#..#.#.......................#.#...............
                                                  .....#.#...#............#....#..........#...##....
                                                  ......#....................#............#..#.#....
                                                  ......#................#................#.#.#.....
                                                  ....#.#.......#.....#..#....#...................#.
                                                  ......#...............#.....................#....#
                                                  ......#......#.....................#.....####.....
                                                  ....#...........................#.................
                                                  ..#...#...............#.....#....#.....#..........
                                                  .....#........#........#....#..........#..........
                                                  .................#...#.....#...........##...#.....
                                                  .....................#..##..#...#.................
                                                  ...#.....##................#..#...#...............
                                                  ............#..............#....#................#
                                                  ...........##...#....#....#........#..............
                                                  ........#.#........................#..............
                                                  #.#.....#...........#.#..#....#..............#.#..
                                                  .........##..#......#...#.................#.......
                                                  ....###...............#......................#....
                                                  ..###......#.........#...........#........#....#..
                                                  ........##...............#..#.....#...............
                                                  ......................#...................#...#..#
                                                  ..........##........#.......#.....#..#.......#....
                                                  ##........................#............#.#..#.....
                                                  ..........##......#.....#.......#.........#.......
                                                  ...#...#.......#.#............................#...
                                                  .......................#...#..#.....#.......#....#
                                                  ....#.........................#..#................
                                                  ....#.#......#..............#..............#..#...
                                                  ...............#....#....#......................#.
                                                  ..........#....#....##..........#..............#..
                                                  .#...........#...........#.#...........#..........
                                                  ..#..............#.......#........................
                                                  ...##....#......#........#.#..............#.......
                                                  ...#.....##......#.............#.....#...##.......
                                                  .#......#...#...#...#..............#..............
                                                  .##...............#............#......#....#......
                                                  .......................................#..#.#.....
                                                  ............................#..........#..........
                                                  ................#..........#...#......##......#...
                                                  .................#........#...#.....#.#..#........
                                                  .#..#..#............#.......#.....................
.....................#......................................#..#...#.......................#........
.........#................#.........#...........#.......##.............................#..#...#.....
.............###......................#......#........#.....#................###.#.................#
............................##...........#..#................................#..............#...#...
..#..............#.#..#.............#...........................#.....#.............................
.#...........#.#..##...............##.............................................#..#......##......
..........#.#....................####..........#......#.....##.#........................#......#....
......#..#......##.................#....#............#......#.....#......##.#..........#.......#....
.......#...#...................#....#....#....................#.....................#..#.......#....
....###...............#.................#.............#..#......#..#........#.....#.................
.#.#....#................#.................#.......................#......#.....#..#....#....#......
.............#......#.............#.................#...........#..................#.....#..#.......
..#..#...........#.#......##.........#.............#........#..........#.........................#..
..#...............#...........##........#.......#....##..#......#..#............#......##..###......
.................##..............#...#................#.....#........##.........................#...
....#..............................................#...........#........#........#.........#..#.....
...#.........#.#.....#......#....................................##....##........#..................
..#....#...................#...............#...#.....#...........##.............................#.#.
..........#....#..#.......................................#.....#.......#.....#........#............
.#.....#..............##......#...........#.....................#..#.....................#.......##.
..............#.#..........................#....................#.....................#..#..........
......#..................................#................................................#........#
#...##.........................#.....#.............#....#........#.......#..#..........#.........#..
..#.##..##.......#.........#.........#..........#............#...............#.#.#.......#..........
..............#........................##....#..........#...............................#........#..
.........#............................#...............#..............#.........##.#.....#.###.#...#.
.........#.........##..........#........................#............#............#.................
#.#.................#..##..#.......##........................#..#....#....#...........#......#......
............#.............................#....#..#....#..#.....##....#.................#...........
#.......#...#.#.............#....#...#.#..#..........#................#........#.#........#.........
#...##.............#...........................#..#...............#.#..................#...........#
#...#......................###.......#....##......#....##.........#.....#.........................##
............................................###......#.......#..#..............#.........##.........
##.......#...........#.......................#..#...................................#.............#.
#.#.....................##.....#...#...............#..#..#.#.......#...#....#....#..................
.....#.........#...#.#......#..#....................#...........#..#.........#.....#.............#..
...#..........#.......#.#.#..#...........#....#..#.....#...#......#....#....##.#........#...........
....#......#......#....#..#..........#..#....#....#...............#............#...#..........##.#..
..........#...............#......##..................#...#....................#...#.....#...#....#..
.......##.#....................#...#.....#......#........#.................#.......#...#.........#..
...............#...................#.#......###...##.##...#..#..................#...................
..........#......#.................##.#..............................#..............#.....##........
...#..#...#............###............#........#......#.....#..#......#...............#.............
.....#.......................##...#...................##.#..............#.....#........#............
............##........#.....#...................#.............#...#..................#......#.......
#....#....#........#..#...#............#......#....#......####.....##...........#.....#.............
.#.........#........#....#..........#...#..........#......................#.............#...#.#.....
.........#.........#.#........#...................##....#.#.#......#....##.................#........
.....#.........#..#.................#....#................#...............#...#..##.#.......#...#..#
............#..................#...#....................................#..........#.....#.##.......
....#.#...#...##....##............................
..#..........##.....#.............................
.#.....#..........................................
........#.....#...#...#...........................
.......#..........................................
#.....#...#..#...........#........................
.#...#..................##........................
.........#....#....#.......................#......
............................#.....#.............#.
....#...............##.......#.............#......
................................#.#...............
....##...#....#.....#.......##......#.........#...
..#..........#.................#...............#..
.......#............#......................###....
............#.#....#..........#..........#........
#.....#................#..........................
..#...........#....#..#.#....#.............#......
.........#............##....................##....
...........#..........#.#.......#..#...........#..
.....#.............#......#.......#.#.#...........
..#.....#........#.........#................#....#
..#.............#..........#.###..##...#.....##...
.......................#....#..........#....#.....
.#....###...#...#.....#...........................
#.........#.#...#....#....#..#....................
.#...#...................................##.......
.....................................##.....#...#.
#....#.........#..#........................#..#..#
..............#....#.....##.......#............#..
..........#.#......#....##....#...............#...
.........................###..#....#.....#........
.................#......#....#...............#..#.
....#..#.....#...............#...#.......#........
.................#...........#....................
....#....#.........#..#........................#..
....................................##...#......#.
...#.....#.............#..............#......#....
....#..#........##...##...............#.#.........
....#.........................#..#..#...#....#..#.
..#...........#........#............#.............
............................#..............#......
................#..........#....#........#.#......
#..............................#.....#............
#........#.........#..#..............#..........#.
..#..#.#..........#................#...........#..
...#....#.......#...........#..........#.......#.#
....#..#.......#..#...........#...................
..#.......#......................#..#..#..........
.......#...#....#.........#....#..........##......
........#.........................................



%% 2022\day22\lines.txt
1R5L300   -- ok
5R300     -- ok
1R55R300

%% 2022\day22\test.txt
        ...#
        .#..
        #...
        ....
...#.......#
........#...
..#....#....
..........#.
        ...#....
        .....#..
        .#......
        ......#.

10R5L5R10L4R5L5

%% 2022\day23\day23_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.ascii;
import std.process;

void display(int[][] elves)
{
    auto minx = elves.map!(x => x[0]).minElement;
    auto maxx = elves.map!(x => x[0]).maxElement;
    auto miny = elves.map!(x => x[1]).minElement;
    auto maxy = elves.map!(x => x[1]).maxElement;

    int N = maxx - minx + 1;
    int M = maxy - miny + 1;
    char[] field;
    field.length = N*M;
    field[] = '.';

    foreach (elf; elves)
    {
        int x = elf[0] - minx;
        int y = elf[1] - miny;

        y = M - 1 - y;

        field[y * N + x] = '#';
    }

    field.chunks(N).join('\n').writeln;
}


int main(string[] args)
{
    debug writeln("start");
    debug stdout.sync;

    auto lookup = [
        [[ 0,  1], [ 1,  1], [-1,  1]],
        [[ 0, -1], [ 1, -1], [-1, -1]],
        [[-1,  0], [-1,  1], [-1, -1]],
        [[ 1,  0], [ 1,  1], [ 1, -1]]
        ].cycle;

    auto neighbors = [
        [ 1, 0], [ 1,  1], [0,  1], [-1,  1],
        [-1, 0], [-1, -1], [0, -1], [ 1, -1]
        ];

    int[][] elves;
    foreach (y, line; stdin.byLine.enumerate)
        foreach (x, c; line.enumerate)
            if (c == '#')
                elves ~= [x, -y];

    debug elves.display;

    foreach (round; 0..10)
    {
        debug writeln("round ", round);
        int[][] proposals;
        int[] prop;
        prop.length = 2;
        foreach (elf; elves)
        {
            bool found = false;
            if (neighbors.map!(x => prop[] = elf[] + x[])
                         .any!(x => elves.canFind(x)))
                foreach (lp; lookup.take(4))
                {
                    if (lp.map!(x => prop[] = elf[] + x[])
                          .all!(x => !elves.canFind(x)))
                    {
                        prop[] = elf[] + lp.front[];
                        proposals ~= prop.dup;
                        found = true;
                        break;
                    }
                }

            if (!found)
                proposals ~= elf.dup;
        }

        debug
        {
            elves.writeln;
            writeln("proposals 1 = ", proposals);
        }

        int[] indices;
        foreach (p; proposals)
        {
            indices.length = 0;
            foreach (i, p2; proposals.enumerate)
                if (p2.equal(p))
                    indices ~= i;

            if (indices.length > 1)
                foreach (i; indices)
                    proposals[i] = elves[i].dup;
        }

        debug
        {
            writeln("proposals 2 = ", proposals);
            proposals.display;
            writeln;
        }

        proposals.copy(elves);
        proposals.length = 0;
        lookup.popFront;
    }

    auto minx = elves.map!(x => x[0]).minElement;
    auto maxx = elves.map!(x => x[0]).maxElement;
    auto miny = elves.map!(x => x[1]).minElement;
    auto maxy = elves.map!(x => x[1]).maxElement;

    writeln((maxx - minx + 1) * (maxy - miny + 1) - elves.length);

    return 0;
}

%% 2022\day23\day23_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.ascii;
import std.process;

void display(int[][] elves)
{
    auto minx = elves.map!(x => x[0]).minElement;
    auto maxx = elves.map!(x => x[0]).maxElement;
    auto miny = elves.map!(x => x[1]).minElement;
    auto maxy = elves.map!(x => x[1]).maxElement;

    int N = maxx - minx + 1;
    int M = maxy - miny + 1;
    char[] field;
    field.length = N*M;
    field[] = '.';

    foreach (elf; elves)
    {
        int x = elf[0] - minx;
        int y = elf[1] - miny;

        y = M - 1 - y;

        field[y * N + x] = '#';
    }

    field.chunks(N).join('\n').writeln;
}


int main(string[] args)
{
    debug writeln("start");

    auto lookup = [
        [[ 0,  1], [ 1,  1], [-1,  1]],
        [[ 0, -1], [ 1, -1], [-1, -1]],
        [[-1,  0], [-1,  1], [-1, -1]],
        [[ 1,  0], [ 1,  1], [ 1, -1]]
        ].cycle;

    auto neighbors = [
        [ 1, 0], [ 1,  1], [0,  1], [-1,  1],
        [-1, 0], [-1, -1], [0, -1], [ 1, -1]
        ];

    int[][] elves;
    foreach (y, line; stdin.byLine.enumerate)
        foreach (x, c; line.enumerate)
            if (c == '#')
                elves ~= [x, -y];

    for (int round = 0; ; round++)
    {
        //debug {
            if (round % 10 == 0)
                writeln("round ", round);
            //stdout.sync;
        //}
        int[][] proposals;
        int[] prop;
        prop.length = 2;
        foreach (elf; elves)
        {
            bool found = false;
            if (neighbors.map!(x => prop[] = elf[] + x[])
                         .any!(x => elves.canFind(x)))
                foreach (lp; lookup.take(4))
                {
                    if (lp.map!(x => prop[] = elf[] + x[])
                          .all!(x => !elves.canFind(x)))
                    {
                        prop[] = elf[] + lp.front[];
                        proposals ~= prop.dup;
                        found = true;
                        break;
                    }
                }

            if (!found)
                proposals ~= elf.dup;
        }

        int[] indices;
        foreach (p; proposals)
        {
            indices.length = 0;
            foreach (i, p2; proposals.enumerate)
                if (p2.equal(p))
                    indices ~= i;

            if (indices.length > 1)
                foreach (i; indices)
                    proposals[i] = elves[i].dup;
        }

        if (proposals.equal(elves))
        {
            writeln(round + 1);
            return 0;
        }

        proposals.copy(elves);
        proposals.length = 0;
        lookup.popFront;
    }

    return 0;
}

%% 2022\day23\in.txt
..#.#.#.....#.#.###...#..#.#.##...#..#.#....#....#.###..#.#.##.#.#####.
...#......#.##.#......#...#.##.....#.#.##.#####..##.##.#...#..##..#.#..
##....###.###..###....#.#..####...#####..#..###.##...########..#.####..
#.#..###.#.#..#...###.......##.###.##.###.##.#..##..#.#.#..#..#..#####.
##.#..###.##..##..#.###.....#...#..#.##.#.###.####..#.###.#.#.###..###.
#.#####.####......###.###..#..#...#.......##.###...#.#.#...######.#.###
..###.#.#...##.###.#.####.###.##...###.###..#...#.#######.##.#.##.#.##.
##.##..##.#.####..####..#.##...#.#.#.###.###.####.#....#..#..##.#..####
.#####...#####...####...#.##.##...#..####..#.......#..##.#..#..##.####.
##..###..##......####......#.##....#....###..#..##...#......###.#.####.
.#.#.......#.###.##......#..#..#.##....##....##.####.#.##..###..#.#####
....#..#....##..##########...#...#.#...#.##.#..##...#.#.###.##..##..###
#.#..#.###.#.#..###......###.#..#..#.#.#.##..###.#.##.##..####.#.#....#
..##...###...###....###..###.#######..##.....#..#.#####.#.########...#.
..#.#.....####..#..###..#.......#.#..#.#...#######..###......####...#..
##.##.###..##..####.#..#....##.#....#.#.###.#..#...####....#.###.#....#
.#.....##.###.#.##...#.######.#.######.#..##..#.##...##....#...#####.#.
#..#....#.....#.#.......##.......##..#.#....#..#.#####..#...#...###.#..
##..#....####.#....##....##.###.#....#...###..####..##.####........#.#.
###......#.#.#.##.##.#.#....#..############.#.#..##.##.####...#.#.###.#
#####.####.#.#.####..#...#.###..#.#.#....##.#.######.###.##.####.....##
...###.###....###.#.#.#.#.#..##.#..#..#..##.#....###..#.#.#.###....#.##
#######.##.##.#..##.###...#..#.#..#..#####.#..####..###.#....##.#..#.#.
....#..#...#.#.##.#.####..###.#.#..#.##.#.#...........#..#..#.##.##.##.
.##...#...###....##.##.....#....###.#####...#.##..##..#..##.....##...#.
###..#.##.##.#.#..##.....##.##.###.#...##.#..##..########.#.#.###.#.#.#
.####...##..##..#.##.#..#.#.###...#...##.###..##.#.######..##....#..#.#
.##.#.....#...#.###.....#..#...##...##.###.#.##...##.#......#...#...#..
..###.#...##..##.##........#...##.#.#.##.#....###..#######.#.##...#....
###..###..#.###.#.########...#.##.#...#.#...###..###..#...#.#.##...##.#
..##...#....###.###..#..##.####.#.##.....#.####.....###....#..#.##.###.
#....#.###..##...#...#....#..##...####..#.....#..#...####.#..##.##....#
##.##.#.#.##...####.######.#.#...##..###.....###...#..#######..#####.##
#.#..#...#....###.#.##.#.#....#..#.###.##.###.##.#..##..#.#..#...##....
#..#..##....##..#.###.#..#...#.#..##.###..#.#..#...#.#..#...##.#####.#.
#..#...##..###.#...#.######..###.#..##.##..####.....####.#########.#.#.
#.#######.###.....#....##.#.#........##.##.###...##.###.#.##.#.########
.##..##.#..#..#..#.##.########.##....#.###.#....#######...#..###.######
#.#....##....#..##.#.#.###..####...######.#####.#.#.#..#.#.###...###.##
#........###..#.####......######.#...##...#..#.#..#.#.#.#...#.#.####.##
###.#.#.#....##.......###...#.###....#####..#....###.#.....#.##.#....##
..#.#.####.#.#.#..##.##..#.#.##..#...###..#.#.###.#.#...##.###.###..#..
##.#..#...##..##..###...##..#.###..#..##..#..#.....#.#..###..##.##.###.
..#...#..####..#.##.##.#...#..#..#..##.#.####.##....#...#.#.#####..##..
.....##...#.#......#..##..####...###..####..#........#..#...#.####.###.
.##.#..####.######....###.#.###.###.##...###....##.##..####.#...#.##.#.
.#.#.#####.#.#.#####.###...###.....##..#.#.#.##.#.###....###.#...#..#.#
##.#....#..#.##.##....##.#.###.###..#.##.##.##.#.#.#....#..#....#.#.#..
...#.#.###.....##..#####.###.##..#..####.#..####.#.#.#.####..#.##..##..
....##.##.###...#####.#..#....##..#..#.#.#.#.#..#.#...#...#.#.....#####
.#.##...#.###...#.#.#..##.##...####.....##.....#...##..####.#.#.#....##
.....#.#.##...#....#.###.#.##.###...#####..#.#.#...#####.#.#.##....##.#
.......##.##.....#....#..####...#....##.####..#..##..#...#.#..####...##
###.....####.##....###..######..#..###....##...##.#.###...##.##..##...#
.#.##.#.##....####......#.#..#.......##....##.##..##..#..##.##.#####..#
#.#....######..###..#.##...###..#.##..#.#...#.#.#.#.#...###.##.#.##.#.#
.....#..###..###..#..#..###..#...#.#.#.#.##..###.#.#.#...#......#...###
###..#..####.##.#...###...###.#.#..#...###.####.#...#...#.....#.#.###.#
###....#######.#..#....##..######.##.#.#..##.#.##..#.#...#...#.#.#..###
##.##..#..#####..##.#..#..#####.###.##.#####..####..#####.#.....###.##.
...##.####...#..###..#.#.#...#..##......#####.#.#.##.......####.....##.
.#....#.#.#.###.##.#.#..##...####.##..###..##..#....#...#####.#...##.#.
#....#.##....#...#.##.####..#...#.#..#.....#####.#.##.#.#..####.##.#.#.
....##...##############.#.##....####.#.#.#...##.###...###.#....##....#.
..###.#.#.#.##..##.#.##.##..#.#.#..#....##.#..#.######..##.#######.#...
###.#..##.#.###.##..##.#.#....###.#.##....##..##.##...#.#.###..#...###.
##..#..##.......###.###...##.##.#.#.##.#.#.##.#.#..#..###...###.##.#...
##..#####..#.#.#..##.#..###.#.#...###.#.##.##....###....#.#.#....##.#.#
#.###..###......##.###.#...####.#.##..##.#.#...##....#####.#.###.###..#
#.....#....#.##.##.#.#...#.#.####..#.###...#.####.####..#...#.##.###...
.#.#.....##...#.#...####..####.#.##...#..##.#..###...###.#.#.#.#.######

%% 2022\day23\test.txt
.....
..##.
..#..
.....
..##.
.....

%% 2022\day23\test2.txt
....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#..

%% 2022\day24\day24_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.ascii;
import std.process;

int mod(int x, int m)
{
    return ((x % m) + m) % m;
}

int main(string[] args)
{
    enum offs = [
        '>': [ 1,  0],
        'v': [ 0,  1],
        '<': [-1,  0],
        '^': [ 0, -1],
        ];

    auto input = stdin.byLine;
    //auto first = input.front;
    //input.popFront;

    int N, M = 0;
    int[][] blizzards;
    int start_x = 1, start_y = 0;
    int end_x, end_y;
    foreach (y, line; input.enumerate)
    {
        if (line[0..2] == "##")
        {
            N = line.length;
            M = y + 1;
            end_y = M - 1;
            end_x = line.length - line.find('.').length;
            break;
        }
        foreach (x, c; line.enumerate)
        {
            if (c.to!char in offs)
                blizzards ~= [x.to!int, y.to!int] ~ offs[c.to!char];
        }
    }

    int[][] visited;
    int[] occupied;
    visited.length = occupied.length = N*M;
    visited[start_y * N + start_x] ~= 0;

    int[][] tuples = cartesianProduct(iota(1,N-1), iota(1,M-1)).map!(x => [x[0], x[1]]).array;
    tuples ~= [start_x, start_y];
    tuples ~= [end_x, end_y];

    for (int T = 1; ; T++)
    {
        debug writeln("T = ", T);

        if (visited[end_y * N + end_x].length > 0)
        {
            writeln("ans = ", visited[end_y * N + end_x].minElement);
            return 0;
        }

        // move blizzards
        foreach (ref b; blizzards)
        {
            b[0..2] += b[2..4];

            b[0] = mod(b[0] - 1, N-2) + 1;
            b[1] = mod(b[1] - 1, M-2) + 1;
        }

        // update occupied
        occupied[] = 0;
        occupied[0..N] = 1;
        occupied[start_y * N + start_x] = 0;
        foreach (i; 1..M-1)
        {
            occupied[i * N] = 1;
            occupied[i * N + N - 1] = 1;
        }
        occupied[(M - 1) * N..(M - 1) * N + N][] = 1;
        occupied[end_y * N + end_x] = 0;
        foreach (b; blizzards)
            occupied[b[1] * N + b[0]] = 1;

        debug
        {
            // foreach (c; occupied.chunks(N))
            //     c.writeln;
        }

        int[] buf;
        buf.length = 2;
        foreach (pos; tuples)
        {
            if (occupied[pos[1] * N + pos[0]] == 0)
            {
                foreach(npos; offs.values.chain([[0, 0]])
                                  .map!(x => buf[] = x[] + pos[])
                                  .filter!(x => (x[0] == start_x && x[1] == start_y) || (x[0] > 0 && x[1] > 0 && x[0] < N-1 && x[1] < M-1)))
                {
                    if (visited[npos[1] * N + npos[0]].canFind(T-1))
                    {
                        visited[pos[1] * N + pos[0]] ~= T;
                    }
                }
            }
        }
    }

    //writeln(start_x, " ", start_y, " ", end_x, " ", end_y, " ", N, " ", M);

    return 0;
}

%% 2022\day24\day24_2.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.ascii;
import std.process;

int mod(int x, int m)
{
    return ((x % m) + m) % m;
}

int main(string[] args)
{
    enum offs = [
        '>': [ 1,  0],
        'v': [ 0,  1],
        '<': [-1,  0],
        '^': [ 0, -1],
        ];

    auto input = stdin.byLine;
    //auto first = input.front;
    //input.popFront;

    int N, M = 0;
    int[][] blizzards;
    int start_x = 1, start_y = 0;
    int end_x, end_y;
    foreach (y, line; input.enumerate)
    {
        if (line[0..2] == "##")
        {
            N = line.length;
            M = y + 1;
            end_y = M - 1;
            end_x = line.length - line.find('.').length;
            break;
        }
        foreach (x, c; line.enumerate)
        {
            if (c.to!char in offs)
                blizzards ~= [x.to!int, y.to!int] ~ offs[c.to!char];
        }
    }

    int[][] visited;
    int[] occupied;
    visited.length = occupied.length = N*M;
    visited[start_y * N + start_x] ~= 0;

    int[][] tuples = cartesianProduct(iota(1,N-1), iota(1,M-1)).map!(x => [x[0], x[1]]).array;
    tuples ~= [start_x, start_y];
    tuples ~= [end_x, end_y];

    int nrun = 0;
    for (int T = 1; ; T++)
    {
        debug writeln("T = ", T);

        if (nrun == 0 && visited[end_y * N + end_x].length > 0)
        {
            debug writeln("reached end on step ", T);
            nrun = 1;
            foreach (ref v; visited)
                v.length = 0;
            visited[end_y * N + end_x] ~= T - 1;
        }

        if (nrun == 1 && visited[start_y * N + start_x].length > 0)
        {
            debug writeln("reached start on step ", T);
            nrun = 2;
            foreach (ref v; visited)
                v.length = 0;
            visited[start_y * N + start_x] ~= T - 1;
        }

        if (nrun == 2 && visited[end_y * N + end_x].length > 0)
        {
            debug writeln("reached end on step ", T);
            writeln(T - 1);
            return 0;
        }

        // move blizzards
        foreach (ref b; blizzards)
        {
            b[0..2] += b[2..4];

            b[0] = mod(b[0] - 1, N-2) + 1;
            b[1] = mod(b[1] - 1, M-2) + 1;
        }

        // update occupied
        occupied[] = 0;
        occupied[0..N] = 1;
        occupied[start_y * N + start_x] = 0;
        foreach (i; 1..M-1)
        {
            occupied[i * N] = 1;
            occupied[i * N + N - 1] = 1;
        }
        occupied[(M - 1) * N..(M - 1) * N + N][] = 1;
        occupied[end_y * N + end_x] = 0;
        foreach (b; blizzards)
            occupied[b[1] * N + b[0]] = 1;

        debug
        {
            // foreach (c; occupied.chunks(N))
            //     c.writeln;
        }

        int[] buf;
        buf.length = 2;
        foreach (pos; tuples)
        {
            if (occupied[pos[1] * N + pos[0]] == 0)
            {
                foreach(npos; offs.values.chain([[0, 0]])
                                  .map!(x => buf[] = x[] + pos[])
                                  .filter!(x => (x[0] == start_x && x[1] == start_y) || (x[0] == end_x && x[1] == end_y) || (x[0] > 0 && x[1] > 0 && x[0] < N-1 && x[1] < M-1)))
                {
                    if (visited[npos[1] * N + npos[0]].canFind(T-1))
                    {
                        visited[pos[1] * N + pos[0]] ~= T;
                    }
                }
            }
        }
    }

    //writeln(start_x, " ", start_y, " ", end_x, " ", end_y, " ", N, " ", M);

    return 0;
}

%% 2022\day24\in.txt
#.########################################################################################################################
#<.>^^^v^^^^<^><>^v^<v<>>v<<<v.vv<<v<v>v.>>>^<<>.<>.v>^v<.v<^^<^<<v.v>><v<>^^^v^.^>.<>vvv>v>>v><v^^>^<^vv>^>v>>^v^>v>^>><#
#>^<^<^<^v^..>^<<>v^>^^<<v^>>vv<>.^.v<^<^..^vv.>>>>v^v>>v^..<>.><v>>^^>vv>.v.>><vv<vv^<v<^^><><.^^.^v.<^^<<..>v<>vv>^>^><#
#..v^^^<^>.>><vv..><vv>^v^>v<v.>^<>>^^<^v>.v>^.>>.<>>v.>.v<>^^<^<vv<>^v<<v^<><.v<<vv>^><<<^^>.<<><v<^^><<><.^<^><>v<vvv.>#
#<^<^v>v^<v<<>vvv^^v^>^.<<><v>><v.^.v.>v..>>^<><<>v.v><^v<<.<><><><<^v.<^>>v^v^vvv><vv<.><.^<vv^^<>>.>>^^v>v^^vv<v<<v><<>#
#<.v>>vv<<vv.v<>^v<^^>>>^<v^>>^vv^vv.>v.>><<v^^<<^<v.^>^<.^>vv^^vv<<>v><^<>.>><^vvv>.>><<vv<vv^vv<^vv>>..^<>>^<vvv><<<^^<#
#>v^>.<<>vvvv<v^<>^<^v<v<<>v^<>^<<v<>v>.v<vv.v<.^>^><<vv<^..^>>^>>^^^<<^v>^<>^>>.>>^v.>^>vv.<.v><^v<^.v.vv^<>^>v.v.><^>>>#
#.>.>^<>^<>><>^.^v<<v<>^>^^<>v<.><^<.v><^v^.v^><>v<>^^^v^vv<.<<vv>v<<<<><<..^^><>^<>v>v.^vv^><.v^vv<v<<>>v^v^^^<^^.><^<^<#
#<><.^>>><>v<v<>.v.^>v^>.>^v>^^>^^.v>^vv<<<^.v>^>v><<^>v<v>^.>>>>v^<vv<v^>v<<v^<<^.><<<<.>v^>>v><>.<><.^<<>>^v^>>^>>^vv<>#
#<v^^^<<v.>.<>v^v^v^^><<.^<<>^><v>v<>^<<<^>v.>v^<<^^^v<<>^<>>^>^<.^v^>>>.^v^<<^><<<^>.<v>^v>^^v<^v..vv.<.^<.v.^v>>v<.<.^>#
#<.<^^v<>^^v<>^<.v<^.^vv^><v<>>.><^>v<^>^><vv><vvvv><.<<><^>^^..<v^v>v>^v<<vv^vv<^^^v>v<^v>vvv^<^>>v^<vv^^vv<<v.^^>^<.>v>#
#<v<^^v<v^v>v^v^>>^<v<<>^<^<.><^^^.v>>vv<^><^v<^.^vv^^<<<v>.^.vv<^>^<vv<v<..v^^.^>^^v>v>.vv.v^v<<>><v<^<<v<^>>vv>.<^^<v>>#
#><v^>^><v<.>.^v^^vv<<<^<<>vv^.v^v^^v<<<<v.v>vv^<.>v^<<<.v<^><^<<..>v.><^v^>v^>.<>v<<><<^^^.>^.^<>^<^>>>>><<vvv.^vvvv^.>>#
#<v>>>v^>^<^>vv^>^^^^v.^><v<v.>^<v<<>^>^^v^v.^^^><vv>v><..^vv>>vv.<^v^vv^><<<v>v^v>^>^v>>><<.v^<^^.<>>><<>v><^<><.>v<^<v<#
#<>.>v^<><>.<<<><v^^v^v><<<>vv><.^>v><<<v.v<<^>vvvv^<v><>.>>^><>^v<v><.v^^v>vv><^^v^>.>>^v.^<vv>>.>^<<<<v<^>v><<<<^><^v>>#
#.v<>v^^<>v><^v<<^^^.^v.>^^>^^<>^>^^vvv^^^^^v.^<>v<>^>^>vv..<^^^v>v^>^^^v>><^><^.^<><v>>^><^<^vv.<>..^>>.<^.^><^v>>v>v^v>#
#><<^vv<<^^>v<v<^><v><v.vvv>.^<<>.>^^^>>>^^.>^>v^^v>^><<<.<<v^><>^vv>>v>><>v>.<^..><^.v^>><<>>^v^<^..^v><^v.vv><v^>^>v<v>#
#<^vv.vv<^v^.^<.<v>vv>v^>v.v<v>v<^>^<>.<>^<.^^^v^v^>>v<<.><v>^<v<<vv<><<v^.vv><v^<v^>v>>.>^<^^vv>v>>v^^><^<v^^<vv^<>vv>><#
#>^v^<.^<>>^^><>><v^^v>.<<<<v<>v<<v<..>.vv<>^^v<v..vv^v>.v<>>^.<v^.>>vv>>v..<v><v^^>^<v.^^vv>v^.<^<^<v^v.>^<^v<<><v><v^<.#
#>^^v^>>><<<^vv>^>.<<vvvvv<v>><<>v>>><.<><.<^>^vv.<.<<<^...^v>>^vvv.^v<vvv.v^.^<<v^v<^^>^.^><vv^v<>^>v<^<v.>.<^v<<.^v^^><#
#>^^v^>>^v>^>v<.>vv<..^<v<<^<vv^>>^v><vv^^<<^<v><<v<^^^<v^vv>^>>.^<^><^>^<v<>v^<vv<>v<<vv<<^v^<vv<.>vvv>.v><<>v>^.^>v<^>>#
#<>.>v^><><<^.>vvv^^<<<^vv><v.<<<..<>v><v>><>^.><><v><^^^><vv..^>^><^.^^^vv.<^^^<v<<^.v>>.>>v^v^v^v..^>vv>>^^^>>v^<v<<<.<#
#<><<>^<.^><><^..v.><v^..v<><<vvv<^<vv.>.^^.^^v<>^vv.>^.<....<.v>><.^^<vvv^^^^v>^.>>^^v>.v^>>.^><^><v><><<><><^v>.^.v^<^.#
#<>^<^<vvv><<..<><>><<<<^^v<^^^>v^.v^v^vv.^v>>><<.v..^^v<^^>v>>>^v^.>^>^v<v<^.v<^v>><v^>v><^^>>v<v>v^.>>v.vv>^^<v^>>>.>><#
#<v^<>^^v^^><v^^^^.v>v.^><.>v^v>.^<..>>v>.>.v><.^^.^<.^<vvv<>^<^.v<v<<<>vvv>..<^<<..^><<^>>v<>^v><^>^>v<<>^v<v^>^^.^<>v>.#
#>^>>v^<vvv^>>>v>v>^>>^<>>^>>^>v^>>>>^v><^v^<^>v<>>vv.<^vv<^v>^<v<>>.>vv<<^>>><^^<<vv>^>^<>.<<^>.><<^^<v^>^<<>>>>.v.>...<#
########################################################################################################################.#

%% 2022\day24\test.txt
#.######
#>>.<^<#
#.<..<<#
#>v.><>#
#<^v^^>#
######.#

%% 2022\day24\test2.txt
#.#####
#.....#
#>....#
#.....#
#...v.#
#.....#
#####.#

%% 2022\day24\test3.txt
#.#####
#.....#
#<....#
#.....#
#...^.#
#.....#
#####.#

%% 2022\day25\day25_1.d
import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.ascii;
import std.process;

int mod(int x, int m)
{
    return ((x % m) + m) % m;
}

void normalize(ref int[] rep, int b = 5)
{
    int b2 = b / 2;

    for (int i = 0; i < rep.length; i++)
    {
        debug writeln("i = ", i);

        if (rep[i] > b2)
        {
            int carry = (rep[i] + b2) / b;
            int rem = rep[i] - carry * b;
            rep[i] = mod(rem + b2, b) - b2;
            if (i == rep.length - 1)
                rep.length++;
            rep[i+1] += carry;

            debug writeln("carry = ", carry, " rem = ", rem, " rep[i] = ", rep[i], " rep[i+1] ", rep[i+1]);
        }
    }
}

int main(string[] args)
{
    enum digit = [
        '0' : 0,
        '1' : 1,
        '2' : 2,
        '-' : -1,
        '=' : -2,
        ];
    enum repr = [
         0 : '0',
         1 : '1',
         2 : '2',
        -1 : '-',
        -2 : '=',
        ];

    enum long base = 5;
    long s = 0;
    foreach (line; stdin.byLine)
    {
        long e = 1;
        long v = 0;
        foreach (c; line.retro)
        {
            v += digit[c.to!char] * e;
            e *= 5;
        }
        s += v;
    }

    // to regular base=5
    int[] rep;
    int e = 1;
    while (s > base)
    {
        long d = s % (e * base);
        rep ~= (d / e).to!int;
        s -= d;
        e *= base;
    }

    normalize(rep);
    rep.retro.map!(x => repr[x]).writeln;

    return 0;
}

%% 2022\day25\in.txt
121=10120=1022=2=0
10==--=-=2
2=11
120221-1-
2002011
1-00-11=0
1==2=-200101===
2122=-10
1=1=2=-1
11--=-10-0-0
2=-210=
2-==1221011=021==-
2
1-2==212
1-2=0=12--0111010=0
1220-20=1=1
1211=1
10-22=-212--00
1=---021
1-010-21-2-
10-==00122-=0--
10=-
1=20=-=---1=1
1-0-0
2===11=12200=2
1===1
1002
10=-==-02
12---2-==-020122
11=-=2
1-==2-=--2
1-1112
210-212-=20220-1
1=-0111=0==
100=20==-
200==22-2=
2-
21-=1012=2=01=
1=-=0=0-01=0
1-2
1121==0=
2--21
212111=00=-1-=1=
10-021-
2=
2=0=12-
1-0--
2-0=21012==112=-1=
1222==01=100121=0-=
1011=01
12102-
10012=0-11021
1-=01-
12=010=12-0=02=11
1-22=2--1-
100=010-1
210
1-
22--011--1212101
11201
1=2=-122=---1
1===2122=-01=0=2
1011--0--=20
202-2-1=2
2=000=10=-0
110-=00-1211
2==0=--00-2===
110
2=-02-1220012-
1=21----=-=
1=1
12=--2=012-21
1=0020-1--=0-=
1==
11-01101221=-02
1=0201-2==0--01
1=120120-=1
1-121=====2-0=-
201=1=1101-=02==
1-00--0-
10-202
22-
1==1=-2==-0-110
1==21=1=20-1210=12
20112-1=0--0=
1=-=2021--0===21
1-==-2
1==120-0-
1=0111=21-00-0=2
1-110-=11-1021
22
1=1212=20=
212=1=-12---122
2=2
2220-1=2==022=--0=
2-02222
1--0=0-22=-1
120==2100
10==201121==2-1221-0
12210--==2--01022
211120-21202
22021011
21---0=2-10=22
1-22=-0
12201=-2121-=-1
11122-=202-
1-2---=
1-22=01=10-10
1-0=0=21211011-0-
2---
1==12100
112=1121
120--1
1-11=-2=-0
1--=02-02
2000-22==0221=2=
1=1-10-1-==100=1
202-011011
20=10=-0002=00=
2=1-2
220
11==-0=120--0-10=
1=112-22202=2
10=-0
1=1=2=0
2222--11---011-1
1=-1=2=1-2122--10-1
11021
101
11=2101222==
100112-2011
1=1=
2-021--
12211-1122=2-
2--2=-1=-
21012=2---2=2120=1
1-010-==--2
12=-22000-
2-===1-1
22=-=122=--1=
2-2=-0-021

%% 2022\day25\test.d
// (setq d-indent-offset 4)
// (setq tree-sitter-indent-d-scopes 4)

import std.stdio;
import std.string;
import std.conv;
import std.algorithm;
import std.range;
import std.format;
import std.typecons;
import std.concurrency;
import std.exception;
import std.math;
import std.numeric;
import std.ascii;
import std.process;

int mod(int x, int m)
{
    return ((x % m) + m) % m;
}

void normalize(ref int[] rep, int b = 5)
{
    int b2 = b / 2;

    for (int i = 0; i < rep.length; i++)
    {
        debug writeln("i = ", i);

        if (rep[i] > b2)
        {
            int carry = (rep[i] + b2) / b;
            int rem = rep[i] - carry * b;
            rep[i] = mod(rem + b2, b) - b2;
            if (i == rep.length - 1)
                rep.length++;

            rep[i+1] += carry;

            debug writeln("carry = ", carry, " rem = ", rem, " rep[i] = ", rep[i], " rep[i+1] ", rep[i+1]);
        }
    }
}

int main(string[] args)
{
    enum digit = [
        '0' : 0,
        '1' : 1,
        '2' : 2,
        '-' : -1,
        '=' : -2,
        ];
    enum repr = [
         0 : '0',
         1 : '1',
         2 : '2',
        -1 : '-',
        -2 : '=',
        ];

    // enum long base = 5;
    // long s = 0;
    // foreach (line; stdin.byLine)
    // {
    //     long e = 1;
    //     long v = 0;
    //     foreach (c; line.retro)
    //     {
    //         v += digit[c.to!char] * e;
    //         e *= 5;
    //     }
    //     s += v;
    // }

    enum base = 5;
    foreach (s; 0..100)
    {
        // to regular base=5
        int[] rep;
        long e = 1;
        while (s > 0)
        {
            long d = s % (e * base);
            rep ~= (d / e).to!int;
            s -= d;
            e *= base;
        }

        rep.writeln;

        normalize(rep);

        rep.writeln;

        writeln;
    }

    //rep.retro.map!(x => repr[x]).writeln;

    return 0;
}

%% 2022\day25\test.txt
1=-0-2
12111
2=0=
21
2=01
111
20012
112
1=-1=
1-12
12
1=
122
